{"version":3,"file":"static/js/5752.b3b32389.chunk.js","mappings":"mNACA,QAA2B,2BAA3B,EAAqE,+BAArE,EAAoH,gC,cCoB7G,MAAMA,EAAYC,IACvB,MAAM,aAAEC,GAAiBD,EACnBE,EAAUD,GAAgBE,EAAAA,GAEhC,OACEC,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAaC,UAC3BC,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACHC,KAAK,WACLL,UAAWC,EACXK,MAAM,UAASJ,SAAA,EAEfH,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CACJD,MAAM,UACNE,MAAM,2CACNX,QAASA,EACTG,UAAWC,KAEbE,EAAAA,EAAAA,MAACM,EAAAA,EAAI,CACHC,QAAQ,cACRC,MAAM,YAAWT,SAAA,CAClB,8QACoDH,EAAAA,EAAAA,KAACa,EAAAA,EAAI,CAACC,KAAK,cAAaX,SAAC,+CAAc,aAQpG,G,wFCnBO,MAAMY,EAAgBnB,IAC3B,MAAM,SAAEoB,EAAQ,cAAEC,GAAkBrB,GAC7BsB,EAAMC,IAAWC,EAAAA,EAAAA,UAAS,KAC1BC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAwB,MAyBlD,IAvBAK,EAAAA,EAAAA,WAAU,KACR,IAAIC,GAAY,EAiBhB,OAhBAJ,GAAa,GACbE,EAAS,MAETG,iBACE,IACE,MAAMC,QAAaC,EAAAA,EAAAA,IAAQb,GACvBU,GAAWP,EAAQS,EACzB,CAAE,MAAOE,GACHJ,GAAWF,EAASO,OAAOD,GACjC,CAAC,QACKJ,GAAWJ,GAAa,EAC9B,CACF,CAEAU,GAEO,KACLN,GAAY,IAEb,CAACV,IAEAK,EACF,OACErB,EAAAA,EAAAA,KAAA,OAAKiC,MAAO,CAAEC,UAAW,SAAUC,QAAS,IAAKhC,UAC/CH,EAAAA,EAAAA,KAACoC,EAAAA,EAAM,CAACC,KAAK,QAKnB,GAAId,EAAO,CAET,MAAMe,GAAQC,EACd,OAAOvC,EAAAA,EAAAA,KAACL,EAAAA,QAAQ,CAACE,aAAcyC,EAAQf,OAAQiB,GACjD,CAEA,OAAOxC,EAAAA,EAAAA,KAAAyC,EAAAA,SAAA,CAAAtC,SAAGc,EAAcC,K,+HCzE1B,QAAsD,wBAAtD,EAAmI,uBAAnI,EAAsK,wB,+DCOtKwB,EAAAA,EAAKC,iBAAiB,aAAcC,EAAAA,GACpCF,EAAAA,EAAKC,iBAAiB,MAAOE,EAAAA,GAC7BH,EAAAA,EAAKC,iBAAiB,OAAQG,EAAAA,GAC9BJ,EAAAA,EAAKC,iBAAiB,OAAQI,EAAAA,GAC9BL,EAAAA,EAAKC,iBAAiB,SAAUK,EAAAA,GAEhC,QAAeN,EAAI,E,gDCSZ,MAAMO,EAAsDC,IAAA,IAAC,KAClEC,EAAI,iBACJC,EAAgB,UAChBnD,GACDiD,EAAA,OACClD,EAAAA,EAAAA,KAAA,OACEqD,IAAKD,EACLnD,UAAWA,EAAUE,UAErBH,EAAAA,EAAAA,KAACsD,EAAAA,GAAQ,CACPC,QAAS,CACPC,UAAW,CACTC,EAAG,CACDC,UAAW7C,EAAAA,EACXjB,MAAO,CACLU,KAAM,SACNqD,OAAQ,aAIdxD,SAEDgD,O,cC5CP,QAAiC,uC,cCyB1B,MAAMS,EAAkBhE,IAC7B,MAAM,MAAEiE,EAAK,UAAEC,EAAS,iBAAEV,GAAqBxD,GAExCmE,EAAeC,IAAoB5C,EAAAA,EAAAA,WAAU,GAC9C6C,ECNwBC,EAC9BL,EACAM,EACAJ,EACAC,KAEA,MAAOC,EAAaG,IAAkBhD,EAAAA,EAAAA,UAAS,GA2C/C,OAzCAK,EAAAA,EAAAA,WAAU,KACR,MAAM4C,EAAYF,EAAUG,QAC5B,IAAKD,IAAcR,EAAMU,OAAQ,OAEjC,MAAMC,EAAeA,KAEnBR,GAAkB,GAGlB,MAAMS,EAAUZ,EAAMa,IAAKC,IACzB,MAAMC,EAAOP,EAAUQ,cAAc,IAAIF,EAAKG,MAC9C,OAAOF,EACHA,EAAKG,wBAAwBC,IAAMX,EAAUU,wBAAwBC,IACrEC,MAMN,IAAIX,EAAU,EACd,IAAK,IAAIY,EAAI,EAAGA,EAAIT,EAAQF,OAAQW,IAC9BT,EAAQS,GAJI,IAIc,IAC5BZ,EAAUY,GAKVC,KAAKC,IAAIf,EAAUgB,aAAehB,EAAUiB,UAAYjB,EAAUkB,cAAgB,IACpFjB,EAAUT,EAAMU,OAAS,GAE3BH,EAAeE,IAMjB,OAHAD,EAAUmB,iBAAiB,SAAUhB,EAAc,CAAEiB,SAAS,IAC9DjB,IAEO,KACLH,EAAUqB,oBAAoB,SAAUlB,KAEzC,CAACX,EAAOM,EAAWJ,EAAeC,KAEX,IAAnBD,EAAuBE,EAAcF,GD3CxBG,CAAiBL,EAAOT,EAAkBW,EAAeC,GAE7E,OAAKH,EAAM8B,KAAMC,GAAMA,EAAEC,MAAQ,IAG/BzF,EAAAA,EAAAA,MAAA,OACEH,UAAWC,EACX,aAAW,2GAAqBC,SAAA,EAEhCH,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACHC,QAAQ,cACRC,MAAO,OAAOT,SAEb2D,KAGH9D,EAAAA,EAAAA,KAAA,MAAAG,SACG0D,EAAMa,IAAI,CAACC,EAAMmB,IAChBnB,EAAKkB,MAAQ,GACX7F,EAAAA,EAAAA,KAAC+F,EAAAA,EAAO,CAENC,GAAI,CAAEC,KAAM,IAAItB,EAAKG,MACrBoB,OAAQJ,IAAU7B,EAClBhC,MAAO,CAAEkE,YAAgC,IAAlBxB,EAAKkB,MAAQ,IACpCO,QAASA,IAAMpC,EAAiB8B,GAAO3F,SAEtCwE,EAAK/C,MAND+C,EAAKG,IAQV,WA1BgC,M,wBE/B9C,QAA0B,iCAA1B,EAAwE,oCAAxE,EAAyH,oC,kCCUlH,MAAMuB,EAAczG,IACzB,MAAM,SAAE0G,EAAQ,SAAEC,EAAQ,UAAEtG,GAAcL,EAC1C,OACEQ,EAAAA,EAAAA,MAACS,EAAAA,GAAI,CACHmF,GAAIM,EACJrG,UAAWA,EAAUE,SAAA,EAErBH,EAAAA,EAAAA,KAACwG,EAAAA,EAAM,CAAArG,UACLH,EAAAA,EAAAA,KAACyG,EAAAA,EAAW,CAACC,UAAU,YAEzB1G,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACHC,QAAQ,cACRC,MAAM,OAAMT,SAEXoG,QCdII,EAAc/G,IACzB,MAAM,SAAE0G,EAAQ,SAAEC,EAAQ,UAAEtG,GAAcL,EAC1C,OACEQ,EAAAA,EAAAA,MAACS,EAAAA,GAAI,CACHmF,GAAIM,EACJrG,UAAWA,EAAUE,SAAA,EAErBH,EAAAA,EAAAA,KAACU,EAAAA,EAAI,CACHC,QAAQ,cACRC,MAAM,OAAMT,SAEXoG,KAEHvG,EAAAA,EAAAA,KAACwG,EAAAA,EAAM,CAAArG,UACLH,EAAAA,EAAAA,KAACyG,EAAAA,EAAW,CAACC,UAAU,gBCblBE,EAAmBhH,IAC9B,MAAM,SAAEiH,EAAQ,SAAEC,GAAalH,EAE/B,OACEQ,EAAAA,EAAAA,MAACC,EAAAA,EAAI,CACH0G,KAAK,YACLxG,MAAM,SACNN,UAAWC,EACXI,KAAK,QAAOH,SAAA,CAEX0G,IACC7G,EAAAA,EAAAA,KAACqG,EAAU,CACTC,SAAUO,EAASG,KACnBT,SAAUM,EAASI,KACnBhH,UAAWC,IAGd4G,IACC9G,EAAAA,EAAAA,KAAC2G,EAAU,CACTL,SAAUQ,EAASE,KACnBT,SAAUO,EAASG,KACnBhH,UAAWC,QChCrB,EAA0B,yBCcbgH,EAAUhE,IAAiC,IAAhC,SAAE/C,GAAwB+C,EAChD,OAAO9C,EAAAA,EAAAA,MAAA,SAAOH,UAAWC,EAAYC,SAAA,CAAEA,EAAS,QCmBrCgH,EAAgCjE,IAAmC,IAAlC,KAAEC,EAAI,SAAE0D,EAAQ,SAAEC,GAAU5D,EACxE,MAAME,GAAmBgE,EAAAA,EAAAA,QAAuB,MClBlBjE,KAC9B,MAAM,KAAE8C,IAASoB,EAAAA,EAAAA,OAEjB5F,EAAAA,EAAAA,WAAU,KACHwE,GAGLqB,WAAW,KACT,MAAMxC,EAAKyC,mBAAmBtB,EAAKuB,QAAQ,IAAK,KAE1CC,EAAKC,SAASC,eAAe7C,GAC/B2C,GACFA,EAAGG,eAAe,CAAEC,SAAU,SAAUC,MAAO,WAEhD,MACF,CAAC7B,EAAM9C,KDKV4E,CAAgB5E,GAGhB,MAAMU,EE9BD,SACLR,GAEgB,IADhB2E,EAA0BC,UAAA1D,OAAA,QAAA/B,IAAAyF,UAAA,GAAAA,UAAA,GAAG,GAE7B,MAAOpE,EAAOqE,IAAY9G,EAAAA,EAAAA,UAAwB,IAelD,OAbA+G,EAAAA,EAAAA,iBAAgB,KACd,GAAsB,qBAAXC,OAAwB,OACnC,MAAMC,EAAchF,EAAIiB,QACpB+D,IACiBA,EAAYC,iBAAiB,YACrCC,QAAST,IAClBpF,EAAK8F,iBAAiBV,KAExBI,GAASO,EAAAA,EAAAA,IAAsBJ,MAGhCL,GAEInE,CACT,CFUgB6E,CAAwBtF,EAAkB,CAACD,IAEzD,OAAKA,GAWH/C,EAAAA,EAAAA,MAAA,WAASH,UAAWC,EAAaC,SAAA,EAC/BH,EAAAA,EAAAA,KAACiD,EAAiB,CAChBE,KAAMA,EACNC,iBAAkBA,EAClBnD,UAAWC,KAEbE,EAAAA,EAAAA,MAAC8G,EAAO,CAAA/G,SAAA,EACNH,EAAAA,EAAAA,KAAC4D,EAAc,CACbC,MAAOA,EACPC,WAAW6E,EAAAA,EAAAA,IAAuBxF,GAClCC,iBAAkBA,KAEpBpD,EAAAA,EAAAA,KAAC4G,EAAe,CACdC,SAAUA,EACVC,SAAUA,WAvBd9G,EAAAA,EAAAA,KAACQ,EAAAA,EAAK,CACJD,MAAM,UACNT,QAAS8I,EAAAA,GACT3I,UAAWC,K,cG/CnB,QAA8B,iC,cCmCvB,MAAM2I,EAAcA,KACzB,MAAM,KAAE7B,EAAO,GAAE,SAAEhG,EAAW,KAAO8H,EAAAA,EAAAA,MAE/B,eAAEC,EAAc,eAAEC,EAAc,QAAEC,EAAO,aAAEC,IAAiBC,EAAAA,EAAAA,KAE5DC,GAAOC,EAAAA,EAAAA,IAAiBrC,EAAMiC,GAE9BK,EAAe,IAAItC,KAAQhG,QAEjCS,EAAAA,EAAAA,WAAU,KACRsH,EAAeK,GACfJ,EAAeI,EAAKtE,GAAK,IACxB,CAACsE,IAEJ,MAAMG,GAAUC,EAAAA,EAAAA,SAAQ,IAAMN,EAAiB,OAAJE,QAAI,IAAJA,OAAI,EAAJA,EAAMtE,KAAO,GAAI,CAACoE,EAAkB,OAAJE,QAAI,IAAJA,OAAI,EAAJA,EAAMtE,KAEjF,GAAgB,IAAZsE,EAAKtE,GAAU,OAAO9E,EAAAA,EAAAA,KAACL,EAAAA,SAAQ,IAEnC,MAAM8J,GAAWJ,EAAAA,EAAAA,IAAiB,IAAIrC,KAAQhG,IAAYuI,GACpDG,GAAeC,EAAAA,EAAAA,IAAeF,EAAS3E,GAAK,EAAGyE,GAC/CK,GAAeD,EAAAA,EAAAA,IAAeF,EAAS3E,GAAK,EAAGyE,GAErD,OACEvJ,EAAAA,EAAAA,KAAA,OAAKC,UAAWC,EAAgBC,UAC9BH,EAAAA,EAAAA,KAACe,EAAAA,EAAY,CACXC,SAAUsI,EACVrI,cAAgBC,IACdlB,EAAAA,EAAAA,KAACmH,EAAI,CACHhE,KAAMjC,EACN2F,SAAU6C,EACV5C,SAAU8C,SAQtB,G","sources":["webpack://conspectus/./src/pages/NotFound/NotFound.module.scss?e4ba","pages/NotFound/NotFound.tsx","data/DataProvider.tsx","webpack://conspectus/./src/components/UI/Post/Post.module.scss?0404","utils/highlight.js","components/UI/Post/PostMarkdownBlock/PostMarkdownBlock.tsx","webpack://conspectus/./src/components/UI/PostNavigation/PostNavigation.module.scss?fa5b","components/UI/PostNavigation/PostNavigation.tsx","hooks/useActiveHeading.ts","webpack://conspectus/./src/components/UI/PrevNextButtons/PrevNextButtons.module.scss?1238","components/UI/PrevNextButtons/PrevButton/PrevButton.tsx","components/UI/PrevNextButtons/NextButton/NextButton.tsx","components/UI/PrevNextButtons/PrevNextButtons.tsx","webpack://conspectus/./src/components/layout/Sidebar/Sidebar.module.scss?5c45","components/layout/Sidebar/Sidebar.tsx","components/UI/Post/Post.tsx","hooks/useScrollToHash.ts","hooks/useHighlightAndHeadings.ts","webpack://conspectus/./src/pages/ContentPage/ContentPage.module.scss?75f7","pages/ContentPage/ContentPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"NotFound\":\"NotFound_NotFound__IPBs5\",\"NotFoundCard\":\"NotFound_NotFoundCard__g+rwP\",\"NotFoundAlert\":\"NotFound_NotFoundAlert__0Ir1f\"};","// Не убирать default экспорт! Используется для ленивого импорта, именованный нужен для автогенерации тестов\nimport React from 'react';\nimport { Alert, Text, Card, Link } from '@gravity-ui/uikit';\nimport { NOT_FOUND } from 'src/constants';\nimport cls from './NotFound.module.scss';\n\ninterface NotFoundProps {\n  errorMessage?: string;\n}\n\n/**\n * Компонент NotFound — универсальная страница ошибки 404 для приложения.\n *\n * Отображает предупреждение (Alert) с кодом и сообщением об ошибке (404 Not Found).\n * Может принимать свой текст ошибки через проп errorMessage, иначе использует константу NOT_FOUND.\n * Внизу отображает совет пользователю с ссылкой на главную страницу.\n *\n * @param {Object} props - Свойства компонента\n * @param {string} [props.errorMessage] - Текст сообщения об ошибке (по умолчанию из NOT_FOUND)\n * @returns {JSX.Element} Страница с предупреждением и подсказкой для пользователя\n */\nexport const NotFound = (props: NotFoundProps) => {\n  const { errorMessage } = props;\n  const message = errorMessage || NOT_FOUND;\n\n  return (\n    <div className={cls.NotFound}>\n      <Card\n        view=\"outlined\"\n        className={cls.NotFoundCard}\n        theme=\"warning\"\n      >\n        <Alert\n          theme=\"warning\"\n          title=\"Ошибка 404\"\n          message={message}\n          className={cls.NotFoundAlert}\n        />\n        <Text\n          variant=\"subheader-2\"\n          color=\"secondary\"\n        >\n          Попробуйте выбрать раздел из меню или вернуться на <Link href=\"/conspectus\">главную</Link>\n          .\n        </Text>\n      </Card>\n    </div>\n  );\n};\n\nexport default NotFound;\n","import React, { useEffect, useState } from 'react';\nimport { getFile } from './api';\n\nimport { Loader } from '@gravity-ui/uikit';\nimport NotFound from 'src/pages/NotFound/NotFound';\n\ninterface TypeDataProviderProps {\n  fileName: string;\n  renderContent: (data: string) => React.ReactNode;\n}\n\n/**\n * Универсальный компонент для асинхронной загрузки текстовых данных (обычно markdown-файла).\n *\n * Выполняет загрузку файла по имени (fileName) через getFile, отображает индикатор загрузки,\n * страницу ошибки (NotFound) при ошибке, или вызывает функцию renderContent с данными.\n * Используется как обертка над контентными компонентами (например, списки разделов, посты).\n *\n * @component\n * @param {object} props                          — Свойства компонента\n * @param {string} props.fileName                 — Путь к файлу, который нужно загрузить (например, '/js/js_base.md')\n * @param {(data: string) => React.ReactNode} props.renderContent — Функция-рендер для загруженных данных (получает содержимое файла)\n *\n * @example\n * <DataProvider\n *   fileName=\"/js/js_base.md\"\n *   renderContent={data => <Post post={data} />}\n * />\n *\n * @returns {JSX.Element} Состояния загрузки, ошибки, или результат рендера по данным\n */\nexport const DataProvider = (props: TypeDataProviderProps) => {\n  const { fileName, renderContent } = props;\n  const [data, setData] = useState('');\n  const [isLoading, setIsLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    let isMounted = true;\n    setIsLoading(true);\n    setError(null);\n\n    async function fetchData() {\n      try {\n        const text = await getFile(fileName);\n        if (isMounted) setData(text);\n      } catch (e) {\n        if (isMounted) setError(String(e));\n      } finally {\n        if (isMounted) setIsLoading(false);\n      }\n    }\n\n    fetchData();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [fileName]);\n\n  if (isLoading) {\n    return (\n      <div style={{ textAlign: 'center', padding: 24 }}>\n        <Loader size=\"l\" />\n      </div>\n    );\n  }\n\n  if (error) {\n    // если не прод, передаем текст ошибки\n    const isDev = process.env.NODE_ENV !== 'production';\n    return <NotFound errorMessage={isDev ? error : undefined} />;\n  }\n\n  return <>{renderContent(data)}</>;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Post\":\"Post_Post__2OxnI\",\"PostBlock\":\"Post_PostBlock__3pzc5\",\"PostBlockNav\":\"Post_PostBlockNav__MTmQs\",\"PostGrid\":\"Post_PostGrid__P+wi7\",\"PostAlert\":\"Post_PostAlert__hPyP3\"};","import hljs from 'highlight.js/lib/core';\nimport bash from 'highlight.js/lib/languages/bash';\nimport javascript from 'highlight.js/lib/languages/javascript';\nimport json from 'highlight.js/lib/languages/json';\nimport python from 'highlight.js/lib/languages/python';\nimport xml from 'highlight.js/lib/languages/xml';\n\n// Регистрируем необходимые языки (только один раз)\nhljs.registerLanguage('javascript', javascript);\nhljs.registerLanguage('xml', xml);\nhljs.registerLanguage('json', json);\nhljs.registerLanguage('bash', bash);\nhljs.registerLanguage('python', python);\n\nexport default hljs;\n","import React, { ForwardedRef } from 'react';\nimport Markdown from 'markdown-to-jsx';\nimport { Link } from '@gravity-ui/uikit';\n\ninterface PostMarkdownBlockProps {\n  post: string;\n  markdownBlockRef: ForwardedRef<HTMLDivElement>;\n  className?: string;\n}\n\n/**\n * Блок разметки markdown для статьи/поста.\n *\n * Рендерит содержимое markdown с поддержкой ссылок Gravity UI.\n * Внешний div можно кастомизировать через ref и className (например, для подсветки синтаксиса, якорей или скроллинга).\n *\n * @param {Object} props - Свойства компонента PostMarkdownBlock\n * @param {string} props.post - Текст поста/статьи в формате markdown.\n * @param {React.ForwardedRef<HTMLDivElement>} props.markdownBlockRef - Ref для внешнего блока (например, для скролла/подсветки).\n * @param {string} [props.className] - Дополнительные CSS-классы для внешнего блока.\n *\n * @returns {JSX.Element} Отформатированный markdown-блок, где все ссылки автоматически заменены на компонент Link Gravity UI.\n */\nexport const PostMarkdownBlock: React.FC<PostMarkdownBlockProps> = ({\n  post,\n  markdownBlockRef,\n  className,\n}) => (\n  <div\n    ref={markdownBlockRef}\n    className={className}\n  >\n    <Markdown\n      options={{\n        overrides: {\n          a: {\n            component: Link,\n            props: {\n              view: 'normal',\n              target: '_blank',\n            },\n          },\n        },\n      }}\n    >\n      {post}\n    </Markdown>\n  </div>\n);\n","// extracted by mini-css-extract-plugin\nexport default {\"PostNavigation\":\"PostNavigation_PostNavigation__vV0HX\"};","import React, { useState } from 'react';\nimport { Text } from '@gravity-ui/uikit';\nimport cls from './PostNavigation.module.scss';\n\nimport { useActiveHeading } from 'src/hooks/useActiveHeading';\nimport { HeadingInfo } from 'src/types/heading';\nimport { NavItem } from 'src/components/UI/NavItem/NavItem';\n\ninterface PostNavigationProps {\n  heads: HeadingInfo[];\n  pageTitle: string;\n  markdownBlockRef: React.RefObject<HTMLDivElement>;\n}\n\n/**\n * Компонент для боковой навигации по статье.\n * Показывает структуру заголовков (heads) и позволяет быстро переходить к нужному разделу.\n * Активный пункт подсвечивается по мере скролла или при клике.\n *\n * @param {Object} props - Свойства компонента\n * @param {HeadingInfo[]} props.heads - Список заголовков статьи (id, уровень, текст).\n * @param {string} props.pageTitle - Заголовок/название текущей страницы или статьи.\n * @param {React.RefObject<HTMLDivElement>} props.markdownBlockRef - Ref на основной блок статьи для отслеживания положения.\n *\n * @returns {JSX.Element|null} Навигация по заголовкам или null, если заголовков нет.\n */\nexport const PostNavigation = (props: PostNavigationProps) => {\n  const { heads, pageTitle, markdownBlockRef } = props;\n\n  const [selectedIndex, setSelectedIndex] = useState(-1);\n  const activeIndex = useActiveHeading(heads, markdownBlockRef, selectedIndex, setSelectedIndex);\n\n  if (!heads.some((h) => h.level > 1)) return null;\n\n  return (\n    <nav\n      className={cls.PostNavigation}\n      aria-label=\"Навигация по статье\"\n    >\n      <Text\n        variant=\"subheader-2\"\n        color={'info'}\n      >\n        {pageTitle}\n      </Text>\n\n      <ul>\n        {heads.map((head, index) =>\n          head.level > 1 ? (\n            <NavItem\n              key={head.id}\n              to={{ hash: `#${head.id}` }}\n              active={index === activeIndex}\n              style={{ paddingLeft: (head.level - 2) * 18 }}\n              onClick={() => setSelectedIndex(index)}\n            >\n              {head.text}\n            </NavItem>\n          ) : null\n        )}\n      </ul>\n    </nav>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { HeadingInfo } from 'src/types/heading';\n\n/**\n * Хук для определения и управления активным заголовком в структуре markdown-документа при скролле.\n *\n * Используется для подсветки текущего раздела в боковой навигации (например, Table of Contents).\n *\n * Основная логика:\n *   - Отслеживает прокрутку контейнера scrollRef\n *   - Находит ближайший к верху контейнера заголовок (heads)\n *   - Возвращает индекс активного заголовка, либо выбранный пользователем selectedIndex (если не -1)\n *   - При скролле сбрасывает selectedIndex в -1 (режим автоподсветки)\n *\n * @param {HeadingInfo[]} heads — Список заголовков (id, уровень, текст)\n * @param {React.RefObject<HTMLElement>} scrollRef — ref на элемент-контейнер с текстом\n * @param {number} selectedIndex — Индекс выбранного пользователем заголовка (-1 — автоподсветка)\n * @param {(idx: number) => void} setSelectedIndex — Setter для смены выбранного индекса\n *\n * @returns {number} Индекс активного (подсвеченного) заголовка\n *\n * @example\n * const activeIdx = useActiveHeading(heads, markdownRef, selectedIndex, setSelectedIndex);\n */\nexport const useActiveHeading = (\n  heads: HeadingInfo[],\n  scrollRef: React.RefObject<HTMLElement>,\n  selectedIndex: number,\n  setSelectedIndex: (idx: number) => void\n) => {\n  const [activeIndex, setActiveIndex] = useState(0);\n\n  useEffect(() => {\n    const container = scrollRef.current;\n    if (!container || !heads.length) return undefined;\n\n    const handleScroll = () => {\n      // На любом скролле — сбрасываем selectedIndex\n      setSelectedIndex(-1);\n\n      //Собираем позиции заголовков относительно контейнера\n      const offsets = heads.map((head) => {\n        const elem = container.querySelector(`#${head.id}`);\n        return elem\n          ? elem.getBoundingClientRect().top - container.getBoundingClientRect().top\n          : Infinity;\n      });\n\n      //  Находим максимальный заголовок, который не выше верха области (или близко к нему)\n      const threshold = 20; //  определяет \"насколько выше\" может быть активный раздел\n\n      let current = 0;\n      for (let i = 0; i < offsets.length; i++) {\n        if (offsets[i] - threshold <= 0) {\n          current = i;\n        }\n      }\n\n      // Если дошли до самого низа — всегда подсвечиваем последний пункт\n      if (Math.abs(container.scrollHeight - container.scrollTop - container.clientHeight) < 2) {\n        current = heads.length - 1;\n      }\n      setActiveIndex(current);\n    };\n\n    container.addEventListener('scroll', handleScroll, { passive: true });\n    handleScroll();\n\n    return () => {\n      container.removeEventListener('scroll', handleScroll);\n    };\n  }, [heads, scrollRef, selectedIndex, setSelectedIndex]);\n\n  return selectedIndex === -1 ? activeIndex : selectedIndex;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"navCard\":\"PrevNextButtons_navCard__Ql8th\",\"prevButton\":\"PrevNextButtons_prevButton__IvWbc\",\"nextButton\":\"PrevNextButtons_nextButton__ihtH1\"};","import React from 'react';\n\nimport { ArrowToggle, Button, Text } from '@gravity-ui/uikit';\n\nimport { Link } from 'react-router-dom';\n\ninterface PrevButtonProps {\n  postPath: string;\n  postName: string;\n  className: string;\n}\nexport const PrevButton = (props: PrevButtonProps) => {\n  const { postPath, postName, className } = props;\n  return (\n    <Link\n      to={postPath}\n      className={className}\n    >\n      <Button>\n        <ArrowToggle direction=\"left\" />\n      </Button>\n      <Text\n        variant=\"subheader-1\"\n        color=\"info\"\n      >\n        {postName}\n      </Text>\n    </Link>\n  );\n};\n","import React from 'react';\n\nimport { ArrowToggle, Button, Text } from '@gravity-ui/uikit';\n\nimport { Link } from 'react-router-dom';\n\ninterface NextButtonProps {\n  postPath: string;\n  postName: string;\n  className: string;\n}\nexport const NextButton = (props: NextButtonProps) => {\n  const { postPath, postName, className } = props;\n  return (\n    <Link\n      to={postPath}\n      className={className}\n    >\n      <Text\n        variant=\"subheader-1\"\n        color=\"info\"\n      >\n        {postName}\n      </Text>\n      <Button>\n        <ArrowToggle direction=\"right\" />\n      </Button>\n    </Link>\n  );\n};\n","import React from 'react';\nimport { Card } from '@gravity-ui/uikit';\nimport cls from './PrevNextButtons.module.scss';\nimport { TypeNavLink } from 'src/types/nav';\nimport { PrevButton } from './PrevButton/PrevButton';\nimport { NextButton } from './NextButton/NextButton';\n\ninterface PrevNextButtonsProps {\n  prevPost?: TypeNavLink;\n  nextPost?: TypeNavLink;\n}\n\nexport const PrevNextButtons = (props: PrevNextButtonsProps) => {\n  const { prevPost, nextPost } = props;\n\n  return (\n    <Card\n      type=\"container\"\n      theme=\"normal\"\n      className={cls.navCard}\n      view=\"clear\"\n    >\n      {prevPost && (\n        <PrevButton\n          postPath={prevPost.path}\n          postName={prevPost.name}\n          className={cls.prevButton}\n        />\n      )}\n      {nextPost && (\n        <NextButton\n          postPath={nextPost.path}\n          postName={nextPost.name}\n          className={cls.nextButton}\n        />\n      )}\n    </Card>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Sidebar\":\"Sidebar_Sidebar__DI9OI\"};","import React, { ReactNode } from 'react';\nimport cls from './Sidebar.module.scss';\n\ninterface SidebarProps {\n  children: ReactNode[];\n}\n\n/**\n * Боковая колонка страницы. Используется для навигации, дополнительного контента и т.п.\n *\n * @param {SidebarProps} props - Свойства компонента.\n * @param {ReactNode | ReactNode[]} props.children - Дочерние элементы (содержание сайдбара).\n *\n * @returns {JSX.Element} Боковая колонка (<aside>).\n */\nexport const Sidebar = ({ children }: SidebarProps) => {\n  return <aside className={cls.Sidebar}>{children} </aside>;\n};\n","import React, { useRef } from 'react';\nimport { Alert } from '@gravity-ui/uikit';\n\nimport 'highlight.js/scss/default.scss';\nimport cls from './Post.module.scss';\n\nimport { useHighlightAndHeadings } from 'src/hooks/useHighlightAndHeadings';\nimport { PostMarkdownBlock } from './PostMarkdownBlock/PostMarkdownBlock';\nimport { PostNavigation } from 'src/components/UI/PostNavigation/PostNavigation';\nimport { NO_CONTENT } from 'src/constants';\nimport { TypeNavLink } from 'src/types/nav';\nimport { PrevNextButtons } from '../PrevNextButtons/PrevNextButtons';\nimport { Sidebar } from 'src/components/layout/Sidebar/Sidebar';\nimport { parseTitleFromMarkdown } from 'src/utils/parsers';\nimport { useScrollToHash } from 'src/hooks/useScrollToHash';\n\n/**\n * Свойства для компонента Post.\n */\nexport interface TypePostProps {\n  post: string;\n  prevPost?: TypeNavLink;\n  nextPost?: TypeNavLink;\n}\n\n/**\n * Компонент для отображения markdown-поста с подсветкой синтаксиса, боковой навигацией и кнопками \"назад/вперёд\".\n *\n * @param props - Объект со следующими свойствами:\n *   - post: содержимое поста в формате markdown\n *   - prevPost: объект для навигации на предыдущий пост\n *   - nextPost: объект для навигации на следующий пост\n *\n * @returns {JSX.Element} Разметка поста, навигации и кнопок перехода.\n */\nexport const Post: React.FC<TypePostProps> = ({ post, prevPost, nextPost }) => {\n  const markdownBlockRef = useRef<HTMLDivElement>(null);\n\n  useScrollToHash(post);\n\n  // Используем кастомный хук для подсветки и сбора заголовков\n  const heads = useHighlightAndHeadings(markdownBlockRef, [post]);\n\n  if (!post) {\n    return (\n      <Alert\n        theme=\"warning\"\n        message={NO_CONTENT}\n        className={cls.PostAlert}\n      />\n    );\n  }\n\n  return (\n    <article className={cls.PostGrid}>\n      <PostMarkdownBlock\n        post={post}\n        markdownBlockRef={markdownBlockRef}\n        className={cls.PostBlock}\n      />\n      <Sidebar>\n        <PostNavigation\n          heads={heads}\n          pageTitle={parseTitleFromMarkdown(post)}\n          markdownBlockRef={markdownBlockRef}\n        />\n        <PrevNextButtons\n          prevPost={prevPost}\n          nextPost={nextPost}\n        />\n      </Sidebar>\n    </article>\n  );\n};\n","import { useEffect } from 'react';\nimport { useLocation } from 'react-router-dom';\n\n/**\n * Хук для автоматической прокрутки к заголовку по hash в URL.\n *\n * Используется для плавного скролла к нужному разделу после перехода по якорной ссылке в markdown или смене маршрута.\n *\n * Поведение:\n *   - После каждого изменения hash или содержимого post ищет элемент с id, равным hash (без #)\n *   - Если элемент найден — вызывает scrollIntoView с анимацией\n *   - Добавляет небольшую задержку, чтобы DOM успел отрисовать markdown и заголовки\n *\n * @param {string} post — Содержимое markdown (или другой зависимости, после которой появляются якоря)\n *\n * @example\n * useScrollToHash(post)\n */\nexport const useScrollToHash = (post: string) => {\n  const { hash } = useLocation();\n\n  useEffect(() => {\n    if (!hash) return;\n\n    // Даем время на рендер markdown\n    setTimeout(() => {\n      const id = decodeURIComponent(hash.replace('#', ''));\n\n      const el = document.getElementById(id);\n      if (el) {\n        el.scrollIntoView({ behavior: 'smooth', block: 'start' });\n      }\n    }, 100);\n  }, [hash, post]);\n};\n","import { useLayoutEffect, useState } from 'react';\nimport hljs from 'src/utils/highlight';\nimport { parseHeadingsFromHtml } from 'src/utils/parsers';\nimport { HeadingInfo } from 'src/types/heading';\n\n/**\n * Хук для подсветки кода и парсинга заголовков из markdown-блока.\n * @param ref - ref на DOM-элемент с контентом markdown.\n * @param deps - зависимости для эффекта (обычно post).\n * @returns Массив объектов заголовков (HeadingInfo[])\n */\nexport function useHighlightAndHeadings(\n  ref: React.RefObject<HTMLElement>,\n  deps: React.DependencyList = []\n): HeadingInfo[] {\n  const [heads, setHeads] = useState<HeadingInfo[]>([]);\n\n  useLayoutEffect(() => {\n    if (typeof window === 'undefined') return;\n    const postElement = ref.current;\n    if (postElement) {\n      const codeBlocks = postElement.querySelectorAll('pre code');\n      codeBlocks.forEach((block) => {\n        hljs.highlightElement(block as HTMLElement);\n      });\n      setHeads(parseHeadingsFromHtml(postElement));\n    }\n    // eslint-disable-next-line\n  }, deps);\n\n  return heads;\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"ContentPage\":\"ContentPage_ContentPage__kqsnq\"};","// Не убирать default экспорт! Используется для ленивого импорта, именованный нужен для автогенерации тестов\n\nimport React, { useEffect, useMemo } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useAppContext } from 'src/app/AppContext/AppContextProvider';\nimport { DataProvider } from 'src/data/DataProvider';\n\nimport { Post } from 'src/components/UI/Post/Post';\nimport { NotFound } from 'src/pages/NotFound/NotFound';\n\nimport cls from './ContentPage.module.scss';\nimport { getNavItemById, getNavItemByPath } from 'src/utils/helpers';\n\n/**\n * Страница контента (ContentPage) — отображает пост/конспект по URL, навигацию и обёртывает рендеринг в DataProvider.\n *\n * Основная страница просмотра содержимого. Находит нужный раздел (part) и пост по URL (использует useParams), определяет соседние посты для перехода (prev/next).\n * Использует DataProvider для загрузки и передачи markdown-данных компоненту Post.\n * Если страница/раздел не найдены, отображает NotFound.\n *\n * Логика:\n * - Получает параметры из URL: path (раздел), fileName (имя файла).\n * - Определяет текущий раздел (`part`) и обновляет контекст приложения.\n * - Находит навигацию внутри раздела (`partNav`), текущий пост и соседние посты.\n * - Если раздел не найден — рендерит <NotFound />.\n * - В остальных случаях оборачивает <Post /> в <DataProvider /> для загрузки и отображения содержимого.\n *\n * Использует:\n *   - useAppContext — глобальный контекст приложения (навигация, методы).\n *   - DataProvider — загрузка данных по имени файла.\n *   - Post — отображение markdown-контента и навигации по постам.\n *   - NotFound — страница 404.\n *\n * @returns {JSX.Element} Компонент страницы конспекта/поста, либо страницу NotFound.\n */\nexport const ContentPage = () => {\n  const { path = '', fileName = '' } = useParams<{ path?: string; fileName?: string }>();\n\n  const { setCurrentPart, setShowPartNav, siteNav, partNavArray } = useAppContext();\n\n  const part = getNavItemByPath(path, siteNav);\n\n  const fileFullName = `/${path}/${fileName}.md`;\n\n  useEffect(() => {\n    setCurrentPart(part);\n    setShowPartNav(part.id > 0);\n  }, [part]);\n\n  const partNav = useMemo(() => partNavArray[part?.id] || [], [partNavArray, part?.id]);\n\n  if (part.id === 0) return <NotFound />;\n\n  const postItem = getNavItemByPath(`/${path}/${fileName}`, partNav);\n  const prevPostItem = getNavItemById(postItem.id - 1, partNav);\n  const nextPostItem = getNavItemById(postItem.id + 1, partNav);\n\n  return (\n    <div className={cls.ContentPage}>\n      <DataProvider\n        fileName={fileFullName}\n        renderContent={(data) => (\n          <Post\n            post={data}\n            prevPost={prevPostItem}\n            nextPost={nextPostItem}\n          />\n        )}\n      />\n    </div>\n  );\n};\n\nexport default ContentPage;\n"],"names":["NotFound","props","errorMessage","message","NOT_FOUND","_jsx","className","cls","children","_jsxs","Card","view","theme","Alert","title","Text","variant","color","Link","href","DataProvider","fileName","renderContent","data","setData","useState","isLoading","setIsLoading","error","setError","useEffect","isMounted","async","text","getFile","e","String","fetchData","style","textAlign","padding","Loader","size","isDev","process","undefined","_Fragment","hljs","registerLanguage","javascript","xml","json","bash","python","PostMarkdownBlock","_ref","post","markdownBlockRef","ref","Markdown","options","overrides","a","component","target","PostNavigation","heads","pageTitle","selectedIndex","setSelectedIndex","activeIndex","useActiveHeading","scrollRef","setActiveIndex","container","current","length","handleScroll","offsets","map","head","elem","querySelector","id","getBoundingClientRect","top","Infinity","i","Math","abs","scrollHeight","scrollTop","clientHeight","addEventListener","passive","removeEventListener","some","h","level","index","NavItem","to","hash","active","paddingLeft","onClick","PrevButton","postPath","postName","Button","ArrowToggle","direction","NextButton","PrevNextButtons","prevPost","nextPost","type","path","name","Sidebar","Post","useRef","useLocation","setTimeout","decodeURIComponent","replace","el","document","getElementById","scrollIntoView","behavior","block","useScrollToHash","deps","arguments","setHeads","useLayoutEffect","window","postElement","querySelectorAll","forEach","highlightElement","parseHeadingsFromHtml","useHighlightAndHeadings","parseTitleFromMarkdown","NO_CONTENT","ContentPage","useParams","setCurrentPart","setShowPartNav","siteNav","partNavArray","useAppContext","part","getNavItemByPath","fileFullName","partNav","useMemo","postItem","prevPostItem","getNavItemById","nextPostItem"],"sourceRoot":""}