{"version":3,"file":"static/js/3869.a583438d.chunk.js","mappings":"uGASA,SAASA,EAAKC,GACZ,MAAMC,EAAQD,EAAKC,MACbC,EAAM,CAAC,EACPC,EAAa,CACjBC,MAAO,OACPC,IAAK,KACLC,SAAU,CACR,OACA,CACEF,MAAO,KACPE,SAAU,CAAEJ,MAIlBK,OAAOC,OAAON,EAAK,CACjBO,UAAW,WACXC,SAAU,CACR,CAAEN,MAAOH,EAAMU,OAAO,qBAGpB,wBACFR,KAIJ,MAAMS,EAAQ,CACZH,UAAW,QACXL,MAAO,OACPC,IAAK,KACLC,SAAU,CAAEN,EAAKa,mBAEbC,EAAUd,EAAKe,QACnBf,EAAKc,UACL,CACEE,MAAO,CACL,SACA,QAEFC,MAAO,CACL,EAAG,aAIHC,EAAW,CACfd,MAAO,iBACPe,OAAQ,CAAEb,SAAU,CAClBN,EAAKoB,kBAAkB,CACrBhB,MAAO,QACPC,IAAK,QACLI,UAAW,cAIXY,EAAe,CACnBZ,UAAW,SACXL,MAAO,IACPC,IAAK,IACLC,SAAU,CACRN,EAAKa,iBACLX,EACAU,IAGJA,EAAMN,SAASgB,KAAKD,GACpB,MAWME,EAAa,CACjBnB,MAAO,UACPC,IAAK,OACLC,SAAU,CACR,CACEF,MAAO,gBACPK,UAAW,UAEbT,EAAKwB,YACLtB,IAcEuB,EAAgBzB,EAAK0B,QAAQ,CACjCC,OAAQ,IAZa,CACrB,OACA,OACA,MACA,KACA,MACA,MACA,OACA,OACA,QAG2BC,KAAK,QAChCC,UAAW,KAEPC,EAAW,CACfrB,UAAW,WACXL,MAAO,4BACP2B,aAAa,EACbzB,SAAU,CAAEN,EAAKe,QAAQf,EAAKgC,WAAY,CAAE5B,MAAO,gBACnDyB,UAAW,GA+Pb,MAAO,CACLI,KAAM,OACNC,QAAS,CACP,KACA,OAEFC,SAAU,CACRC,SAAU,wBACVC,QApQa,CACf,KACA,OACA,OACA,OACA,KACA,OACA,MACA,QACA,QACA,KACA,KACA,OACA,OACA,OACA,SACA,WACA,UAoPEC,QAjPa,CACf,OACA,SAgPEC,SAAU,CAxOZ,QACA,KACA,WACA,OACA,OACA,OACA,SACA,UACA,OACA,MACA,WACA,SACA,QACA,OACA,QACA,OACA,QACA,QAIA,QACA,OACA,UACA,SACA,UACA,UACA,OACA,SACA,OACA,MACA,QACA,SACA,UACA,SACA,OACA,YACA,SACA,OACA,OACA,UACA,SACA,UAkMI,MACA,QA/LJ,WACA,KACA,UACA,MACA,MACA,QACA,QACA,gBACA,WACA,UACA,eACA,YACA,aACA,YACA,WACA,UACA,aACA,OACA,UACA,SACA,SACA,SACA,UACA,KACA,KACA,QACA,YACA,SACA,QACA,UACA,UACA,OACA,OACA,QACA,MACA,SACA,OACA,QACA,QACA,SACA,SACA,QACA,SACA,SACA,OACA,UACA,SACA,aACA,SACA,UACA,WACA,QACA,OACA,SACA,QACA,QACA,WACA,UACA,OACA,MACA,WACA,aACA,QACA,OACA,cACA,UACA,SACA,OAIA,QACA,QACA,QACA,QACA,KACA,KACA,KACA,MACA,YACA,KACA,KACA,QACA,SACA,QACA,SACA,KACA,WACA,KACA,QACA,QACA,OACA,QACA,WACA,OACA,QACA,SACA,SACA,MACA,QACA,OACA,SACA,MACA,SACA,MACA,OACA,OACA,OACA,SACA,KACA,SACA,KACA,QACA,MACA,KACA,UACA,YACA,YACA,YACA,YACA,OACA,OACA,QACA,MACA,MACA,OACA,KACA,QACA,WACA,OACA,KACA,OACA,WACA,SACA,OACA,UACA,KACA,OACA,MACA,OACA,SAEA,SACA,SACA,KACA,OACA,UACA,OACA,QACA,QACA,UACA,QACA,WACA,SACA,MACA,WACA,SACA,MACA,QACA,OACA,SACA,OACA,MACA,OACA,UAEA,MACA,QACA,SACA,SACA,QACA,MACA,SACA,QAuBAjC,SAAU,CACRmB,EACAzB,EAAK0B,UACLI,EACAP,EACAT,EACAI,EA5Pc,CAAEF,MAAO,kBA8PvBK,EAtUkB,CACpBL,MAAO,OAEW,CAClBP,UAAW,SACXL,MAAO,IACPC,IAAK,KAEc,CACnBW,MAAO,OAiULd,GAGN,C,8CC9YA,SAASsC,EAAIxC,GACX,MAAMC,EAAQD,EAAKC,MAQbwC,EAA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,GAEpB,OAAIf,GAAUnH,OAEVsG,EAAA,WACGmB,GACDnB,EAAA,UAAQyC,IAAI,UACT5B,GAAU/E,IAAI,SAAwBa,GACrC,OACEqD,EAAA,OAAKqH,GAAI1J,EAAKhB,EAAIoK,WAAY7D,IAAUT,IAAK9F,EAAIoK,YAC9CpK,EAAIoK,WACJ9F,GAAQD,GAAOrE,EAAImK,SAAU,CAAE5E,QAAA,KAGtC,KAMDf,EACT,UAWIvE,IAAA,IAACoH,SAAEnC,EAAW,GAAEyG,QAAE7L,GAAmBG,EAAPI,EAAA,SAAAL,EAAAC,GAAA,SAAAD,EAAA,aAAAiF,EAAAC,EAAApF,EAAA,GAAAO,EAAAhI,OAAAmT,KAAAxL,GAAA,IAAAkF,EAAA,EAAAA,EAAA7E,EAAAtD,OAAAmI,IAAAjF,EAAAvC,QAAAuH,EAAA5E,EAAA6E,KAAA,IAAApF,EAAAmF,GAAAjF,EAAAiF,IAAA,OAAAnF,CAAA,EAAKG,EAAAgF,GAQrC,OAAOjF,EAAAA,aACL4I,GAAS1D,EAAUpF,GACnBO,EAAsC,C,+CC7mE1C,Q,iDCIA,SAASuL,EAAO9T,GACd,MAAMC,EAAQD,EAAKC,MACbkE,EAAW,qCACX4P,EAAiB,CACrB,MACA,KACA,SACA,QACA,QACA,QACA,OACA,QACA,WACA,MACA,MACA,OACA,OACA,SACA,UACA,MACA,OACA,SACA,KACA,SACA,KACA,KACA,SACA,QACA,cACA,MACA,KACA,OACA,QACA,SACA,MACA,QACA,OACA,SAuGI3P,EAAW,CACfhC,SAAU,sBACVC,QAAS0R,EACTxR,SAvGgB,CAChB,aACA,MACA,MACA,MACA,QACA,MACA,OACA,aACA,YACA,QACA,WACA,MACA,cACA,UACA,UACA,UACA,OACA,MACA,SACA,YACA,OACA,OACA,SACA,QACA,SACA,YACA,UACA,UACA,UACA,OACA,OACA,MACA,KACA,QACA,MACA,aACA,aACA,OACA,MACA,OACA,SACA,MACA,MACA,aACA,MACA,OACA,SACA,MACA,OACA,MACA,MACA,QACA,WACA,QACA,OACA,WACA,QACA,MACA,UACA,QACA,SACA,eACA,MA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","sources":["../node_modules/.pnpm/highlight.js@11.11.1/node_modules/highlight.js/es/languages/bash.js","../node_modules/.pnpm/highlight.js@11.11.1/node_modules/highlight.js/es/languages/xml.js","../node_modules/.pnpm/highlight.js@11.11.1/node_modules/highlight.js/es/languages/json.js","../node_modules/.pnpm/highlight.js@11.11.1/node_modules/highlight.js/es/languages/javascript.js","../node_modules/.pnpm/markdown-to-jsx@7.7.12_react@18.3.1/node_modules/markdown-to-jsx/index.tsx","../node_modules/.pnpm/highlight.js@11.11.1/node_modules/highlight.js/es/core.js","../node_modules/.pnpm/highlight.js@11.11.1/node_modules/highlight.js/es/languages/python.js","../node_modules/.pnpm/highlight.js@11.11.1/node_modules/highlight.js/lib/core.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/layout/constants.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/layout/utils/index.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/layout/spacing/spacing.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/layout/contexts/LayoutContext.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/layout/Flex/Flex.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/layout/hooks/useLayoutContext.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertContext.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/Alert/useAlertContext.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertAction.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/Alert/constants.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertContextProvider.js","../node_modules/.pnpm/@gravity-ui+icons@2.15.0_react@18.3.1/node_modules/@gravity-ui/icons/esm/CircleCheckFill.js","../node_modules/.pnpm/@gravity-ui+icons@2.15.0_react@18.3.1/node_modules/@gravity-ui/icons/esm/CircleCheck.js","../node_modules/.pnpm/@gravity-ui+icons@2.15.0_react@18.3.1/node_modules/@gravity-ui/icons/esm/ThunderboltFill.js","../node_modules/.pnpm/@gravity-ui+icons@2.15.0_react@18.3.1/node_modules/@gravity-ui/icons/esm/Thunderbolt.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertIcon.js","../node_modules/.pnpm/@gravity-ui+icons@2.15.0_react@18.3.1/node_modules/@gravity-ui/icons/esm/CircleXmarkFill.js","../node_modules/.pnpm/@gravity-ui+icons@2.15.0_react@18.3.1/node_modules/@gravity-ui/icons/esm/CircleXmark.js","../node_modules/.pnpm/@gravity-ui+icons@2.15.0_react@18.3.1/node_modules/@gravity-ui/icons/esm/CircleInfoFill.js","../node_modules/.pnpm/@gravity-ui+icons@2.15.0_react@18.3.1/node_modules/@gravity-ui/icons/esm/CircleInfo.js","../node_modules/.pnpm/@gravity-ui+icons@2.15.0_react@18.3.1/node_modules/@gravity-ui/icons/esm/TriangleExclamationFill.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertTitle.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/Alert/Alert.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/Alert/AlertActions.js","../node_modules/.pnpm/@gravity-ui+uikit@5.31.2_re_0f540a9a408e6fcd653a4a6f924e37c9/node_modules/@gravity-ui/uikit/build/esm/components/Card/Card.js"],"sourcesContent":["/*\nLanguage: Bash\nAuthor: vah <vahtenberg@gmail.com>\nContributrors: Benjamin Pannell <contact@sierrasoftworks.com>\nWebsite: https://www.gnu.org/software/bash/\nCategory: common, scripting\n*/\n\n/** @type LanguageFn */\nfunction bash(hljs) {\n  const regex = hljs.regex;\n  const VAR = {};\n  const BRACED_VAR = {\n    begin: /\\$\\{/,\n    end: /\\}/,\n    contains: [\n      \"self\",\n      {\n        begin: /:-/,\n        contains: [ VAR ]\n      } // default values\n    ]\n  };\n  Object.assign(VAR, {\n    className: 'variable',\n    variants: [\n      { begin: regex.concat(/\\$[\\w\\d#@][\\w\\d_]*/,\n        // negative look-ahead tries to avoid matching patterns that are not\n        // Perl at all like $ident$, @ident@, etc.\n        `(?![\\\\w\\\\d])(?![$])`) },\n      BRACED_VAR\n    ]\n  });\n\n  const SUBST = {\n    className: 'subst',\n    begin: /\\$\\(/,\n    end: /\\)/,\n    contains: [ hljs.BACKSLASH_ESCAPE ]\n  };\n  const COMMENT = hljs.inherit(\n    hljs.COMMENT(),\n    {\n      match: [\n        /(^|\\s)/,\n        /#.*$/\n      ],\n      scope: {\n        2: 'comment'\n      }\n    }\n  );\n  const HERE_DOC = {\n    begin: /<<-?\\s*(?=\\w+)/,\n    starts: { contains: [\n      hljs.END_SAME_AS_BEGIN({\n        begin: /(\\w+)/,\n        end: /(\\w+)/,\n        className: 'string'\n      })\n    ] }\n  };\n  const QUOTE_STRING = {\n    className: 'string',\n    begin: /\"/,\n    end: /\"/,\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      VAR,\n      SUBST\n    ]\n  };\n  SUBST.contains.push(QUOTE_STRING);\n  const ESCAPED_QUOTE = {\n    match: /\\\\\"/\n  };\n  const APOS_STRING = {\n    className: 'string',\n    begin: /'/,\n    end: /'/\n  };\n  const ESCAPED_APOS = {\n    match: /\\\\'/\n  };\n  const ARITHMETIC = {\n    begin: /\\$?\\(\\(/,\n    end: /\\)\\)/,\n    contains: [\n      {\n        begin: /\\d+#[0-9a-f]+/,\n        className: \"number\"\n      },\n      hljs.NUMBER_MODE,\n      VAR\n    ]\n  };\n  const SH_LIKE_SHELLS = [\n    \"fish\",\n    \"bash\",\n    \"zsh\",\n    \"sh\",\n    \"csh\",\n    \"ksh\",\n    \"tcsh\",\n    \"dash\",\n    \"scsh\",\n  ];\n  const KNOWN_SHEBANG = hljs.SHEBANG({\n    binary: `(${SH_LIKE_SHELLS.join(\"|\")})`,\n    relevance: 10\n  });\n  const FUNCTION = {\n    className: 'function',\n    begin: /\\w[\\w\\d_]*\\s*\\(\\s*\\)\\s*\\{/,\n    returnBegin: true,\n    contains: [ hljs.inherit(hljs.TITLE_MODE, { begin: /\\w[\\w\\d_]*/ }) ],\n    relevance: 0\n  };\n\n  const KEYWORDS = [\n    \"if\",\n    \"then\",\n    \"else\",\n    \"elif\",\n    \"fi\",\n    \"time\",\n    \"for\",\n    \"while\",\n    \"until\",\n    \"in\",\n    \"do\",\n    \"done\",\n    \"case\",\n    \"esac\",\n    \"coproc\",\n    \"function\",\n    \"select\"\n  ];\n\n  const LITERALS = [\n    \"true\",\n    \"false\"\n  ];\n\n  // to consume paths to prevent keyword matches inside them\n  const PATH_MODE = { match: /(\\/[a-z._-]+)+/ };\n\n  // http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html\n  const SHELL_BUILT_INS = [\n    \"break\",\n    \"cd\",\n    \"continue\",\n    \"eval\",\n    \"exec\",\n    \"exit\",\n    \"export\",\n    \"getopts\",\n    \"hash\",\n    \"pwd\",\n    \"readonly\",\n    \"return\",\n    \"shift\",\n    \"test\",\n    \"times\",\n    \"trap\",\n    \"umask\",\n    \"unset\"\n  ];\n\n  const BASH_BUILT_INS = [\n    \"alias\",\n    \"bind\",\n    \"builtin\",\n    \"caller\",\n    \"command\",\n    \"declare\",\n    \"echo\",\n    \"enable\",\n    \"help\",\n    \"let\",\n    \"local\",\n    \"logout\",\n    \"mapfile\",\n    \"printf\",\n    \"read\",\n    \"readarray\",\n    \"source\",\n    \"sudo\",\n    \"type\",\n    \"typeset\",\n    \"ulimit\",\n    \"unalias\"\n  ];\n\n  const ZSH_BUILT_INS = [\n    \"autoload\",\n    \"bg\",\n    \"bindkey\",\n    \"bye\",\n    \"cap\",\n    \"chdir\",\n    \"clone\",\n    \"comparguments\",\n    \"compcall\",\n    \"compctl\",\n    \"compdescribe\",\n    \"compfiles\",\n    \"compgroups\",\n    \"compquote\",\n    \"comptags\",\n    \"comptry\",\n    \"compvalues\",\n    \"dirs\",\n    \"disable\",\n    \"disown\",\n    \"echotc\",\n    \"echoti\",\n    \"emulate\",\n    \"fc\",\n    \"fg\",\n    \"float\",\n    \"functions\",\n    \"getcap\",\n    \"getln\",\n    \"history\",\n    \"integer\",\n    \"jobs\",\n    \"kill\",\n    \"limit\",\n    \"log\",\n    \"noglob\",\n    \"popd\",\n    \"print\",\n    \"pushd\",\n    \"pushln\",\n    \"rehash\",\n    \"sched\",\n    \"setcap\",\n    \"setopt\",\n    \"stat\",\n    \"suspend\",\n    \"ttyctl\",\n    \"unfunction\",\n    \"unhash\",\n    \"unlimit\",\n    \"unsetopt\",\n    \"vared\",\n    \"wait\",\n    \"whence\",\n    \"where\",\n    \"which\",\n    \"zcompile\",\n    \"zformat\",\n    \"zftp\",\n    \"zle\",\n    \"zmodload\",\n    \"zparseopts\",\n    \"zprof\",\n    \"zpty\",\n    \"zregexparse\",\n    \"zsocket\",\n    \"zstyle\",\n    \"ztcp\"\n  ];\n\n  const GNU_CORE_UTILS = [\n    \"chcon\",\n    \"chgrp\",\n    \"chown\",\n    \"chmod\",\n    \"cp\",\n    \"dd\",\n    \"df\",\n    \"dir\",\n    \"dircolors\",\n    \"ln\",\n    \"ls\",\n    \"mkdir\",\n    \"mkfifo\",\n    \"mknod\",\n    \"mktemp\",\n    \"mv\",\n    \"realpath\",\n    \"rm\",\n    \"rmdir\",\n    \"shred\",\n    \"sync\",\n    \"touch\",\n    \"truncate\",\n    \"vdir\",\n    \"b2sum\",\n    \"base32\",\n    \"base64\",\n    \"cat\",\n    \"cksum\",\n    \"comm\",\n    \"csplit\",\n    \"cut\",\n    \"expand\",\n    \"fmt\",\n    \"fold\",\n    \"head\",\n    \"join\",\n    \"md5sum\",\n    \"nl\",\n    \"numfmt\",\n    \"od\",\n    \"paste\",\n    \"ptx\",\n    \"pr\",\n    \"sha1sum\",\n    \"sha224sum\",\n    \"sha256sum\",\n    \"sha384sum\",\n    \"sha512sum\",\n    \"shuf\",\n    \"sort\",\n    \"split\",\n    \"sum\",\n    \"tac\",\n    \"tail\",\n    \"tr\",\n    \"tsort\",\n    \"unexpand\",\n    \"uniq\",\n    \"wc\",\n    \"arch\",\n    \"basename\",\n    \"chroot\",\n    \"date\",\n    \"dirname\",\n    \"du\",\n    \"echo\",\n    \"env\",\n    \"expr\",\n    \"factor\",\n    // \"false\", // keyword literal already\n    \"groups\",\n    \"hostid\",\n    \"id\",\n    \"link\",\n    \"logname\",\n    \"nice\",\n    \"nohup\",\n    \"nproc\",\n    \"pathchk\",\n    \"pinky\",\n    \"printenv\",\n    \"printf\",\n    \"pwd\",\n    \"readlink\",\n    \"runcon\",\n    \"seq\",\n    \"sleep\",\n    \"stat\",\n    \"stdbuf\",\n    \"stty\",\n    \"tee\",\n    \"test\",\n    \"timeout\",\n    // \"true\", // keyword literal already\n    \"tty\",\n    \"uname\",\n    \"unlink\",\n    \"uptime\",\n    \"users\",\n    \"who\",\n    \"whoami\",\n    \"yes\"\n  ];\n\n  return {\n    name: 'Bash',\n    aliases: [\n      'sh',\n      'zsh'\n    ],\n    keywords: {\n      $pattern: /\\b[a-z][a-z0-9._-]+\\b/,\n      keyword: KEYWORDS,\n      literal: LITERALS,\n      built_in: [\n        ...SHELL_BUILT_INS,\n        ...BASH_BUILT_INS,\n        // Shell modifiers\n        \"set\",\n        \"shopt\",\n        ...ZSH_BUILT_INS,\n        ...GNU_CORE_UTILS\n      ]\n    },\n    contains: [\n      KNOWN_SHEBANG, // to catch known shells and boost relevancy\n      hljs.SHEBANG(), // to catch unknown shells but still highlight the shebang\n      FUNCTION,\n      ARITHMETIC,\n      COMMENT,\n      HERE_DOC,\n      PATH_MODE,\n      QUOTE_STRING,\n      ESCAPED_QUOTE,\n      APOS_STRING,\n      ESCAPED_APOS,\n      VAR\n    ]\n  };\n}\n\nexport { bash as default };\n","/*\nLanguage: HTML, XML\nWebsite: https://www.w3.org/XML/\nCategory: common, web\nAudit: 2020\n*/\n\n/** @type LanguageFn */\nfunction xml(hljs) {\n  const regex = hljs.regex;\n  // XML names can have the following additional letters: https://www.w3.org/TR/xml/#NT-NameChar\n  // OTHER_NAME_CHARS = /[:\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]/;\n  // Element names start with NAME_START_CHAR followed by optional other Unicode letters, ASCII digits, hyphens, underscores, and periods\n  // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/, regex.optional(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*:/), /[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*/);;\n  // const XML_IDENT_RE = /[A-Z_a-z:\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]+/;\n  // const TAG_NAME_RE = regex.concat(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD]/, regex.optional(/[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*:/), /[A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040]*/);\n  // however, to cater for performance and more Unicode support rely simply on the Unicode letter class\n  const TAG_NAME_RE = regex.concat(/[\\p{L}_]/u, regex.optional(/[\\p{L}0-9_.-]*:/u), /[\\p{L}0-9_.-]*/u);\n  const XML_IDENT_RE = /[\\p{L}0-9._:-]+/u;\n  const XML_ENTITIES = {\n    className: 'symbol',\n    begin: /&[a-z]+;|&#[0-9]+;|&#x[a-f0-9]+;/\n  };\n  const XML_META_KEYWORDS = {\n    begin: /\\s/,\n    contains: [\n      {\n        className: 'keyword',\n        begin: /#?[a-z_][a-z1-9_-]+/,\n        illegal: /\\n/\n      }\n    ]\n  };\n  const XML_META_PAR_KEYWORDS = hljs.inherit(XML_META_KEYWORDS, {\n    begin: /\\(/,\n    end: /\\)/\n  });\n  const APOS_META_STRING_MODE = hljs.inherit(hljs.APOS_STRING_MODE, { className: 'string' });\n  const QUOTE_META_STRING_MODE = hljs.inherit(hljs.QUOTE_STRING_MODE, { className: 'string' });\n  const TAG_INTERNALS = {\n    endsWithParent: true,\n    illegal: /</,\n    relevance: 0,\n    contains: [\n      {\n        className: 'attr',\n        begin: XML_IDENT_RE,\n        relevance: 0\n      },\n      {\n        begin: /=\\s*/,\n        relevance: 0,\n        contains: [\n          {\n            className: 'string',\n            endsParent: true,\n            variants: [\n              {\n                begin: /\"/,\n                end: /\"/,\n                contains: [ XML_ENTITIES ]\n              },\n              {\n                begin: /'/,\n                end: /'/,\n                contains: [ XML_ENTITIES ]\n              },\n              { begin: /[^\\s\"'=<>`]+/ }\n            ]\n          }\n        ]\n      }\n    ]\n  };\n  return {\n    name: 'HTML, XML',\n    aliases: [\n      'html',\n      'xhtml',\n      'rss',\n      'atom',\n      'xjb',\n      'xsd',\n      'xsl',\n      'plist',\n      'wsf',\n      'svg'\n    ],\n    case_insensitive: true,\n    unicodeRegex: true,\n    contains: [\n      {\n        className: 'meta',\n        begin: /<![a-z]/,\n        end: />/,\n        relevance: 10,\n        contains: [\n          XML_META_KEYWORDS,\n          QUOTE_META_STRING_MODE,\n          APOS_META_STRING_MODE,\n          XML_META_PAR_KEYWORDS,\n          {\n            begin: /\\[/,\n            end: /\\]/,\n            contains: [\n              {\n                className: 'meta',\n                begin: /<![a-z]/,\n                end: />/,\n                contains: [\n                  XML_META_KEYWORDS,\n                  XML_META_PAR_KEYWORDS,\n                  QUOTE_META_STRING_MODE,\n                  APOS_META_STRING_MODE\n                ]\n              }\n            ]\n          }\n        ]\n      },\n      hljs.COMMENT(\n        /<!--/,\n        /-->/,\n        { relevance: 10 }\n      ),\n      {\n        begin: /<!\\[CDATA\\[/,\n        end: /\\]\\]>/,\n        relevance: 10\n      },\n      XML_ENTITIES,\n      // xml processing instructions\n      {\n        className: 'meta',\n        end: /\\?>/,\n        variants: [\n          {\n            begin: /<\\?xml/,\n            relevance: 10,\n            contains: [\n              QUOTE_META_STRING_MODE\n            ]\n          },\n          {\n            begin: /<\\?[a-z][a-z0-9]+/,\n          }\n        ]\n\n      },\n      {\n        className: 'tag',\n        /*\n        The lookahead pattern (?=...) ensures that 'begin' only matches\n        '<style' as a single word, followed by a whitespace or an\n        ending bracket.\n        */\n        begin: /<style(?=\\s|>)/,\n        end: />/,\n        keywords: { name: 'style' },\n        contains: [ TAG_INTERNALS ],\n        starts: {\n          end: /<\\/style>/,\n          returnEnd: true,\n          subLanguage: [\n            'css',\n            'xml'\n          ]\n        }\n      },\n      {\n        className: 'tag',\n        // See the comment in the <style tag about the lookahead pattern\n        begin: /<script(?=\\s|>)/,\n        end: />/,\n        keywords: { name: 'script' },\n        contains: [ TAG_INTERNALS ],\n        starts: {\n          end: /<\\/script>/,\n          returnEnd: true,\n          subLanguage: [\n            'javascript',\n            'handlebars',\n            'xml'\n          ]\n        }\n      },\n      // we need this for now for jSX\n      {\n        className: 'tag',\n        begin: /<>|<\\/>/\n      },\n      // open tag\n      {\n        className: 'tag',\n        begin: regex.concat(\n          /</,\n          regex.lookahead(regex.concat(\n            TAG_NAME_RE,\n            // <tag/>\n            // <tag>\n            // <tag ...\n            regex.either(/\\/>/, />/, /\\s/)\n          ))\n        ),\n        end: /\\/?>/,\n        contains: [\n          {\n            className: 'name',\n            begin: TAG_NAME_RE,\n            relevance: 0,\n            starts: TAG_INTERNALS\n          }\n        ]\n      },\n      // close tag\n      {\n        className: 'tag',\n        begin: regex.concat(\n          /<\\//,\n          regex.lookahead(regex.concat(\n            TAG_NAME_RE, />/\n          ))\n        ),\n        contains: [\n          {\n            className: 'name',\n            begin: TAG_NAME_RE,\n            relevance: 0\n          },\n          {\n            begin: />/,\n            relevance: 0,\n            endsParent: true\n          }\n        ]\n      }\n    ]\n  };\n}\n\nexport { xml as default };\n","/*\nLanguage: JSON\nDescription: JSON (JavaScript Object Notation) is a lightweight data-interchange format.\nAuthor: Ivan Sagalaev <maniac@softwaremaniacs.org>\nWebsite: http://www.json.org\nCategory: common, protocols, web\n*/\n\nfunction json(hljs) {\n  const ATTRIBUTE = {\n    className: 'attr',\n    begin: /\"(\\\\.|[^\\\\\"\\r\\n])*\"(?=\\s*:)/,\n    relevance: 1.01\n  };\n  const PUNCTUATION = {\n    match: /[{}[\\],:]/,\n    className: \"punctuation\",\n    relevance: 0\n  };\n  const LITERALS = [\n    \"true\",\n    \"false\",\n    \"null\"\n  ];\n  // NOTE: normally we would rely on `keywords` for this but using a mode here allows us\n  // - to use the very tight `illegal: \\S` rule later to flag any other character\n  // - as illegal indicating that despite looking like JSON we do not truly have\n  // - JSON and thus improve false-positively greatly since JSON will try and claim\n  // - all sorts of JSON looking stuff\n  const LITERALS_MODE = {\n    scope: \"literal\",\n    beginKeywords: LITERALS.join(\" \"),\n  };\n\n  return {\n    name: 'JSON',\n    aliases: ['jsonc'],\n    keywords:{\n      literal: LITERALS,\n    },\n    contains: [\n      ATTRIBUTE,\n      PUNCTUATION,\n      hljs.QUOTE_STRING_MODE,\n      LITERALS_MODE,\n      hljs.C_NUMBER_MODE,\n      hljs.C_LINE_COMMENT_MODE,\n      hljs.C_BLOCK_COMMENT_MODE\n    ],\n    illegal: '\\\\S'\n  };\n}\n\nexport { json as default };\n","const IDENT_RE = '[A-Za-z$_][0-9A-Za-z$_]*';\nconst KEYWORDS = [\n  \"as\", // for exports\n  \"in\",\n  \"of\",\n  \"if\",\n  \"for\",\n  \"while\",\n  \"finally\",\n  \"var\",\n  \"new\",\n  \"function\",\n  \"do\",\n  \"return\",\n  \"void\",\n  \"else\",\n  \"break\",\n  \"catch\",\n  \"instanceof\",\n  \"with\",\n  \"throw\",\n  \"case\",\n  \"default\",\n  \"try\",\n  \"switch\",\n  \"continue\",\n  \"typeof\",\n  \"delete\",\n  \"let\",\n  \"yield\",\n  \"const\",\n  \"class\",\n  // JS handles these with a special rule\n  // \"get\",\n  // \"set\",\n  \"debugger\",\n  \"async\",\n  \"await\",\n  \"static\",\n  \"import\",\n  \"from\",\n  \"export\",\n  \"extends\",\n  // It's reached stage 3, which is \"recommended for implementation\":\n  \"using\"\n];\nconst LITERALS = [\n  \"true\",\n  \"false\",\n  \"null\",\n  \"undefined\",\n  \"NaN\",\n  \"Infinity\"\n];\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects\nconst TYPES = [\n  // Fundamental objects\n  \"Object\",\n  \"Function\",\n  \"Boolean\",\n  \"Symbol\",\n  // numbers and dates\n  \"Math\",\n  \"Date\",\n  \"Number\",\n  \"BigInt\",\n  // text\n  \"String\",\n  \"RegExp\",\n  // Indexed collections\n  \"Array\",\n  \"Float32Array\",\n  \"Float64Array\",\n  \"Int8Array\",\n  \"Uint8Array\",\n  \"Uint8ClampedArray\",\n  \"Int16Array\",\n  \"Int32Array\",\n  \"Uint16Array\",\n  \"Uint32Array\",\n  \"BigInt64Array\",\n  \"BigUint64Array\",\n  // Keyed collections\n  \"Set\",\n  \"Map\",\n  \"WeakSet\",\n  \"WeakMap\",\n  // Structured data\n  \"ArrayBuffer\",\n  \"SharedArrayBuffer\",\n  \"Atomics\",\n  \"DataView\",\n  \"JSON\",\n  // Control abstraction objects\n  \"Promise\",\n  \"Generator\",\n  \"GeneratorFunction\",\n  \"AsyncFunction\",\n  // Reflection\n  \"Reflect\",\n  \"Proxy\",\n  // Internationalization\n  \"Intl\",\n  // WebAssembly\n  \"WebAssembly\"\n];\n\nconst ERROR_TYPES = [\n  \"Error\",\n  \"EvalError\",\n  \"InternalError\",\n  \"RangeError\",\n  \"ReferenceError\",\n  \"SyntaxError\",\n  \"TypeError\",\n  \"URIError\"\n];\n\nconst BUILT_IN_GLOBALS = [\n  \"setInterval\",\n  \"setTimeout\",\n  \"clearInterval\",\n  \"clearTimeout\",\n\n  \"require\",\n  \"exports\",\n\n  \"eval\",\n  \"isFinite\",\n  \"isNaN\",\n  \"parseFloat\",\n  \"parseInt\",\n  \"decodeURI\",\n  \"decodeURIComponent\",\n  \"encodeURI\",\n  \"encodeURIComponent\",\n  \"escape\",\n  \"unescape\"\n];\n\nconst BUILT_IN_VARIABLES = [\n  \"arguments\",\n  \"this\",\n  \"super\",\n  \"console\",\n  \"window\",\n  \"document\",\n  \"localStorage\",\n  \"sessionStorage\",\n  \"module\",\n  \"global\" // Node.js\n];\n\nconst BUILT_INS = [].concat(\n  BUILT_IN_GLOBALS,\n  TYPES,\n  ERROR_TYPES\n);\n\n/*\nLanguage: JavaScript\nDescription: JavaScript (JS) is a lightweight, interpreted, or just-in-time compiled programming language with first-class functions.\nCategory: common, scripting, web\nWebsite: https://developer.mozilla.org/en-US/docs/Web/JavaScript\n*/\n\n\n/** @type LanguageFn */\nfunction javascript(hljs) {\n  const regex = hljs.regex;\n  /**\n   * Takes a string like \"<Booger\" and checks to see\n   * if we can find a matching \"</Booger\" later in the\n   * content.\n   * @param {RegExpMatchArray} match\n   * @param {{after:number}} param1\n   */\n  const hasClosingTag = (match, { after }) => {\n    const tag = \"</\" + match[0].slice(1);\n    const pos = match.input.indexOf(tag, after);\n    return pos !== -1;\n  };\n\n  const IDENT_RE$1 = IDENT_RE;\n  const FRAGMENT = {\n    begin: '<>',\n    end: '</>'\n  };\n  // to avoid some special cases inside isTrulyOpeningTag\n  const XML_SELF_CLOSING = /<[A-Za-z0-9\\\\._:-]+\\s*\\/>/;\n  const XML_TAG = {\n    begin: /<[A-Za-z0-9\\\\._:-]+/,\n    end: /\\/[A-Za-z0-9\\\\._:-]+>|\\/>/,\n    /**\n     * @param {RegExpMatchArray} match\n     * @param {CallbackResponse} response\n     */\n    isTrulyOpeningTag: (match, response) => {\n      const afterMatchIndex = match[0].length + match.index;\n      const nextChar = match.input[afterMatchIndex];\n      if (\n        // HTML should not include another raw `<` inside a tag\n        // nested type?\n        // `<Array<Array<number>>`, etc.\n        nextChar === \"<\" ||\n        // the , gives away that this is not HTML\n        // `<T, A extends keyof T, V>`\n        nextChar === \",\"\n        ) {\n        response.ignoreMatch();\n        return;\n      }\n\n      // `<something>`\n      // Quite possibly a tag, lets look for a matching closing tag...\n      if (nextChar === \">\") {\n        // if we cannot find a matching closing tag, then we\n        // will ignore it\n        if (!hasClosingTag(match, { after: afterMatchIndex })) {\n          response.ignoreMatch();\n        }\n      }\n\n      // `<blah />` (self-closing)\n      // handled by simpleSelfClosing rule\n\n      let m;\n      const afterMatch = match.input.substring(afterMatchIndex);\n\n      // some more template typing stuff\n      //  <T = any>(key?: string) => Modify<\n      if ((m = afterMatch.match(/^\\s*=/))) {\n        response.ignoreMatch();\n        return;\n      }\n\n      // `<From extends string>`\n      // technically this could be HTML, but it smells like a type\n      // NOTE: This is ugh, but added specifically for https://github.com/highlightjs/highlight.js/issues/3276\n      if ((m = afterMatch.match(/^\\s+extends\\s+/))) {\n        if (m.index === 0) {\n          response.ignoreMatch();\n          // eslint-disable-next-line no-useless-return\n          return;\n        }\n      }\n    }\n  };\n  const KEYWORDS$1 = {\n    $pattern: IDENT_RE,\n    keyword: KEYWORDS,\n    literal: LITERALS,\n    built_in: BUILT_INS,\n    \"variable.language\": BUILT_IN_VARIABLES\n  };\n\n  // https://tc39.es/ecma262/#sec-literals-numeric-literals\n  const decimalDigits = '[0-9](_?[0-9])*';\n  const frac = `\\\\.(${decimalDigits})`;\n  // DecimalIntegerLiteral, including Annex B NonOctalDecimalIntegerLiteral\n  // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n  const decimalInteger = `0|[1-9](_?[0-9])*|0[0-7]*[89][0-9]*`;\n  const NUMBER = {\n    className: 'number',\n    variants: [\n      // DecimalLiteral\n      { begin: `(\\\\b(${decimalInteger})((${frac})|\\\\.)?|(${frac}))` +\n        `[eE][+-]?(${decimalDigits})\\\\b` },\n      { begin: `\\\\b(${decimalInteger})\\\\b((${frac})\\\\b|\\\\.)?|(${frac})\\\\b` },\n\n      // DecimalBigIntegerLiteral\n      { begin: `\\\\b(0|[1-9](_?[0-9])*)n\\\\b` },\n\n      // NonDecimalIntegerLiteral\n      { begin: \"\\\\b0[xX][0-9a-fA-F](_?[0-9a-fA-F])*n?\\\\b\" },\n      { begin: \"\\\\b0[bB][0-1](_?[0-1])*n?\\\\b\" },\n      { begin: \"\\\\b0[oO][0-7](_?[0-7])*n?\\\\b\" },\n\n      // LegacyOctalIntegerLiteral (does not include underscore separators)\n      // https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals\n      { begin: \"\\\\b0[0-7]+n?\\\\b\" },\n    ],\n    relevance: 0\n  };\n\n  const SUBST = {\n    className: 'subst',\n    begin: '\\\\$\\\\{',\n    end: '\\\\}',\n    keywords: KEYWORDS$1,\n    contains: [] // defined later\n  };\n  const HTML_TEMPLATE = {\n    begin: '\\.?html`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST\n      ],\n      subLanguage: 'xml'\n    }\n  };\n  const CSS_TEMPLATE = {\n    begin: '\\.?css`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST\n      ],\n      subLanguage: 'css'\n    }\n  };\n  const GRAPHQL_TEMPLATE = {\n    begin: '\\.?gql`',\n    end: '',\n    starts: {\n      end: '`',\n      returnEnd: false,\n      contains: [\n        hljs.BACKSLASH_ESCAPE,\n        SUBST\n      ],\n      subLanguage: 'graphql'\n    }\n  };\n  const TEMPLATE_STRING = {\n    className: 'string',\n    begin: '`',\n    end: '`',\n    contains: [\n      hljs.BACKSLASH_ESCAPE,\n      SUBST\n    ]\n  };\n  const JSDOC_COMMENT = hljs.COMMENT(\n    /\\/\\*\\*(?!\\/)/,\n    '\\\\*/',\n    {\n      relevance: 0,\n      contains: [\n        {\n          begin: '(?=@[A-Za-z]+)',\n          relevance: 0,\n          contains: [\n            {\n              className: 'doctag',\n              begin: '@[A-Za-z]+'\n            },\n            {\n              className: 'type',\n              begin: '\\\\{',\n              end: '\\\\}',\n              excludeEnd: true,\n              excludeBegin: true,\n              relevance: 0\n            },\n            {\n              className: 'variable',\n              begin: IDENT_RE$1 + '(?=\\\\s*(-)|$)',\n              endsParent: true,\n              relevance: 0\n            },\n            // eat spaces (not newlines) so we can find\n            // types or variables\n            {\n              begin: /(?=[^\\n])\\s/,\n              relevance: 0\n            }\n          ]\n        }\n      ]\n    }\n  );\n  const COMMENT = {\n    className: \"comment\",\n    variants: [\n      JSDOC_COMMENT,\n      hljs.C_BLOCK_COMMENT_MODE,\n      hljs.C_LINE_COMMENT_MODE\n    ]\n  };\n  const SUBST_INTERNALS = [\n    hljs.APOS_STRING_MODE,\n    hljs.QUOTE_STRING_MODE,\n    HTML_TEMPLATE,\n    CSS_TEMPLATE,\n    GRAPHQL_TEMPLATE,\n    TEMPLATE_STRING,\n    // Skip numbers when they are part of a variable name\n    { match: /\\$\\d+/ },\n    NUMBER,\n    // This is intentional:\n    // See https://github.com/highlightjs/highlight.js/issues/3288\n    // hljs.REGEXP_MODE\n  ];\n  SUBST.contains = SUBST_INTERNALS\n    .concat({\n      // we need to pair up {} inside our subst to prevent\n      // it from ending too early by matching another }\n      begin: /\\{/,\n      end: /\\}/,\n      keywords: KEYWORDS$1,\n      contains: [\n        \"self\"\n      ].concat(SUBST_INTERNALS)\n    });\n  const SUBST_AND_COMMENTS = [].concat(COMMENT, SUBST.contains);\n  const PARAMS_CONTAINS = SUBST_AND_COMMENTS.concat([\n    // eat recursive parens in sub expressions\n    {\n      begin: /(\\s*)\\(/,\n      end: /\\)/,\n      keywords: KEYWORDS$1,\n      contains: [\"self\"].concat(SUBST_AND_COMMENTS)\n    }\n  ]);\n  const PARAMS = {\n    className: 'params',\n    // convert this to negative lookbehind in v12\n    begin: /(\\s*)\\(/, // to match the parms with\n    end: /\\)/,\n    excludeBegin: true,\n    excludeEnd: true,\n    keywords: KEYWORDS$1,\n    contains: PARAMS_CONTAINS\n  };\n\n  // ES6 classes\n  const CLASS_OR_EXTENDS = {\n    variants: [\n      // class Car extends vehicle\n      {\n        match: [\n          /class/,\n          /\\s+/,\n          IDENT_RE$1,\n          /\\s+/,\n          /extends/,\n          /\\s+/,\n          regex.concat(IDENT_RE$1, \"(\", regex.concat(/\\./, IDENT_RE$1), \")*\")\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.class\",\n          5: \"keyword\",\n          7: \"title.class.inherited\"\n        }\n      },\n      // class Car\n      {\n        match: [\n          /class/,\n          /\\s+/,\n          IDENT_RE$1\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.class\"\n        }\n      },\n\n    ]\n  };\n\n  const CLASS_REFERENCE = {\n    relevance: 0,\n    match:\n    regex.either(\n      // Hard coded exceptions\n      /\\bJSON/,\n      // Float32Array, OutT\n      /\\b[A-Z][a-z]+([A-Z][a-z]*|\\d)*/,\n      // CSSFactory, CSSFactoryT\n      /\\b[A-Z]{2,}([A-Z][a-z]+|\\d)+([A-Z][a-z]*)*/,\n      // FPs, FPsT\n      /\\b[A-Z]{2,}[a-z]+([A-Z][a-z]+|\\d)*([A-Z][a-z]*)*/,\n      // P\n      // single letters are not highlighted\n      // BLAH\n      // this will be flagged as a UPPER_CASE_CONSTANT instead\n    ),\n    className: \"title.class\",\n    keywords: {\n      _: [\n        // se we still get relevance credit for JS library classes\n        ...TYPES,\n        ...ERROR_TYPES\n      ]\n    }\n  };\n\n  const USE_STRICT = {\n    label: \"use_strict\",\n    className: 'meta',\n    relevance: 10,\n    begin: /^\\s*['\"]use (strict|asm)['\"]/\n  };\n\n  const FUNCTION_DEFINITION = {\n    variants: [\n      {\n        match: [\n          /function/,\n          /\\s+/,\n          IDENT_RE$1,\n          /(?=\\s*\\()/\n        ]\n      },\n      // anonymous function\n      {\n        match: [\n          /function/,\n          /\\s*(?=\\()/\n        ]\n      }\n    ],\n    className: {\n      1: \"keyword\",\n      3: \"title.function\"\n    },\n    label: \"func.def\",\n    contains: [ PARAMS ],\n    illegal: /%/\n  };\n\n  const UPPER_CASE_CONSTANT = {\n    relevance: 0,\n    match: /\\b[A-Z][A-Z_0-9]+\\b/,\n    className: \"variable.constant\"\n  };\n\n  function noneOf(list) {\n    return regex.concat(\"(?!\", list.join(\"|\"), \")\");\n  }\n\n  const FUNCTION_CALL = {\n    match: regex.concat(\n      /\\b/,\n      noneOf([\n        ...BUILT_IN_GLOBALS,\n        \"super\",\n        \"import\"\n      ].map(x => `${x}\\\\s*\\\\(`)),\n      IDENT_RE$1, regex.lookahead(/\\s*\\(/)),\n    className: \"title.function\",\n    relevance: 0\n  };\n\n  const PROPERTY_ACCESS = {\n    begin: regex.concat(/\\./, regex.lookahead(\n      regex.concat(IDENT_RE$1, /(?![0-9A-Za-z$_(])/)\n    )),\n    end: IDENT_RE$1,\n    excludeBegin: true,\n    keywords: \"prototype\",\n    className: \"property\",\n    relevance: 0\n  };\n\n  const GETTER_OR_SETTER = {\n    match: [\n      /get|set/,\n      /\\s+/,\n      IDENT_RE$1,\n      /(?=\\()/\n    ],\n    className: {\n      1: \"keyword\",\n      3: \"title.function\"\n    },\n    contains: [\n      { // eat to avoid empty params\n        begin: /\\(\\)/\n      },\n      PARAMS\n    ]\n  };\n\n  const FUNC_LEAD_IN_RE = '(\\\\(' +\n    '[^()]*(\\\\(' +\n    '[^()]*(\\\\(' +\n    '[^()]*' +\n    '\\\\)[^()]*)*' +\n    '\\\\)[^()]*)*' +\n    '\\\\)|' + hljs.UNDERSCORE_IDENT_RE + ')\\\\s*=>';\n\n  const FUNCTION_VARIABLE = {\n    match: [\n      /const|var|let/, /\\s+/,\n      IDENT_RE$1, /\\s*/,\n      /=\\s*/,\n      /(async\\s*)?/, // async is optional\n      regex.lookahead(FUNC_LEAD_IN_RE)\n    ],\n    keywords: \"async\",\n    className: {\n      1: \"keyword\",\n      3: \"title.function\"\n    },\n    contains: [\n      PARAMS\n    ]\n  };\n\n  return {\n    name: 'JavaScript',\n    aliases: ['js', 'jsx', 'mjs', 'cjs'],\n    keywords: KEYWORDS$1,\n    // this will be extended by TypeScript\n    exports: { PARAMS_CONTAINS, CLASS_REFERENCE },\n    illegal: /#(?![$_A-z])/,\n    contains: [\n      hljs.SHEBANG({\n        label: \"shebang\",\n        binary: \"node\",\n        relevance: 5\n      }),\n      USE_STRICT,\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE,\n      HTML_TEMPLATE,\n      CSS_TEMPLATE,\n      GRAPHQL_TEMPLATE,\n      TEMPLATE_STRING,\n      COMMENT,\n      // Skip numbers when they are part of a variable name\n      { match: /\\$\\d+/ },\n      NUMBER,\n      CLASS_REFERENCE,\n      {\n        scope: 'attr',\n        match: IDENT_RE$1 + regex.lookahead(':'),\n        relevance: 0\n      },\n      FUNCTION_VARIABLE,\n      { // \"value\" container\n        begin: '(' + hljs.RE_STARTERS_RE + '|\\\\b(case|return|throw)\\\\b)\\\\s*',\n        keywords: 'return throw case',\n        relevance: 0,\n        contains: [\n          COMMENT,\n          hljs.REGEXP_MODE,\n          {\n            className: 'function',\n            // we have to count the parens to make sure we actually have the\n            // correct bounding ( ) before the =>.  There could be any number of\n            // sub-expressions inside also surrounded by parens.\n            begin: FUNC_LEAD_IN_RE,\n            returnBegin: true,\n            end: '\\\\s*=>',\n            contains: [\n              {\n                className: 'params',\n                variants: [\n                  {\n                    begin: hljs.UNDERSCORE_IDENT_RE,\n                    relevance: 0\n                  },\n                  {\n                    className: null,\n                    begin: /\\(\\s*\\)/,\n                    skip: true\n                  },\n                  {\n                    begin: /(\\s*)\\(/,\n                    end: /\\)/,\n                    excludeBegin: true,\n                    excludeEnd: true,\n                    keywords: KEYWORDS$1,\n                    contains: PARAMS_CONTAINS\n                  }\n                ]\n              }\n            ]\n          },\n          { // could be a comma delimited list of params to a function call\n            begin: /,/,\n            relevance: 0\n          },\n          {\n            match: /\\s+/,\n            relevance: 0\n          },\n          { // JSX\n            variants: [\n              { begin: FRAGMENT.begin, end: FRAGMENT.end },\n              { match: XML_SELF_CLOSING },\n              {\n                begin: XML_TAG.begin,\n                // we carefully check the opening tag to see if it truly\n                // is a tag and not a false positive\n                'on:begin': XML_TAG.isTrulyOpeningTag,\n                end: XML_TAG.end\n              }\n            ],\n            subLanguage: 'xml',\n            contains: [\n              {\n                begin: XML_TAG.begin,\n                end: XML_TAG.end,\n                skip: true,\n                contains: ['self']\n              }\n            ]\n          }\n        ],\n      },\n      FUNCTION_DEFINITION,\n      {\n        // prevent this from getting swallowed up by function\n        // since they appear \"function like\"\n        beginKeywords: \"while if switch catch for\"\n      },\n      {\n        // we have to count the parens to make sure we actually have the correct\n        // bounding ( ).  There could be any number of sub-expressions inside\n        // also surrounded by parens.\n        begin: '\\\\b(?!function)' + hljs.UNDERSCORE_IDENT_RE +\n          '\\\\(' + // first parens\n          '[^()]*(\\\\(' +\n            '[^()]*(\\\\(' +\n              '[^()]*' +\n            '\\\\)[^()]*)*' +\n          '\\\\)[^()]*)*' +\n          '\\\\)\\\\s*\\\\{', // end parens\n        returnBegin:true,\n        label: \"func.def\",\n        contains: [\n          PARAMS,\n          hljs.inherit(hljs.TITLE_MODE, { begin: IDENT_RE$1, className: \"title.function\" })\n        ]\n      },\n      // catch ... so it won't trigger the property rule below\n      {\n        match: /\\.\\.\\./,\n        relevance: 0\n      },\n      PROPERTY_ACCESS,\n      // hack: prevents detection of keywords in some circumstances\n      // .keyword()\n      // $keyword = x\n      {\n        match: '\\\\$' + IDENT_RE$1,\n        relevance: 0\n      },\n      {\n        match: [ /\\bconstructor(?=\\s*\\()/ ],\n        className: { 1: \"title.function\" },\n        contains: [ PARAMS ]\n      },\n      FUNCTION_CALL,\n      UPPER_CASE_CONSTANT,\n      CLASS_OR_EXTENDS,\n      GETTER_OR_SETTER,\n      {\n        match: /\\$[(.]/ // relevance booster for a pattern common to JS libs: `$(something)` and `$.something`\n      }\n    ]\n  };\n}\n\nexport { javascript as default };\n","/* @jsx h */\n/**\n * markdown-to-jsx is a fork of\n * [simple-markdown v0.2.2](https://github.com/Khan/simple-markdown)\n * from Khan Academy. Thank you Khan devs for making such an awesome\n * and extensible parsing infra... without it, half of the\n * optimizations here wouldn't be feasible. 🙏🏼\n */\nimport * as React from 'react'\n\n/**\n * Analogous to `node.type`. Please note that the values here may change at any time,\n * so do not hard code against the value directly.\n */\nexport const RuleType = {\n  blockQuote: '0',\n  breakLine: '1',\n  breakThematic: '2',\n  codeBlock: '3',\n  codeFenced: '4',\n  codeInline: '5',\n  footnote: '6',\n  footnoteReference: '7',\n  gfmTask: '8',\n  heading: '9',\n  headingSetext: '10',\n  /** only available if not `disableHTMLParsing` */\n  htmlBlock: '11',\n  htmlComment: '12',\n  /** only available if not `disableHTMLParsing` */\n  htmlSelfClosing: '13',\n  image: '14',\n  link: '15',\n  /** emits a `link` 'node', does not render directly */\n  linkAngleBraceStyleDetector: '16',\n  /** emits a `link` 'node', does not render directly */\n  linkBareUrlDetector: '17',\n  /** emits a `link` 'node', does not render directly */\n  linkMailtoDetector: '18',\n  newlineCoalescer: '19',\n  orderedList: '20',\n  paragraph: '21',\n  ref: '22',\n  refImage: '23',\n  refLink: '24',\n  table: '25',\n  tableSeparator: '26',\n  text: '27',\n  textBolded: '28',\n  textEmphasized: '29',\n  textEscaped: '30',\n  textMarked: '31',\n  textStrikethroughed: '32',\n  unorderedList: '33',\n} as const\n\nif (process.env.NODE_ENV === 'test') {\n  Object.keys(RuleType).forEach(key => (RuleType[key] = key))\n}\n\nexport type RuleType = (typeof RuleType)[keyof typeof RuleType]\n\nconst Priority = {\n  /**\n   * anything that must scan the tree before everything else\n   */\n  MAX: 0,\n  /**\n   * scans for block-level constructs\n   */\n  HIGH: 1,\n  /**\n   * inline w/ more priority than other inline\n   */\n  MED: 2,\n  /**\n   * inline elements\n   */\n  LOW: 3,\n  /**\n   * bare text and stuff that is considered leftovers\n   */\n  MIN: 4,\n}\n\n/** TODO: Drop for React 16? */\nconst ATTRIBUTE_TO_JSX_PROP_MAP = [\n  'allowFullScreen',\n  'allowTransparency',\n  'autoComplete',\n  'autoFocus',\n  'autoPlay',\n  'cellPadding',\n  'cellSpacing',\n  'charSet',\n  'classId',\n  'colSpan',\n  'contentEditable',\n  'contextMenu',\n  'crossOrigin',\n  'encType',\n  'formAction',\n  'formEncType',\n  'formMethod',\n  'formNoValidate',\n  'formTarget',\n  'frameBorder',\n  'hrefLang',\n  'inputMode',\n  'keyParams',\n  'keyType',\n  'marginHeight',\n  'marginWidth',\n  'maxLength',\n  'mediaGroup',\n  'minLength',\n  'noValidate',\n  'radioGroup',\n  'readOnly',\n  'rowSpan',\n  'spellCheck',\n  'srcDoc',\n  'srcLang',\n  'srcSet',\n  'tabIndex',\n  'useMap',\n].reduce(\n  (obj, x) => {\n    obj[x.toLowerCase()] = x\n    return obj\n  },\n  { class: 'className', for: 'htmlFor' }\n)\n\nconst namedCodesToUnicode = {\n  amp: '\\u0026',\n  apos: '\\u0027',\n  gt: '\\u003e',\n  lt: '\\u003c',\n  nbsp: '\\u00a0',\n  quot: '\\u201c',\n} as const\n\nconst DO_NOT_PROCESS_HTML_ELEMENTS = ['style', 'script', 'pre']\nconst ATTRIBUTES_TO_SANITIZE = [\n  'src',\n  'href',\n  'data',\n  'formAction',\n  'srcDoc',\n  'action',\n]\n\n/**\n * the attribute extractor regex looks for a valid attribute name,\n * followed by an equal sign (whitespace around the equal sign is allowed), followed\n * by one of the following:\n *\n * 1. a single quote-bounded string, e.g. 'foo'\n * 2. a double quote-bounded string, e.g. \"bar\"\n * 3. an interpolation, e.g. {something}\n *\n * JSX can be be interpolated into itself and is passed through the compiler using\n * the same options and setup as the current run.\n *\n * <Something children={<SomeOtherThing />} />\n *                      ==================\n *                              ↳ children: [<SomeOtherThing />]\n *\n * Otherwise, interpolations are handled as strings or simple booleans\n * unless HTML syntax is detected.\n *\n * <Something color={green} disabled={true} />\n *                   =====            ====\n *                     ↓                ↳ disabled: true\n *                     ↳ color: \"green\"\n *\n * Numbers are not parsed at this time due to complexities around int, float,\n * and the upcoming bigint functionality that would make handling it unwieldy.\n * Parse the string in your component as desired.\n *\n * <Something someBigNumber={123456789123456789} />\n *                           ==================\n *                                   ↳ someBigNumber: \"123456789123456789\"\n */\nconst ATTR_EXTRACTOR_R =\n  /([-A-Z0-9_:]+)(?:\\s*=\\s*(?:(?:\"((?:\\\\.|[^\"])*)\")|(?:'((?:\\\\.|[^'])*)')|(?:\\{((?:\\\\.|{[^}]*?}|[^}])*)\\})))?/gi\n\n/** TODO: Write explainers for each of these */\n\nconst AUTOLINK_MAILTO_CHECK_R = /mailto:/i\nconst BLOCK_END_R = /\\n{2,}$/\nconst BLOCKQUOTE_R = /^(\\s*>[\\s\\S]*?)(?=\\n\\n|$)/\nconst BLOCKQUOTE_TRIM_LEFT_MULTILINE_R = /^ *> ?/gm\nconst BLOCKQUOTE_ALERT_R = /^(?:\\[!([^\\]]*)\\]\\n)?([\\s\\S]*)/\nconst BREAK_LINE_R = /^ {2,}\\n/\nconst BREAK_THEMATIC_R = /^(?:( *[-*_])){3,} *(?:\\n *)+\\n/\nconst CODE_BLOCK_FENCED_R =\n  /^(?: {1,3})?(`{3,}|~{3,}) *(\\S+)? *([^\\n]*?)?\\n([\\s\\S]*?)(?:\\1\\n?|$)/\nconst CODE_BLOCK_R = /^(?: {4}[^\\n]+\\n*)+(?:\\n *)+\\n?/\nconst CODE_INLINE_R = /^(`+)((?:\\\\`|(?!\\1)`|[^`])+)\\1/\nconst CONSECUTIVE_NEWLINE_R = /^(?:\\n *)*\\n/\nconst CR_NEWLINE_R = /\\r\\n?/g\n\n/**\n * Matches footnotes on the format:\n *\n * [^key]: value\n *\n * Matches multiline footnotes\n *\n * [^key]: row\n * row\n * row\n *\n * And empty lines in indented multiline footnotes\n *\n * [^key]: indented with\n *     row\n *\n *     row\n *\n * Explanation:\n *\n * 1. Look for the starting tag, eg: [^key]\n *    ^\\[\\^([^\\]]+)]\n *\n * 2. The first line starts with a colon, and continues for the rest of the line\n *   :(.*)\n *\n * 3. Parse as many additional lines as possible. Matches new non-empty lines that doesn't begin with a new footnote definition.\n *    (\\n(?!\\[\\^).+)\n *\n * 4. ...or allows for repeated newlines if the next line begins with at least four whitespaces.\n *    (\\n+ {4,}.*)\n */\nconst FOOTNOTE_R = /^\\[\\^([^\\]]+)](:(.*)((\\n+ {4,}.*)|(\\n(?!\\[\\^).+))*)/\n\nconst FOOTNOTE_REFERENCE_R = /^\\[\\^([^\\]]+)]/\nconst FORMFEED_R = /\\f/g\nconst FRONT_MATTER_R = /^---[ \\t]*\\n(.|\\n)*\\n---[ \\t]*\\n/\nconst GFM_TASK_R = /^\\s*?\\[(x|\\s)\\]/\nconst HEADING_R = /^ *(#{1,6}) *([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_ATX_COMPLIANT_R =\n  /^ *(#{1,6}) +([^\\n]+?)(?: +#*)?(?:\\n *)*(?:\\n|$)/\nconst HEADING_SETEXT_R = /^([^\\n]+)\\n *(=|-){3,} *\\n/\n\n/**\n * Explanation:\n *\n * 1. Look for a starting tag, preceded by any amount of spaces\n *    ^ *<\n *\n * 2. Capture the tag name (capture 1)\n *    ([^ >/]+)\n *\n * 3. Ignore a space after the starting tag and capture the attribute portion of the tag (capture 2)\n *     ?([^>]*)>\n *\n * 4. Ensure a matching closing tag is present in the rest of the input string\n *    (?=[\\s\\S]*<\\/\\1>)\n *\n * 5. Capture everything until the matching closing tag -- this might include additional pairs\n *    of the same tag type found in step 2 (capture 3)\n *    ((?:[\\s\\S]*?(?:<\\1[^>]*>[\\s\\S]*?<\\/\\1>)*[\\s\\S]*?)*?)<\\/\\1>\n *\n * 6. Capture excess newlines afterward\n *    \\n*\n */\nconst HTML_BLOCK_ELEMENT_R =\n  /^ *(?!<[a-z][^ >/]* ?\\/>)<([a-z][^ >/]*) ?((?:[^>]*[^/])?)>\\n?(\\s*(?:<\\1[^>]*?>[\\s\\S]*?<\\/\\1>|(?!<\\1\\b)[\\s\\S])*?)<\\/\\1>(?!<\\/\\1>)\\n*/i\n\nconst HTML_CHAR_CODE_R = /&([a-z0-9]+|#[0-9]{1,6}|#x[0-9a-fA-F]{1,6});/gi\n\nconst HTML_COMMENT_R = /^<!--[\\s\\S]*?(?:-->)/\n\n/**\n * borrowed from React 15(https://github.com/facebook/react/blob/894d20744cba99383ffd847dbd5b6e0800355a5c/src/renderers/dom/shared/HTMLDOMPropertyConfig.js)\n */\nconst HTML_CUSTOM_ATTR_R = /^(data|aria|x)-[a-z_][a-z\\d_.-]*$/\n\nconst HTML_SELF_CLOSING_ELEMENT_R =\n  /^ *<([a-z][a-z0-9:]*)(?:\\s+((?:<.*?>|[^>])*))?\\/?>(?!<\\/\\1>)(\\s*\\n)?/i\nconst INTERPOLATION_R = /^\\{.*\\}$/\nconst LINK_AUTOLINK_BARE_URL_R = /^(https?:\\/\\/[^\\s<]+[^<.,:;\"')\\]\\s])/\nconst LINK_AUTOLINK_MAILTO_R = /^<([^ >]+@[^ >]+)>/\nconst LINK_AUTOLINK_R = /^<([^ >]+:\\/[^ >]+)>/\nconst CAPTURE_LETTER_AFTER_HYPHEN = /-([a-z])?/gi\nconst NP_TABLE_R = /^(\\|.*)\\n(?: *(\\|? *[-:]+ *\\|[-| :]*)\\n((?:.*\\|.*\\n)*))?\\n?/\nconst PARAGRAPH_R = /^[^\\n]+(?:  \\n|\\n{2,})/\nconst REFERENCE_IMAGE_OR_LINK = /^\\[([^\\]]*)\\]:\\s+<?([^\\s>]+)>?\\s*(\"([^\"]*)\")?/\nconst REFERENCE_IMAGE_R = /^!\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst REFERENCE_LINK_R = /^\\[([^\\]]*)\\] ?\\[([^\\]]*)\\]/\nconst SHOULD_RENDER_AS_BLOCK_R = /(\\n|^[-*]\\s|^#|^ {2,}|^-{2,}|^>\\s)/\nconst TAB_R = /\\t/g\nconst TABLE_TRIM_PIPES = /(^ *\\||\\| *$)/g\nconst TABLE_CENTER_ALIGN = /^ *:-+: *$/\nconst TABLE_LEFT_ALIGN = /^ *:-+ *$/\nconst TABLE_RIGHT_ALIGN = /^ *-+: *$/\n\n/**\n * For inline formatting, this partial attempts to ignore characters that\n * may appear in nested formatting that could prematurely trigger detection\n * and therefore miss content that should have been included.\n */\nconst INLINE_SKIP_R =\n  '((?:\\\\[.*?\\\\][([].*?[)\\\\]]|<.*?>(?:.*?<.*?>)?|`.*?`|\\\\\\\\\\\\1|[\\\\s\\\\S])+?)'\n\n/**\n * Detect a sequence like **foo** or __foo__. Note that bold has a higher priority\n * than emphasized to support nesting of both since they share a delimiter.\n */\nconst TEXT_BOLD_R = new RegExp(`^([*_])\\\\1${INLINE_SKIP_R}\\\\1\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like *foo* or _foo_.\n */\nconst TEXT_EMPHASIZED_R = new RegExp(`^([*_])${INLINE_SKIP_R}\\\\1(?!\\\\1)`)\n\n/**\n * Detect a sequence like ==foo==.\n */\nconst TEXT_MARKED_R = new RegExp(`^(==)${INLINE_SKIP_R}\\\\1`)\n\n/**\n * Detect a sequence like ~~foo~~.\n */\nconst TEXT_STRIKETHROUGHED_R = new RegExp(`^(~~)${INLINE_SKIP_R}\\\\1`)\n\n/**\n * Special case for shortcodes like :big-smile: or :emoji:\n */\nconst SHORTCODE_R = /^(:[a-zA-Z0-9-_]+:)/\n\nconst TEXT_ESCAPED_R = /^\\\\([^0-9A-Za-z\\s])/\nconst UNESCAPE_R = /\\\\([^0-9A-Za-z\\s])/g\n\n/**\n * Always take the first character, then eagerly take text until a double space\n * (potential line break) or some markdown-like punctuation is reached.\n */\nconst TEXT_PLAIN_R = /^[\\s\\S](?:(?!  \\n|[0-9]\\.|http)[^=*_~\\-\\n:<`\\\\\\[!])*/\n\nconst TRIM_STARTING_NEWLINES = /^\\n+/\n\nconst HTML_LEFT_TRIM_AMOUNT_R = /^([ \\t]*)/\n\ntype LIST_TYPE = 1 | 2\nconst ORDERED: LIST_TYPE = 1\nconst UNORDERED: LIST_TYPE = 2\n\nconst LIST_LOOKBEHIND_R = /(?:^|\\n)( *)$/\n\n// recognize a `*` `-`, `+`, `1.`, `2.`... list bullet\nconst ORDERED_LIST_BULLET = '(?:\\\\d+\\\\.)'\nconst UNORDERED_LIST_BULLET = '(?:[*+-])'\n\nfunction generateListItemPrefix(type: LIST_TYPE) {\n  return (\n    '( *)(' +\n    (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n    ') +'\n  )\n}\n\n// recognize the start of a list item:\n// leading space plus a bullet plus a space (`   * `)\nconst ORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX = generateListItemPrefix(UNORDERED)\n\nfunction generateListItemPrefixRegex(type: LIST_TYPE) {\n  return new RegExp(\n    '^' +\n      (type === ORDERED ? ORDERED_LIST_ITEM_PREFIX : UNORDERED_LIST_ITEM_PREFIX)\n  )\n}\n\nconst ORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_PREFIX_R = generateListItemPrefixRegex(UNORDERED)\n\nfunction generateListItemRegex(type: LIST_TYPE) {\n  // recognize an individual list item:\n  //  * hi\n  //    this is part of the same item\n  //\n  //    as is this, which is a new paragraph in the same item\n  //\n  //  * but this is not part of the same item\n  return new RegExp(\n    '^' +\n      (type === ORDERED\n        ? ORDERED_LIST_ITEM_PREFIX\n        : UNORDERED_LIST_ITEM_PREFIX) +\n      '[^\\\\n]*(?:\\\\n' +\n      '(?!\\\\1' +\n      (type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET) +\n      ' )[^\\\\n]*)*(\\\\n|$)',\n    'gm'\n  )\n}\n\nconst ORDERED_LIST_ITEM_R = generateListItemRegex(ORDERED)\nconst UNORDERED_LIST_ITEM_R = generateListItemRegex(UNORDERED)\n\n// check whether a list item has paragraphs: if it does,\n// we leave the newlines at the end\nfunction generateListRegex(type: LIST_TYPE) {\n  const bullet = type === ORDERED ? ORDERED_LIST_BULLET : UNORDERED_LIST_BULLET\n\n  return new RegExp(\n    '^( *)(' +\n      bullet +\n      ') ' +\n      '[\\\\s\\\\S]+?(?:\\\\n{2,}(?! )' +\n      '(?!\\\\1' +\n      bullet +\n      ' (?!' +\n      bullet +\n      ' ))\\\\n*' +\n      // the \\\\s*$ here is so that we can parse the inside of nested\n      // lists, where our content might end before we receive two `\\n`s\n      '|\\\\s*\\\\n*$)'\n  )\n}\n\nconst ORDERED_LIST_R = generateListRegex(ORDERED)\nconst UNORDERED_LIST_R = generateListRegex(UNORDERED)\n\nfunction generateListRule(\n  h: any,\n  type: LIST_TYPE\n): MarkdownToJSX.Rule<\n  MarkdownToJSX.OrderedListNode | MarkdownToJSX.UnorderedListNode\n> {\n  const ordered = type === ORDERED\n  const LIST_R = ordered ? ORDERED_LIST_R : UNORDERED_LIST_R\n  const LIST_ITEM_R = ordered ? ORDERED_LIST_ITEM_R : UNORDERED_LIST_ITEM_R\n  const LIST_ITEM_PREFIX_R = ordered\n    ? ORDERED_LIST_ITEM_PREFIX_R\n    : UNORDERED_LIST_ITEM_PREFIX_R\n\n  return {\n    _qualify: source => LIST_ITEM_PREFIX_R.test(source),\n    _match: allowInline(function (source, state) {\n      // We only want to break into a list if we are at the start of a\n      // line. This is to avoid parsing \"hi * there\" with \"* there\"\n      // becoming a part of a list.\n      // You might wonder, \"but that's inline, so of course it wouldn't\n      // start a list?\". You would be correct! Except that some of our\n      // lists can be inline, because they might be inside another list,\n      // in which case we can parse with inline scope, but need to allow\n      // nested lists inside this inline scope.\n      const isStartOfLine = LIST_LOOKBEHIND_R.exec(state.prevCapture)\n      const isListAllowed = state.list || (!state.inline && !state.simple)\n\n      if (isStartOfLine && isListAllowed) {\n        source = isStartOfLine[1] + source\n\n        return LIST_R.exec(source)\n      } else {\n        return null\n      }\n    }),\n    _order: Priority.HIGH,\n    _parse(capture, parse, state) {\n      const bullet = capture[2]\n      const start = ordered ? +bullet : undefined\n      const items = capture[0]\n        // recognize the end of a paragraph block inside a list item:\n        // two or more newlines at end end of the item\n        .replace(BLOCK_END_R, '\\n')\n        .match(LIST_ITEM_R)\n\n      let lastItemWasAParagraph = false\n\n      const itemContent = items.map(function (item, i) {\n        // We need to see how far indented the item is:\n        const space = LIST_ITEM_PREFIX_R.exec(item)[0].length\n\n        // And then we construct a regex to \"unindent\" the subsequent\n        // lines of the items by that amount:\n        const spaceRegex = new RegExp('^ {1,' + space + '}', 'gm')\n\n        // Before processing the item, we need a couple things\n        const content = item\n          // remove indents on trailing lines:\n          .replace(spaceRegex, '')\n          // remove the bullet:\n          .replace(LIST_ITEM_PREFIX_R, '')\n\n        // Handling \"loose\" lists, like:\n        //\n        //  * this is wrapped in a paragraph\n        //\n        //  * as is this\n        //\n        //  * as is this\n        const isLastItem = i === items.length - 1\n        const containsBlocks = content.indexOf('\\n\\n') !== -1\n\n        // Any element in a list is a block if it contains multiple\n        // newlines. The last element in the list can also be a block\n        // if the previous item in the list was a block (this is\n        // because non-last items in the list can end with \\n\\n, but\n        // the last item can't, so we just \"inherit\" this property\n        // from our previous element).\n        const thisItemIsAParagraph =\n          containsBlocks || (isLastItem && lastItemWasAParagraph)\n        lastItemWasAParagraph = thisItemIsAParagraph\n\n        // backup our state for delta afterwards. We're going to\n        // want to set state.list to true, and state.inline depending\n        // on our list's looseness.\n        const oldStateInline = state.inline\n        const oldStateList = state.list\n        state.list = true\n\n        // Parse inline if we're in a tight list, or block if we're in\n        // a loose list.\n        let adjustedContent\n        if (thisItemIsAParagraph) {\n          state.inline = false\n          adjustedContent = trimEnd(content) + '\\n\\n'\n        } else {\n          state.inline = true\n          adjustedContent = trimEnd(content)\n        }\n\n        const result = parse(adjustedContent, state)\n\n        // Restore our state before returning\n        state.inline = oldStateInline\n        state.list = oldStateList\n\n        return result\n      })\n\n      return {\n        items: itemContent,\n        ordered: ordered,\n        start: start,\n      }\n    },\n    _render(node, output, state) {\n      const Tag = node.ordered ? 'ol' : 'ul'\n\n      return (\n        <Tag\n          key={state.key}\n          start={node.type === RuleType.orderedList ? node.start : undefined}\n        >\n          {node.items.map(function generateListItem(item, i) {\n            return <li key={i}>{output(item, state)}</li>\n          })}\n        </Tag>\n      )\n    },\n  }\n}\n\nconst LINK_INSIDE = '(?:\\\\[[^\\\\[\\\\]]*(?:\\\\[[^\\\\[\\\\]]*\\\\][^\\\\[\\\\]]*)*\\\\]|[^\\\\[\\\\]])*'\nconst LINK_HREF_AND_TITLE =\n  '\\\\s*<?((?:\\\\([^)]*\\\\)|[^\\\\s\\\\\\\\]|\\\\\\\\.)*?)>?(?:\\\\s+[\\'\"]([\\\\s\\\\S]*?)[\\'\"])?\\\\s*'\nconst LINK_R = new RegExp(\n  '^\\\\[(' + LINK_INSIDE + ')\\\\]\\\\(' + LINK_HREF_AND_TITLE + '\\\\)'\n)\nconst IMAGE_R = /^!\\[(.*?)\\]\\( *((?:\\([^)]*\\)|[^() ])*) *\"?([^)\"]*)?\"?\\)/\n\nfunction trimEnd(str: string) {\n  let end = str.length\n  while (end > 0 && str[end - 1] <= ' ') end--\n  return str.slice(0, end)\n}\n\nfunction startsWith(str: string, prefix: string) {\n  return str.startsWith(prefix)\n}\n\nfunction qualifies(\n  source: string,\n  state: MarkdownToJSX.State,\n  qualify: MarkdownToJSX.Rule<any>['_qualify']\n) {\n  if (Array.isArray(qualify)) {\n    for (let i = 0; i < qualify.length; i++) {\n      if (startsWith(source, qualify[i])) return true\n    }\n\n    return false\n  }\n\n  return qualify(source, state)\n}\n\n/** Remove symmetrical leading and trailing quotes */\nfunction unquote(str: string) {\n  const first = str[0]\n  if (\n    (first === '\"' || first === \"'\") &&\n    str.length >= 2 &&\n    str[str.length - 1] === first\n  ) {\n    return str.slice(1, -1)\n  }\n  return str\n}\n\n// based on https://stackoverflow.com/a/18123682/1141611\n// not complete, but probably good enough\nexport function slugify(str: string) {\n  return str\n    .replace(/[ÀÁÂÃÄÅàáâãäåæÆ]/g, 'a')\n    .replace(/[çÇ]/g, 'c')\n    .replace(/[ðÐ]/g, 'd')\n    .replace(/[ÈÉÊËéèêë]/g, 'e')\n    .replace(/[ÏïÎîÍíÌì]/g, 'i')\n    .replace(/[Ññ]/g, 'n')\n    .replace(/[øØœŒÕõÔôÓóÒò]/g, 'o')\n    .replace(/[ÜüÛûÚúÙù]/g, 'u')\n    .replace(/[ŸÿÝý]/g, 'y')\n    .replace(/[^a-z0-9- ]/gi, '')\n    .replace(/ /gi, '-')\n    .toLowerCase()\n}\n\nfunction parseTableAlignCapture(alignCapture: string) {\n  if (TABLE_RIGHT_ALIGN.test(alignCapture)) {\n    return 'right'\n  } else if (TABLE_CENTER_ALIGN.test(alignCapture)) {\n    return 'center'\n  } else if (TABLE_LEFT_ALIGN.test(alignCapture)) {\n    return 'left'\n  }\n\n  return null\n}\n\nfunction parseTableRow(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State,\n  tableOutput: boolean\n): MarkdownToJSX.ParserResult[][] {\n  const prevInTable = state.inTable\n\n  state.inTable = true\n\n  let cells: MarkdownToJSX.ParserResult[][] = [[]]\n  let acc = ''\n\n  function flush() {\n    if (!acc) return\n\n    const cell = cells[cells.length - 1]\n    cell.push.apply(cell, parse(acc, state))\n    acc = ''\n  }\n\n  source\n    .trim()\n    // isolate situations where a pipe should be ignored (inline code, escaped, etc)\n    .split(/(`[^`]*`|\\\\\\||\\|)/)\n    .filter(Boolean)\n    .forEach((fragment, i, arr) => {\n      if (fragment.trim() === '|') {\n        flush()\n\n        if (tableOutput) {\n          if (i !== 0 && i !== arr.length - 1) {\n            // Split the current row\n            cells.push([])\n          }\n\n          return\n        }\n      }\n\n      acc += fragment\n    })\n\n  flush()\n\n  state.inTable = prevInTable\n\n  return cells\n}\n\nfunction parseTableAlign(source: string /*, parse, state*/) {\n  const alignText = source.replace(TABLE_TRIM_PIPES, '').split('|')\n\n  return alignText.map(parseTableAlignCapture)\n}\n\nfunction parseTableCells(\n  source: string,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  const rowsText = source.trim().split('\\n')\n\n  return rowsText.map(function (rowText) {\n    return parseTableRow(rowText, parse, state, true)\n  })\n}\n\nfunction parseTable(\n  capture: RegExpMatchArray,\n  parse: MarkdownToJSX.NestedParser,\n  state: MarkdownToJSX.State\n) {\n  /**\n   * The table syntax makes some other parsing angry so as a bit of a hack even if alignment and/or cell rows are missing,\n   * we'll still run a detected first row through the parser and then just emit a paragraph.\n   */\n  state.inline = true\n  const align = capture[2] ? parseTableAlign(capture[2]) : []\n  const cells = capture[3] ? parseTableCells(capture[3], parse, state) : []\n  const header = parseTableRow(capture[1], parse, state, !!cells.length)\n  state.inline = false\n\n  return cells.length\n    ? {\n        align: align,\n        cells: cells,\n        header: header,\n        type: RuleType.table,\n      }\n    : {\n        children: header,\n        type: RuleType.paragraph,\n      }\n}\n\nfunction getTableStyle(node, colIndex) {\n  return node.align[colIndex] == null\n    ? {}\n    : {\n        textAlign: node.align[colIndex],\n      }\n}\n\n/** TODO: remove for react 16 */\nfunction normalizeAttributeKey(key) {\n  const hyphenIndex = key.indexOf('-')\n\n  if (hyphenIndex !== -1 && key.match(HTML_CUSTOM_ATTR_R) === null) {\n    key = key.replace(CAPTURE_LETTER_AFTER_HYPHEN, function (_, letter) {\n      return letter.toUpperCase()\n    })\n  }\n\n  return key\n}\n\ntype StyleTuple = [key: string, value: string]\n\nfunction parseStyleAttribute(styleString: string): StyleTuple[] {\n  const styles: StyleTuple[] = []\n  let buffer = ''\n  let inUrl = false\n  let inQuotes = false\n  let quoteChar: '\"' | \"'\" | '' = ''\n\n  if (!styleString) return styles\n\n  for (let i = 0; i < styleString.length; i++) {\n    const char = styleString[i]\n\n    // Handle quotes\n    if ((char === '\"' || char === \"'\") && !inUrl) {\n      if (!inQuotes) {\n        inQuotes = true\n        quoteChar = char\n      } else if (char === quoteChar) {\n        inQuotes = false\n        quoteChar = ''\n      }\n    }\n\n    // Track url() values\n    if (char === '(' && buffer.endsWith('url')) {\n      inUrl = true\n    } else if (char === ')' && inUrl) {\n      inUrl = false\n    }\n\n    // Only split on semicolons when not in quotes or url()\n    if (char === ';' && !inQuotes && !inUrl) {\n      const declaration = buffer.trim()\n      if (declaration) {\n        const colonIndex = declaration.indexOf(':')\n        if (colonIndex > 0) {\n          const key = declaration.slice(0, colonIndex).trim()\n          const value = declaration.slice(colonIndex + 1).trim()\n          styles.push([key, value])\n        }\n      }\n      buffer = ''\n    } else {\n      buffer += char\n    }\n  }\n\n  // Handle the last declaration\n  const declaration = buffer.trim()\n  if (declaration) {\n    const colonIndex = declaration.indexOf(':')\n    if (colonIndex > 0) {\n      const key = declaration.slice(0, colonIndex).trim()\n      const value = declaration.slice(colonIndex + 1).trim()\n      styles.push([key, value])\n    }\n  }\n\n  return styles\n}\n\nfunction attributeValueToJSXPropValue(\n  tag: MarkdownToJSX.HTMLTags,\n  key: keyof React.AllHTMLAttributes<Element>,\n  value: string,\n  sanitizeUrlFn: MarkdownToJSX.Options['sanitizer']\n): any {\n  if (key === 'style') {\n    return parseStyleAttribute(value).reduce(function (styles, [key, value]) {\n      // snake-case to camelCase\n      // also handles PascalCasing vendor prefixes\n      const camelCasedKey = key.replace(/(-[a-z])/g, substr =>\n        substr[1].toUpperCase()\n      )\n\n      // key.length + 1 to skip over the colon\n      styles[camelCasedKey] = sanitizeUrlFn(value, tag, key)\n\n      return styles\n    }, {})\n  } else if (ATTRIBUTES_TO_SANITIZE.indexOf(key) !== -1) {\n    return sanitizeUrlFn(unescape(value), tag, key)\n  } else if (value.match(INTERPOLATION_R)) {\n    // return as a string and let the consumer decide what to do with it\n    value = unescape(value.slice(1, value.length - 1))\n  }\n\n  if (value === 'true') {\n    return true\n  } else if (value === 'false') {\n    return false\n  }\n\n  return value\n}\n\nfunction normalizeWhitespace(source: string): string {\n  return source\n    .replace(CR_NEWLINE_R, '\\n')\n    .replace(FORMFEED_R, '')\n    .replace(TAB_R, '    ')\n}\n\n/**\n * Creates a parser for a given set of rules, with the precedence\n * specified as a list of rules.\n *\n * @rules: an object containing\n * rule type -> {match, order, parse} objects\n * (lower order is higher precedence)\n * (Note: `order` is added to defaultRules after creation so that\n *  the `order` of defaultRules in the source matches the `order`\n *  of defaultRules in terms of `order` fields.)\n *\n * @returns The resulting parse function, with the following parameters:\n *   @source: the input source string to be parsed\n *   @state: an optional object to be threaded through parse\n *     calls. Allows clients to add stateful operations to\n *     parsing, such as keeping track of how many levels deep\n *     some nesting is. For an example use-case, see passage-ref\n *     parsing in src/widgets/passage/passage-markdown.jsx\n */\nfunction parserFor(\n  rules: MarkdownToJSX.Rules\n): (\n  source: string,\n  state: MarkdownToJSX.State\n) => ReturnType<MarkdownToJSX.NestedParser> {\n  var ruleList = Object.keys(rules)\n\n  if (process.env.NODE_ENV !== 'production') {\n    ruleList.forEach(function (type) {\n      const order = rules[type]._order\n      if (typeof order !== 'number' || !isFinite(order)) {\n        console.warn(\n          'markdown-to-jsx: Invalid order for rule `' + type + '`: ' + order\n        )\n      }\n    })\n  }\n\n  // Sorts rules in order of increasing order, then\n  // ascending rule name in case of ties.\n  ruleList.sort(function (a, b) {\n    return rules[a]._order - rules[b]._order || (a < b ? -1 : 1)\n  })\n\n  function nestedParse(\n    source: string,\n    state: MarkdownToJSX.State\n  ): MarkdownToJSX.ParserResult[] {\n    var result = []\n    state.prevCapture = state.prevCapture || ''\n\n    if (source.trim()) {\n      while (source) {\n        var i = 0\n        while (i < ruleList.length) {\n          var ruleType = ruleList[i]\n          var rule = rules[ruleType]\n\n          if (rule._qualify && !qualifies(source, state, rule._qualify)) {\n            i++\n            continue\n          }\n\n          var capture = rule._match(source, state)\n          if (capture && capture[0]) {\n            source = source.substring(capture[0].length)\n\n            var parsed = rule._parse(capture, nestedParse, state)\n\n            state.prevCapture += capture[0]\n\n            if (!parsed.type) parsed.type = ruleType as unknown as RuleType\n            result.push(parsed)\n            break\n          }\n          i++\n        }\n      }\n    }\n\n    // reset on exit\n    state.prevCapture = ''\n\n    return result\n  }\n\n  return function (source, state) {\n    return nestedParse(normalizeWhitespace(source), state)\n  }\n}\n\n/**\n * Marks a matcher function as eligible for being run inside an inline context;\n * allows us to do a little less work in the nested parser.\n */\nfunction allowInline<T extends Function & { inline?: 0 | 1 }>(fn: T) {\n  fn.inline = 1\n\n  return fn\n}\n\n// Creates a match function for an inline scoped or simple element from a regex\nfunction inlineRegex(regex: RegExp) {\n  return allowInline(function match(source, state: MarkdownToJSX.State) {\n    if (state.inline) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// basically any inline element except links\nfunction simpleInlineRegex(regex: RegExp) {\n  return allowInline(function match(\n    source: string,\n    state: MarkdownToJSX.State\n  ) {\n    if (state.inline || state.simple) {\n      return regex.exec(source)\n    } else {\n      return null\n    }\n  })\n}\n\n// Creates a match function for a block scoped element from a regex\nfunction blockRegex(regex: RegExp) {\n  return function match(source: string, state: MarkdownToJSX.State) {\n    if (state.inline || state.simple) {\n      return null\n    } else {\n      return regex.exec(source)\n    }\n  }\n}\n\n// Creates a match function from a regex, ignoring block/inline scope\nfunction anyScopeRegex(regex: RegExp) {\n  return allowInline(function match(source: string /*, state*/) {\n    return regex.exec(source)\n  })\n}\n\nconst SANITIZE_R = /(javascript|vbscript|data(?!:image)):/i\n\nexport function sanitizer(input: string): string {\n  try {\n    const decoded = decodeURIComponent(input).replace(/[^A-Za-z0-9/:]/g, '')\n\n    if (SANITIZE_R.test(decoded)) {\n      if (process.env.NODE_ENV !== 'production') {\n        console.warn(\n          'Input contains an unsafe JavaScript/VBScript/data expression, it will not be rendered.',\n          decoded\n        )\n      }\n\n      return null\n    }\n  } catch (e) {\n    if (process.env.NODE_ENV !== 'production') {\n      console.warn(\n        'Input could not be decoded due to malformed syntax or characters, it will not be rendered.',\n        input\n      )\n    }\n\n    // decodeURIComponent sometimes throws a URIError\n    // See `decodeURIComponent('a%AFc');`\n    // http://stackoverflow.com/questions/9064536/javascript-decodeuricomponent-malformed-uri-exception\n    return null\n  }\n\n  return input\n}\n\nfunction unescape(rawString: string): string {\n  return rawString ? rawString.replace(UNESCAPE_R, '$1') : rawString\n}\n\n/**\n * Everything inline, including links.\n */\nfunction parseInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = true\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\n/**\n * Anything inline that isn't a link.\n */\nfunction parseSimpleInline(\n  parse: MarkdownToJSX.NestedParser,\n  children: string,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  const isCurrentlySimple = state.simple || false\n  state.inline = false\n  state.simple = true\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  state.simple = isCurrentlySimple\n  return result\n}\n\nfunction parseBlock(\n  parse,\n  children,\n  state: MarkdownToJSX.State\n): MarkdownToJSX.ParserResult[] {\n  const isCurrentlyInline = state.inline || false\n  state.inline = false\n  const result = parse(children, state)\n  state.inline = isCurrentlyInline\n  return result\n}\n\nconst parseCaptureInline: MarkdownToJSX.Parser<{\n  children: MarkdownToJSX.ParserResult[]\n}> = (capture, parse, state: MarkdownToJSX.State) => {\n  return {\n    children: parseInline(parse, capture[2], state),\n  }\n}\n\nfunction captureNothing() {\n  return {}\n}\n\nfunction renderNothing() {\n  return null\n}\n\nfunction reactFor(render) {\n  return function patchedRender(\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State = {}\n  ): React.ReactNode[] {\n    if (Array.isArray(ast)) {\n      const oldKey = state.key\n      const result = []\n\n      // map nestedOutput over the ast, except group any text\n      // nodes together into a single string output.\n      let lastWasString = false\n\n      for (let i = 0; i < ast.length; i++) {\n        state.key = i\n\n        const nodeOut = patchedRender(ast[i], state)\n        const isString = typeof nodeOut === 'string'\n\n        if (isString && lastWasString) {\n          result[result.length - 1] += nodeOut\n        } else if (nodeOut !== null) {\n          result.push(nodeOut)\n        }\n\n        lastWasString = isString\n      }\n\n      state.key = oldKey\n\n      return result\n    }\n\n    return render(ast, patchedRender, state)\n  }\n}\n\nfunction createRenderer(\n  rules: MarkdownToJSX.Rules,\n  userRender?: MarkdownToJSX.Options['renderRule']\n) {\n  return function renderRule(\n    ast: MarkdownToJSX.ParserResult,\n    render: MarkdownToJSX.RuleOutput,\n    state: MarkdownToJSX.State\n  ): React.ReactNode {\n    const renderer = rules[ast.type]._render as MarkdownToJSX.Rule['_render']\n\n    return userRender\n      ? userRender(() => renderer(ast, render, state), ast, render, state)\n      : renderer(ast, render, state)\n  }\n}\n\nfunction cx(...args) {\n  return args.filter(Boolean).join(' ')\n}\n\nfunction get(src: Object, path: string, fb?: any) {\n  let ptr = src\n  const frags = path.split('.')\n\n  while (frags.length) {\n    ptr = ptr[frags[0]]\n\n    if (ptr === undefined) break\n    else frags.shift()\n  }\n\n  return ptr || fb\n}\n\nfunction getTag(tag: string, overrides: MarkdownToJSX.Overrides) {\n  const override = get(overrides, tag)\n\n  if (!override) return tag\n\n  return typeof override === 'function' ||\n    (typeof override === 'object' && 'render' in override)\n    ? override\n    : get(overrides, `${tag}.component`, tag)\n}\n\nexport function compiler(\n  markdown: string = '',\n  options: MarkdownToJSX.Options = {}\n): React.JSX.Element {\n  options.overrides = options.overrides || {}\n  options.namedCodesToUnicode = options.namedCodesToUnicode\n    ? { ...namedCodesToUnicode, ...options.namedCodesToUnicode }\n    : namedCodesToUnicode\n\n  const slug = options.slugify || slugify\n  const sanitize = options.sanitizer || sanitizer\n  const createElement = options.createElement || React.createElement\n\n  const NON_PARAGRAPH_BLOCK_SYNTAXES = [\n    BLOCKQUOTE_R,\n    CODE_BLOCK_FENCED_R,\n    CODE_BLOCK_R,\n    options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R,\n    HEADING_SETEXT_R,\n    NP_TABLE_R,\n    ORDERED_LIST_R,\n    UNORDERED_LIST_R,\n  ]\n\n  const BLOCK_SYNTAXES = [\n    ...NON_PARAGRAPH_BLOCK_SYNTAXES,\n    PARAGRAPH_R,\n    HTML_BLOCK_ELEMENT_R,\n    HTML_COMMENT_R,\n    HTML_SELF_CLOSING_ELEMENT_R,\n  ]\n\n  function containsBlockSyntax(input: string) {\n    return BLOCK_SYNTAXES.some(r => r.test(input))\n  }\n\n  function matchParagraph(source: string, state: MarkdownToJSX.State) {\n    if (\n      state.inline ||\n      state.simple ||\n      (state.inHTML &&\n        source.indexOf('\\n\\n') === -1 &&\n        state.prevCapture.indexOf('\\n\\n') === -1)\n    ) {\n      return null\n    }\n\n    let match = ''\n\n    source.split('\\n').every(line => {\n      line += '\\n'\n\n      // bail out on first sign of non-paragraph block\n      if (NON_PARAGRAPH_BLOCK_SYNTAXES.some(regex => regex.test(line))) {\n        return false\n      }\n\n      match += line\n\n      return !!line.trim()\n    })\n\n    const captured = trimEnd(match)\n    if (captured === '') {\n      return null\n    }\n\n    // parseCaptureInline expects the inner content to be at index 2\n    // because index 1 is the delimiter for text formatting syntaxes\n    return [match, , captured] as RegExpMatchArray\n  }\n\n  // JSX custom pragma\n  // eslint-disable-next-line no-unused-vars\n  function h(\n    // locally we always will render a known string tag\n    tag: MarkdownToJSX.HTMLTags,\n    props: Parameters<MarkdownToJSX.CreateElement>[1] & {\n      className?: string\n      id?: string\n    },\n    ...children\n  ) {\n    const overrideProps = get(options.overrides, `${tag}.props`, {})\n\n    return createElement(\n      getTag(tag, options.overrides),\n      {\n        ...props,\n        ...overrideProps,\n        className: cx(props?.className, overrideProps.className) || undefined,\n      },\n      ...children\n    )\n  }\n\n  function compile(input: string): React.JSX.Element {\n    input = input.replace(FRONT_MATTER_R, '')\n\n    let inline = false\n\n    if (options.forceInline) {\n      inline = true\n    } else if (!options.forceBlock) {\n      /**\n       * should not contain any block-level markdown like newlines, lists, headings,\n       * thematic breaks, blockquotes, tables, etc\n       */\n      inline = SHOULD_RENDER_AS_BLOCK_R.test(input) === false\n    }\n\n    const arr = emitter(\n      parser(\n        inline\n          ? input\n          : `${trimEnd(input).replace(TRIM_STARTING_NEWLINES, '')}\\n\\n`,\n        {\n          inline,\n        }\n      )\n    )\n\n    while (\n      typeof arr[arr.length - 1] === 'string' &&\n      !arr[arr.length - 1].trim()\n    ) {\n      arr.pop()\n    }\n\n    if (options.wrapper === null) {\n      return arr\n    }\n\n    const wrapper = options.wrapper || (inline ? 'span' : 'div')\n    let jsx\n\n    if (arr.length > 1 || options.forceWrapper) {\n      jsx = arr\n    } else if (arr.length === 1) {\n      jsx = arr[0]\n\n      // TODO: remove this for React 16\n      if (typeof jsx === 'string') {\n        return <span key=\"outer\">{jsx}</span>\n      } else {\n        return jsx\n      }\n    } else {\n      // TODO: return null for React 16\n      jsx = null\n    }\n\n    return createElement(wrapper, { key: 'outer' }, jsx) as React.JSX.Element\n  }\n\n  function attrStringToMap(\n    tag: MarkdownToJSX.HTMLTags,\n    str: string\n  ): React.JSX.IntrinsicAttributes {\n    if (!str || !str.trim()) {\n      return null\n    }\n\n    const attributes = str.match(ATTR_EXTRACTOR_R)\n    if (!attributes) {\n      return null\n    }\n\n    return attributes.reduce(function (map, raw) {\n      const delimiterIdx = raw.indexOf('=')\n\n      if (delimiterIdx !== -1) {\n        const key = normalizeAttributeKey(raw.slice(0, delimiterIdx)).trim()\n        const value = unquote(raw.slice(delimiterIdx + 1).trim())\n\n        const mappedKey = ATTRIBUTE_TO_JSX_PROP_MAP[key] || key\n\n        // bail out, not supported\n        if (mappedKey === 'ref') return map\n\n        const normalizedValue = (map[mappedKey] = attributeValueToJSXPropValue(\n          tag,\n          key,\n          value,\n          sanitize\n        ))\n\n        if (\n          typeof normalizedValue === 'string' &&\n          (HTML_BLOCK_ELEMENT_R.test(normalizedValue) ||\n            HTML_SELF_CLOSING_ELEMENT_R.test(normalizedValue))\n        ) {\n          map[mappedKey] = compile(normalizedValue.trim())\n        }\n      } else if (raw !== 'style') {\n        map[ATTRIBUTE_TO_JSX_PROP_MAP[raw] || raw] = true\n      }\n\n      return map\n    }, {})\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof markdown !== 'string') {\n      throw new Error(`markdown-to-jsx: the first argument must be\n                             a string`)\n    }\n\n    if (\n      Object.prototype.toString.call(options.overrides) !== '[object Object]'\n    ) {\n      throw new Error(`markdown-to-jsx: options.overrides (second argument property) must be\n                             undefined or an object literal with shape:\n                             {\n                                htmltagname: {\n                                    component: string|ReactComponent(optional),\n                                    props: object(optional)\n                                }\n                             }`)\n    }\n  }\n\n  const footnotes: { footnote: string; identifier: string }[] = []\n  const refs: { [key: string]: { target: string; title: string } } = {}\n\n  /**\n   * each rule's react() output function goes through our custom\n   * h() JSX pragma; this allows the override functionality to be\n   * automatically applied\n   */\n  // @ts-ignore\n  const rules: MarkdownToJSX.Rules = {\n    [RuleType.blockQuote]: {\n      _qualify: ['>'],\n      _match: blockRegex(BLOCKQUOTE_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, alert, content] = capture[0]\n          .replace(BLOCKQUOTE_TRIM_LEFT_MULTILINE_R, '')\n          .match(BLOCKQUOTE_ALERT_R)\n\n        return {\n          alert,\n          children: parse(content, state),\n        }\n      },\n      _render(node, output, state) {\n        const props = {\n          key: state.key,\n        } as Record<string, unknown>\n\n        if (node.alert) {\n          props.className =\n            'markdown-alert-' + slug(node.alert.toLowerCase(), slugify)\n\n          node.children.unshift({\n            attrs: {},\n            children: [{ type: RuleType.text, text: node.alert }],\n            noInnerParse: true,\n            type: RuleType.htmlBlock,\n            tag: 'header',\n          })\n        }\n\n        return h('blockquote', props, output(node.children, state))\n      },\n    },\n\n    [RuleType.breakLine]: {\n      _match: anyScopeRegex(BREAK_LINE_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _render(_, __, state) {\n        return <br key={state.key} />\n      },\n    },\n\n    [RuleType.breakThematic]: {\n      _qualify: source => {\n        const char = source[0]\n        return char === '-' || char === '*' || char === '_'\n      },\n      _match: blockRegex(BREAK_THEMATIC_R),\n      _order: Priority.HIGH,\n      _parse: captureNothing,\n      _render(_, __, state) {\n        return <hr key={state.key} />\n      },\n    },\n\n    [RuleType.codeBlock]: {\n      _qualify: ['    '],\n      _match: blockRegex(CODE_BLOCK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          lang: undefined,\n          text: unescape(trimEnd(capture[0].replace(/^ {4}/gm, ''))),\n        }\n      },\n\n      _render(node, output, state) {\n        return (\n          <pre key={state.key}>\n            <code\n              {...node.attrs}\n              className={node.lang ? `lang-${node.lang}` : ''}\n            >\n              {node.text}\n            </code>\n          </pre>\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      attrs?: ReturnType<typeof attrStringToMap>\n      lang?: string\n      text: string\n    }>,\n\n    [RuleType.codeFenced]: {\n      _qualify: ['```', '~~~'],\n      _match: blockRegex(CODE_BLOCK_FENCED_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          // if capture[3] it's additional metadata\n          attrs: attrStringToMap('code', capture[3] || ''),\n          lang: capture[2] || undefined,\n          text: capture[4],\n          type: RuleType.codeBlock,\n        }\n      },\n    },\n\n    [RuleType.codeInline]: {\n      _qualify: ['`'],\n      _match: simpleInlineRegex(CODE_INLINE_R),\n      _order: Priority.LOW,\n      _parse(capture /*, parse, state*/) {\n        return {\n          text: unescape(capture[2]),\n        }\n      },\n      _render(node, output, state) {\n        return <code key={state.key}>{node.text}</code>\n      },\n    },\n\n    /**\n     * footnotes are emitted at the end of compilation in a special <footer> block\n     */\n    [RuleType.footnote]: {\n      _qualify: ['[^'],\n      _match: blockRegex(FOOTNOTE_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        footnotes.push({\n          footnote: capture[2],\n          identifier: capture[1],\n        })\n\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.footnoteReference]: {\n      _qualify: ['[^'],\n      _match: inlineRegex(FOOTNOTE_REFERENCE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse*/) {\n        return {\n          target: `#${slug(capture[1], slugify)}`,\n          text: capture[1],\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <a key={state.key} href={sanitize(node.target, 'a', 'href')}>\n            <sup key={state.key}>{node.text}</sup>\n          </a>\n        )\n      },\n    } as MarkdownToJSX.Rule<{ target: string; text: string }>,\n\n    [RuleType.gfmTask]: {\n      _qualify: ['[ ]', '[x]'],\n      _match: inlineRegex(GFM_TASK_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          completed: capture[1].toLowerCase() === 'x',\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <input\n            checked={node.completed}\n            key={state.key}\n            readOnly\n            type=\"checkbox\"\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{ completed: boolean }>,\n\n    [RuleType.heading]: {\n      _qualify: ['#'],\n      _match: blockRegex(\n        options.enforceAtxHeadings ? HEADING_ATX_COMPLIANT_R : HEADING_R\n      ),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[2], state),\n          id: slug(capture[2], slugify),\n          level: capture[1].length as MarkdownToJSX.HeadingNode['level'],\n        }\n      },\n      _render(node, output, state) {\n        return h(\n          `h${node.level}`,\n          { id: node.id, key: state.key },\n          output(node.children, state)\n        )\n      },\n    },\n\n    [RuleType.headingSetext]: {\n      _match: blockRegex(HEADING_SETEXT_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          children: parseInline(parse, capture[1], state),\n          level: capture[2] === '=' ? 1 : 2,\n          type: RuleType.heading,\n        }\n      },\n    },\n\n    [RuleType.htmlBlock]: {\n      _qualify: ['<'],\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_BLOCK_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture, parse, state) {\n        const [, whitespace] = capture[3].match(HTML_LEFT_TRIM_AMOUNT_R)\n\n        const trimmer = new RegExp(`^${whitespace}`, 'gm')\n        const trimmed = capture[3].replace(trimmer, '')\n\n        const parseFunc = containsBlockSyntax(trimmed)\n          ? parseBlock\n          : parseInline\n\n        const tagName = capture[1].toLowerCase() as MarkdownToJSX.HTMLTags\n        const noInnerParse =\n          DO_NOT_PROCESS_HTML_ELEMENTS.indexOf(tagName) !== -1\n\n        const tag = (\n          noInnerParse ? tagName : capture[1]\n        ).trim() as MarkdownToJSX.HTMLTags\n\n        const ast = {\n          attrs: attrStringToMap(tag, capture[2]),\n          noInnerParse: noInnerParse,\n          tag,\n        } as {\n          attrs: ReturnType<typeof attrStringToMap>\n          children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n          noInnerParse: Boolean\n          tag: MarkdownToJSX.HTMLTags\n          text?: string | undefined\n        }\n\n        state.inAnchor = state.inAnchor || tagName === 'a'\n\n        if (noInnerParse) {\n          ast.text = capture[3]\n        } else {\n          const prevInHTML = state.inHTML\n          state.inHTML = true\n          ast.children = parseFunc(parse, trimmed, state)\n          state.inHTML = prevInHTML\n        }\n\n        /**\n         * if another html block is detected within, parse as block,\n         * otherwise parse as inline to pick up any further markdown\n         */\n        state.inAnchor = false\n\n        return ast\n      },\n      _render(node, output, state) {\n        return (\n          <node.tag key={state.key} {...node.attrs}>\n            {node.text || (node.children ? output(node.children, state) : '')}\n          </node.tag>\n        )\n      },\n    },\n\n    [RuleType.htmlSelfClosing]: {\n      _qualify: ['<'],\n      /**\n       * find the first matching end tag and process the interior\n       */\n      _match: anyScopeRegex(HTML_SELF_CLOSING_ELEMENT_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        const tag = capture[1].trim() as MarkdownToJSX.HTMLTags\n        return {\n          attrs: attrStringToMap(tag, capture[2] || ''),\n          tag,\n        }\n      },\n      _render(node, output, state) {\n        return <node.tag {...node.attrs} key={state.key} />\n      },\n    },\n\n    [RuleType.htmlComment]: {\n      _qualify: ['<!--'],\n      _match: anyScopeRegex(HTML_COMMENT_R),\n      _order: Priority.HIGH,\n      _parse() {\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.image]: {\n      _qualify: ['!['],\n      _match: simpleInlineRegex(IMAGE_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          alt: unescape(capture[1]),\n          target: unescape(capture[2]),\n          title: unescape(capture[3]),\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <img\n            key={state.key}\n            alt={node.alt || undefined}\n            title={node.title || undefined}\n            src={sanitize(node.target, 'img', 'src')}\n          />\n        )\n      },\n    } as MarkdownToJSX.Rule<{\n      alt?: string\n      target: string\n      title?: string\n    }>,\n\n    [RuleType.link]: {\n      _qualify: ['['],\n      _match: inlineRegex(LINK_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          children: parseSimpleInline(parse, capture[1], state),\n          target: unescape(capture[2]),\n          title: unescape(capture[3]),\n        }\n      },\n      _render(node, output, state) {\n        return (\n          <a\n            key={state.key}\n            href={sanitize(node.target, 'a', 'href')}\n            title={node.title}\n          >\n            {output(node.children, state)}\n          </a>\n        )\n      },\n    },\n\n    // https://daringfireball.net/projects/markdown/syntax#autolink\n    [RuleType.linkAngleBraceStyleDetector]: {\n      _qualify: ['<'],\n      _match: inlineRegex(LINK_AUTOLINK_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkBareUrlDetector]: {\n      _qualify: (source, state) => {\n        if (state.inAnchor || options.disableAutoLink) return false\n        return startsWith(source, 'http://') || startsWith(source, 'https://')\n      },\n      _match: inlineRegex(LINK_AUTOLINK_BARE_URL_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        return {\n          children: [\n            {\n              text: capture[1],\n              type: RuleType.text,\n            },\n          ],\n          target: capture[1],\n          title: undefined,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.linkMailtoDetector]: {\n      _qualify: ['<'],\n      _match: inlineRegex(LINK_AUTOLINK_MAILTO_R),\n      _order: Priority.MAX,\n      _parse(capture /*, parse, state*/) {\n        let address = capture[1]\n        let target = capture[1]\n\n        // Check for a `mailto:` already existing in the link:\n        if (!AUTOLINK_MAILTO_CHECK_R.test(target)) {\n          target = 'mailto:' + target\n        }\n\n        return {\n          children: [\n            {\n              text: address.replace('mailto:', ''),\n              type: RuleType.text,\n            },\n          ],\n          target: target,\n          type: RuleType.link,\n        }\n      },\n    },\n\n    [RuleType.orderedList]: generateListRule(\n      h,\n      ORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.OrderedListNode>,\n\n    [RuleType.unorderedList]: generateListRule(\n      h,\n      UNORDERED\n    ) as MarkdownToJSX.Rule<MarkdownToJSX.UnorderedListNode>,\n\n    [RuleType.newlineCoalescer]: {\n      _match: blockRegex(CONSECUTIVE_NEWLINE_R),\n      _order: Priority.LOW,\n      _parse: captureNothing,\n      _render(/*node, output, state*/) {\n        return '\\n'\n      },\n    },\n\n    [RuleType.paragraph]: {\n      _match: allowInline(matchParagraph),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <p key={state.key}>{output(node.children, state)}</p>\n      },\n    } as MarkdownToJSX.Rule<ReturnType<typeof parseCaptureInline>>,\n\n    [RuleType.ref]: {\n      _qualify: ['['],\n      _match: inlineRegex(REFERENCE_IMAGE_OR_LINK),\n      _order: Priority.MAX,\n      _parse(capture /*, parse*/) {\n        refs[capture[1]] = {\n          target: capture[2],\n          title: capture[4],\n        }\n\n        return {}\n      },\n      _render: renderNothing,\n    },\n\n    [RuleType.refImage]: {\n      _qualify: ['!['],\n      _match: simpleInlineRegex(REFERENCE_IMAGE_R),\n      _order: Priority.MAX,\n      _parse(capture) {\n        return {\n          alt: capture[1] ? unescape(capture[1]) : undefined,\n          ref: capture[2],\n        }\n      },\n      _render(node, output, state) {\n        return refs[node.ref] ? (\n          <img\n            key={state.key}\n            alt={node.alt}\n            src={sanitize(refs[node.ref].target, 'img', 'src')}\n            title={refs[node.ref].title}\n          />\n        ) : null\n      },\n    } as MarkdownToJSX.Rule<{ alt?: string; ref: string }>,\n\n    [RuleType.refLink]: {\n      _qualify: (source) => source[0] === '[' && source.indexOf('](') === -1,\n      _match: inlineRegex(REFERENCE_LINK_R),\n      _order: Priority.MAX,\n      _parse(capture, parse, state) {\n        return {\n          children: parse(capture[1], state),\n          fallbackChildren: capture[0],\n          ref: capture[2],\n        }\n      },\n      _render(node, output, state) {\n        return refs[node.ref] ? (\n          <a\n            key={state.key}\n            href={sanitize(refs[node.ref].target, 'a', 'href')}\n            title={refs[node.ref].title}\n          >\n            {output(node.children, state)}\n          </a>\n        ) : (\n          <span key={state.key}>{node.fallbackChildren}</span>\n        )\n      },\n    },\n\n    [RuleType.table]: {\n      _qualify: ['|'],\n      _match: blockRegex(NP_TABLE_R),\n      _order: Priority.HIGH,\n      _parse: parseTable,\n      _render(node, output, state) {\n        const table = node as MarkdownToJSX.TableNode\n        return (\n          <table key={state.key}>\n            <thead>\n              <tr>\n                {table.header.map(function generateHeaderCell(content, i) {\n                  return (\n                    <th key={i} style={getTableStyle(table, i)}>\n                      {output(content, state)}\n                    </th>\n                  )\n                })}\n              </tr>\n            </thead>\n\n            <tbody>\n              {table.cells.map(function generateTableRow(row, i) {\n                return (\n                  <tr key={i}>\n                    {row.map(function generateTableCell(content, c) {\n                      return (\n                        <td key={c} style={getTableStyle(table, c)}>\n                          {output(content, state)}\n                        </td>\n                      )\n                    })}\n                  </tr>\n                )\n              })}\n            </tbody>\n          </table>\n        )\n      },\n    },\n\n    [RuleType.text]: {\n      // Here we look for anything followed by non-symbols,\n      // double newlines, or double-space-newlines\n      // We break on any symbol characters so that this grammar\n      // is easy to extend without needing to modify this regex\n      _match: allowInline(function (source, state) {\n        let ret\n        if (startsWith(source, ':')) ret = SHORTCODE_R.exec(source)\n        if (ret) return ret\n\n        return TEXT_PLAIN_R.exec(source)\n      }),\n      _order: Priority.MIN,\n      _parse(capture) {\n        const text = capture[0]\n        return {\n          text:\n            text.indexOf('&') === -1\n              ? text\n              : text.replace(\n                  HTML_CHAR_CODE_R,\n                  (full, inner) => options.namedCodesToUnicode[inner] || full\n                ),\n        }\n      },\n      _render(node) {\n        return node.text\n      },\n    },\n\n    [RuleType.textBolded]: {\n      _qualify: ['**', '__'],\n      _match: simpleInlineRegex(TEXT_BOLD_R),\n      _order: Priority.MED,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> the syntax control character\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      _render(node, output, state) {\n        return <strong key={state.key}>{output(node.children, state)}</strong>\n      },\n    },\n\n    [RuleType.textEmphasized]: {\n      _qualify: source => {\n        const char = source[0]\n        return (char === '*' || char === '_') && source[1] !== char\n      },\n      _match: simpleInlineRegex(TEXT_EMPHASIZED_R),\n      _order: Priority.LOW,\n      _parse(capture, parse, state) {\n        return {\n          // capture[1] -> opening * or _\n          // capture[2] -> inner content\n          children: parse(capture[2], state),\n        }\n      },\n      _render(node, output, state) {\n        return <em key={state.key}>{output(node.children, state)}</em>\n      },\n    },\n\n    [RuleType.textEscaped]: {\n      _qualify: ['\\\\'],\n      // We don't allow escaping numbers, letters, or spaces here so that\n      // backslashes used in plain text still get rendered. But allowing\n      // escaping anything else provides a very flexible escape mechanism,\n      // regardless of how this grammar is extended.\n      _match: simpleInlineRegex(TEXT_ESCAPED_R),\n      _order: Priority.HIGH,\n      _parse(capture /*, parse, state*/) {\n        return {\n          text: capture[1],\n          type: RuleType.text,\n        }\n      },\n    },\n\n    [RuleType.textMarked]: {\n      _qualify: ['=='],\n      _match: simpleInlineRegex(TEXT_MARKED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <mark key={state.key}>{output(node.children, state)}</mark>\n      },\n    },\n\n    [RuleType.textStrikethroughed]: {\n      _qualify: ['~~'],\n      _match: simpleInlineRegex(TEXT_STRIKETHROUGHED_R),\n      _order: Priority.LOW,\n      _parse: parseCaptureInline,\n      _render(node, output, state) {\n        return <del key={state.key}>{output(node.children, state)}</del>\n      },\n    },\n  }\n\n  // Object.keys(rules).forEach(key => {\n  //   let { _match: match, parse: parse } = rules[key]\n\n  //   // rules[key].match = (...args) => {\n  //   //   const start = performance.now()\n  //   //   const result = match(...args)\n  //   //   const delta = performance.now() - start\n\n  //   //   if (delta > 5)\n  //   //     console.warn(\n  //   //       `Slow match for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //   //     )\n\n  //   //   return result\n  //   // }\n\n  //   rules[key].parse = (...args) => {\n  //     const start = performance.now()\n  //     const result = parse(...args)\n  //     const delta = performance.now() - start\n\n  //     if (delta > 5) {\n  //       console.warn(\n  //         `Slow parse for ${key}: ${delta.toFixed(3)}ms, input: ${args[0]}`\n  //       )\n  //     }\n\n  //     // console[delta > 5 ? 'warn' : 'log'](\n  //     //   `${key}:parse`,\n  //     //   `${delta.toFixed(3)}ms`,\n  //     //   args[0]\n  //     // )\n\n  //     return result\n  //   }\n  // })\n\n  if (options.disableParsingRawHTML === true) {\n    delete rules[RuleType.htmlBlock]\n    delete rules[RuleType.htmlSelfClosing]\n  }\n\n  const parser = parserFor(rules)\n  const emitter: Function = reactFor(createRenderer(rules, options.renderRule))\n\n  const jsx = compile(markdown)\n\n  if (footnotes.length) {\n    return (\n      <div>\n        {jsx}\n        <footer key=\"footer\">\n          {footnotes.map(function createFootnote(def) {\n            return (\n              <div id={slug(def.identifier, slugify)} key={def.identifier}>\n                {def.identifier}\n                {emitter(parser(def.footnote, { inline: true }))}\n              </div>\n            )\n          })}\n        </footer>\n      </div>\n    )\n  }\n\n  return jsx\n}\n\n/**\n * A simple HOC for easy React use. Feed the markdown content as a direct child\n * and the rest is taken care of automatically.\n */\nconst Markdown: React.FC<\n  Omit<React.HTMLAttributes<Element>, 'children'> & {\n    children: string\n    options?: MarkdownToJSX.Options\n  }\n> = ({ children = '', options, ...props }) => {\n  if (process.env.NODE_ENV !== 'production' && typeof children !== 'string') {\n    console.error(\n      'markdown-to-jsx: <Markdown> component only accepts a single string as a child, received:',\n      children\n    )\n  }\n\n  return React.cloneElement(\n    compiler(children, options),\n    props as React.JSX.IntrinsicAttributes\n  )\n}\n\nexport namespace MarkdownToJSX {\n  /**\n   * RequireAtLeastOne<{ ... }> <- only requires at least one key\n   */\n  type RequireAtLeastOne<T, Keys extends keyof T = keyof T> = Pick<\n    T,\n    Exclude<keyof T, Keys>\n  > &\n    {\n      [K in Keys]-?: Required<Pick<T, K>> & Partial<Pick<T, Exclude<Keys, K>>>\n    }[Keys]\n\n  export type CreateElement = typeof React.createElement\n\n  export type HTMLTags = keyof React.JSX.IntrinsicElements\n\n  export type State = {\n    /** true if the current content is inside anchor link grammar */\n    inAnchor?: boolean\n    /** true if parsing in an HTML context */\n    inHTML?: boolean\n    /** true if parsing in an inline context (subset of rules around formatting and links) */\n    inline?: boolean\n    /** true if in a table */\n    inTable?: boolean\n    /** use this for the `key` prop */\n    key?: React.Key\n    /** true if in a list */\n    list?: boolean\n    /** used for lookbacks */\n    prevCapture?: string\n    /** true if parsing in inline context w/o links */\n    simple?: boolean\n  }\n\n  export interface BlockQuoteNode {\n    alert?: string\n    children: MarkdownToJSX.ParserResult[]\n    type: typeof RuleType.blockQuote\n  }\n\n  export interface BreakLineNode {\n    type: typeof RuleType.breakLine\n  }\n\n  export interface BreakThematicNode {\n    type: typeof RuleType.breakThematic\n  }\n\n  export interface CodeBlockNode {\n    type: typeof RuleType.codeBlock\n    attrs?: React.JSX.IntrinsicAttributes\n    lang?: string\n    text: string\n  }\n\n  export interface CodeFencedNode {\n    type: typeof RuleType.codeFenced\n  }\n\n  export interface CodeInlineNode {\n    type: typeof RuleType.codeInline\n    text: string\n  }\n\n  export interface FootnoteNode {\n    type: typeof RuleType.footnote\n  }\n\n  export interface FootnoteReferenceNode {\n    type: typeof RuleType.footnoteReference\n    target: string\n    text: string\n  }\n\n  export interface GFMTaskNode {\n    type: typeof RuleType.gfmTask\n    completed: boolean\n  }\n\n  export interface HeadingNode {\n    type: typeof RuleType.heading\n    children: MarkdownToJSX.ParserResult[]\n    id: string\n    level: 1 | 2 | 3 | 4 | 5 | 6\n  }\n\n  export interface HeadingSetextNode {\n    type: typeof RuleType.headingSetext\n  }\n\n  export interface HTMLCommentNode {\n    type: typeof RuleType.htmlComment\n  }\n\n  export interface ImageNode {\n    type: typeof RuleType.image\n    alt?: string\n    target: string\n    title?: string\n  }\n\n  export interface LinkNode {\n    type: typeof RuleType.link\n    children: MarkdownToJSX.ParserResult[]\n    target: string\n    title?: string\n  }\n\n  export interface LinkAngleBraceNode {\n    type: typeof RuleType.linkAngleBraceStyleDetector\n  }\n\n  export interface LinkBareURLNode {\n    type: typeof RuleType.linkBareUrlDetector\n  }\n\n  export interface LinkMailtoNode {\n    type: typeof RuleType.linkMailtoDetector\n  }\n\n  export interface OrderedListNode {\n    type: typeof RuleType.orderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: true\n    start?: number\n  }\n\n  export interface UnorderedListNode {\n    type: typeof RuleType.unorderedList\n    items: MarkdownToJSX.ParserResult[][]\n    ordered: false\n  }\n\n  export interface NewlineNode {\n    type: typeof RuleType.newlineCoalescer\n  }\n\n  export interface ParagraphNode {\n    type: typeof RuleType.paragraph\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ReferenceNode {\n    type: typeof RuleType.ref\n  }\n\n  export interface ReferenceImageNode {\n    type: typeof RuleType.refImage\n    alt?: string\n    ref: string\n  }\n\n  export interface ReferenceLinkNode {\n    type: typeof RuleType.refLink\n    children: MarkdownToJSX.ParserResult[]\n    fallbackChildren: string\n    ref: string\n  }\n\n  export interface TableNode {\n    type: typeof RuleType.table\n    /**\n     * alignment for each table column\n     */\n    align: ('left' | 'right' | 'center')[]\n    cells: MarkdownToJSX.ParserResult[][][]\n    header: MarkdownToJSX.ParserResult[][]\n  }\n\n  export interface TableSeparatorNode {\n    type: typeof RuleType.tableSeparator\n  }\n\n  export interface TextNode {\n    type: typeof RuleType.text\n    text: string\n  }\n\n  export interface BoldTextNode {\n    type: typeof RuleType.textBolded\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface ItalicTextNode {\n    type: typeof RuleType.textEmphasized\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface EscapedTextNode {\n    type: typeof RuleType.textEscaped\n  }\n\n  export interface MarkedTextNode {\n    type: typeof RuleType.textMarked\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface StrikethroughTextNode {\n    type: typeof RuleType.textStrikethroughed\n    children: MarkdownToJSX.ParserResult[]\n  }\n\n  export interface HTMLNode {\n    type: typeof RuleType.htmlBlock\n    attrs: React.JSX.IntrinsicAttributes\n    children?: ReturnType<MarkdownToJSX.NestedParser> | undefined\n    noInnerParse: Boolean\n    tag: MarkdownToJSX.HTMLTags\n    text?: string | undefined\n  }\n\n  export interface HTMLSelfClosingNode {\n    type: typeof RuleType.htmlSelfClosing\n    attrs: React.JSX.IntrinsicAttributes\n    tag: string\n  }\n\n  export type ParserResult =\n    | BlockQuoteNode\n    | BreakLineNode\n    | BreakThematicNode\n    | CodeBlockNode\n    | CodeFencedNode\n    | CodeInlineNode\n    | FootnoteNode\n    | FootnoteReferenceNode\n    | GFMTaskNode\n    | HeadingNode\n    | HeadingSetextNode\n    | HTMLCommentNode\n    | ImageNode\n    | LinkNode\n    | LinkAngleBraceNode\n    | LinkBareURLNode\n    | LinkMailtoNode\n    | OrderedListNode\n    | UnorderedListNode\n    | NewlineNode\n    | ParagraphNode\n    | ReferenceNode\n    | ReferenceImageNode\n    | ReferenceLinkNode\n    | TableNode\n    | TableSeparatorNode\n    | TextNode\n    | BoldTextNode\n    | ItalicTextNode\n    | EscapedTextNode\n    | MarkedTextNode\n    | StrikethroughTextNode\n    | HTMLNode\n    | HTMLSelfClosingNode\n\n  export type NestedParser = (\n    input: string,\n    state?: MarkdownToJSX.State\n  ) => MarkdownToJSX.ParserResult[]\n\n  export type Parser<ParserOutput> = (\n    capture: RegExpMatchArray,\n    nestedParse: NestedParser,\n    state?: MarkdownToJSX.State\n  ) => ParserOutput\n\n  export type RuleOutput = (\n    ast: MarkdownToJSX.ParserResult | MarkdownToJSX.ParserResult[],\n    state: MarkdownToJSX.State\n  ) => React.JSX.Element\n\n  export type Rule<ParserOutput = MarkdownToJSX.ParserResult> = {\n    _match: (\n      source: string,\n      state: MarkdownToJSX.State,\n      prevCapturedString?: string\n    ) => RegExpMatchArray\n    _order: (typeof Priority)[keyof typeof Priority]\n    _parse: MarkdownToJSX.Parser<Omit<ParserOutput, 'type'>>\n    /**\n     * Optional fast check that can quickly determine if this rule\n     * should even be attempted. Should check the start of the source string\n     * for quick patterns without expensive regex operations.\n     *\n     * @param source The input source string (already trimmed of leading whitespace)\n     * @param state Current parser state\n     * @returns true if the rule should be attempted, false to skip\n     */\n    _qualify?:\n      | string[]\n      | ((source: string, state: MarkdownToJSX.State) => boolean)\n    _render?: (\n      node: ParserOutput,\n      /**\n       * Continue rendering AST nodes if applicable.\n       */\n      render: RuleOutput,\n      state?: MarkdownToJSX.State\n    ) => React.ReactNode\n  }\n\n  export type Rules = {\n    [K in ParserResult['type']]: K extends typeof RuleType.table\n      ? Rule<Extract<ParserResult, { type: K | typeof RuleType.paragraph }>>\n      : Rule<Extract<ParserResult, { type: K }>>\n  }\n\n  export type Override =\n    | RequireAtLeastOne<{\n        component: React.ElementType\n        props: Object\n      }>\n    | React.ElementType\n\n  export type Overrides = {\n    [tag in HTMLTags]?: Override\n  } & {\n    [customComponent: string]: Override\n  }\n\n  export type Options = Partial<{\n    /**\n     * Ultimate control over the output of all rendered JSX.\n     */\n    createElement: (\n      tag: Parameters<CreateElement>[0],\n      props: React.JSX.IntrinsicAttributes,\n      ...children: React.ReactNode[]\n    ) => React.ReactNode\n\n    /**\n     * The library automatically generates an anchor tag for bare URLs included in the markdown\n     * document, but this behavior can be disabled if desired.\n     */\n    disableAutoLink: boolean\n\n    /**\n     * Disable the compiler's best-effort transcription of provided raw HTML\n     * into JSX-equivalent. This is the functionality that prevents the need to\n     * use `dangerouslySetInnerHTML` in React.\n     */\n    disableParsingRawHTML: boolean\n\n    /**\n     * Forces the compiler to have space between hash sign and the header text which\n     * is explicitly stated in the most of the markdown specs.\n     * https://github.github.com/gfm/#atx-heading\n     * `The opening sequence of # characters must be followed by a space or by the end of line.`\n     */\n    enforceAtxHeadings: boolean\n\n    /**\n     * Forces the compiler to always output content with a block-level wrapper\n     * (`<p>` or any block-level syntax your markdown already contains.)\n     */\n    forceBlock: boolean\n\n    /**\n     * Forces the compiler to always output content with an inline wrapper (`<span>`)\n     */\n    forceInline: boolean\n\n    /**\n     * Forces the compiler to wrap results, even if there is only a single\n     * child or no children.\n     */\n    forceWrapper: boolean\n\n    /**\n     * Supply additional HTML entity: unicode replacement mappings.\n     *\n     * Pass only the inner part of the entity as the key,\n     * e.g. `&le;` -> `{ \"le\": \"\\u2264\" }`\n     *\n     * By default\n     * the following entities are replaced with their unicode equivalents:\n     *\n     * ```\n     * &amp;\n     * &apos;\n     * &gt;\n     * &lt;\n     * &nbsp;\n     * &quot;\n     * ```\n     */\n    namedCodesToUnicode: {\n      [key: string]: string\n    }\n\n    /**\n     * Selectively control the output of particular HTML tags as they would be\n     * emitted by the compiler.\n     */\n    overrides: Overrides\n\n    /**\n     * Allows for full control over rendering of particular rules.\n     * For example, to implement a LaTeX renderer such as `react-katex`:\n     *\n     * ```\n     * renderRule(next, node, renderChildren, state) {\n     *   if (node.type === RuleType.codeBlock && node.lang === 'latex') {\n     *     return (\n     *       <TeX as=\"div\" key={state.key}>\n     *         {String.raw`${node.text}`}\n     *       </TeX>\n     *     )\n     *   }\n     *\n     *   return next();\n     * }\n     * ```\n     *\n     * Thar be dragons obviously, but you can do a lot with this\n     * (have fun!) To see how things work internally, check the `render`\n     * method in source for a particular rule.\n     */\n    renderRule: (\n      /** Resume normal processing, call this function as a fallback if you are not returning custom JSX. */\n      next: () => React.ReactNode,\n      /** the current AST node, use `RuleType` against `node.type` for identification */\n      node: ParserResult,\n      /** use as `renderChildren(node.children)` for block nodes */\n      renderChildren: RuleOutput,\n      /** contains `key` which should be supplied to the topmost JSX element */\n      state: State\n    ) => React.ReactNode\n\n    /**\n     * Override the built-in sanitizer function for URLs, etc if desired. The built-in version is available as a library export called `sanitizer`.\n     */\n    sanitizer: (\n      value: string,\n      tag: HTMLTags,\n      attribute: string\n    ) => string | null\n\n    /**\n     * Override normalization of non-URI-safe characters for use in generating\n     * HTML IDs for anchor linking purposes.\n     */\n    slugify: (input: string, defaultFn: (input: string) => string) => string\n\n    /**\n     * Declare the type of the wrapper to be used when there are multiple\n     * children to render. Set to `null` to get an array of children back\n     * without any wrapper, or use `React.Fragment` to get a React element\n     * that won't show up in the DOM.\n     */\n    wrapper: React.ElementType | null\n  }>\n}\n\nexport default Markdown\n","// https://nodejs.org/api/packages.html#packages_writing_dual_packages_while_avoiding_or_minimizing_hazards\nimport HighlightJS from '../lib/core.js';\nexport { HighlightJS };\nexport default HighlightJS;\n","/*\nLanguage: Python\nDescription: Python is an interpreted, object-oriented, high-level programming language with dynamic semantics.\nWebsite: https://www.python.org\nCategory: common\n*/\n\nfunction python(hljs) {\n  const regex = hljs.regex;\n  const IDENT_RE = /[\\p{XID_Start}_]\\p{XID_Continue}*/u;\n  const RESERVED_WORDS = [\n    'and',\n    'as',\n    'assert',\n    'async',\n    'await',\n    'break',\n    'case',\n    'class',\n    'continue',\n    'def',\n    'del',\n    'elif',\n    'else',\n    'except',\n    'finally',\n    'for',\n    'from',\n    'global',\n    'if',\n    'import',\n    'in',\n    'is',\n    'lambda',\n    'match',\n    'nonlocal|10',\n    'not',\n    'or',\n    'pass',\n    'raise',\n    'return',\n    'try',\n    'while',\n    'with',\n    'yield'\n  ];\n\n  const BUILT_INS = [\n    '__import__',\n    'abs',\n    'all',\n    'any',\n    'ascii',\n    'bin',\n    'bool',\n    'breakpoint',\n    'bytearray',\n    'bytes',\n    'callable',\n    'chr',\n    'classmethod',\n    'compile',\n    'complex',\n    'delattr',\n    'dict',\n    'dir',\n    'divmod',\n    'enumerate',\n    'eval',\n    'exec',\n    'filter',\n    'float',\n    'format',\n    'frozenset',\n    'getattr',\n    'globals',\n    'hasattr',\n    'hash',\n    'help',\n    'hex',\n    'id',\n    'input',\n    'int',\n    'isinstance',\n    'issubclass',\n    'iter',\n    'len',\n    'list',\n    'locals',\n    'map',\n    'max',\n    'memoryview',\n    'min',\n    'next',\n    'object',\n    'oct',\n    'open',\n    'ord',\n    'pow',\n    'print',\n    'property',\n    'range',\n    'repr',\n    'reversed',\n    'round',\n    'set',\n    'setattr',\n    'slice',\n    'sorted',\n    'staticmethod',\n    'str',\n    'sum',\n    'super',\n    'tuple',\n    'type',\n    'vars',\n    'zip'\n  ];\n\n  const LITERALS = [\n    '__debug__',\n    'Ellipsis',\n    'False',\n    'None',\n    'NotImplemented',\n    'True'\n  ];\n\n  // https://docs.python.org/3/library/typing.html\n  // TODO: Could these be supplemented by a CamelCase matcher in certain\n  // contexts, leaving these remaining only for relevance hinting?\n  const TYPES = [\n    \"Any\",\n    \"Callable\",\n    \"Coroutine\",\n    \"Dict\",\n    \"List\",\n    \"Literal\",\n    \"Generic\",\n    \"Optional\",\n    \"Sequence\",\n    \"Set\",\n    \"Tuple\",\n    \"Type\",\n    \"Union\"\n  ];\n\n  const KEYWORDS = {\n    $pattern: /[A-Za-z]\\w+|__\\w+__/,\n    keyword: RESERVED_WORDS,\n    built_in: BUILT_INS,\n    literal: LITERALS,\n    type: TYPES\n  };\n\n  const PROMPT = {\n    className: 'meta',\n    begin: /^(>>>|\\.\\.\\.) /\n  };\n\n  const SUBST = {\n    className: 'subst',\n    begin: /\\{/,\n    end: /\\}/,\n    keywords: KEYWORDS,\n    illegal: /#/\n  };\n\n  const LITERAL_BRACKET = {\n    begin: /\\{\\{/,\n    relevance: 0\n  };\n\n  const STRING = {\n    className: 'string',\n    contains: [ hljs.BACKSLASH_ESCAPE ],\n    variants: [\n      {\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?'''/,\n        end: /'''/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT\n        ],\n        relevance: 10\n      },\n      {\n        begin: /([uU]|[bB]|[rR]|[bB][rR]|[rR][bB])?\"\"\"/,\n        end: /\"\"\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT\n        ],\n        relevance: 10\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])'''/,\n        end: /'''/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])\"\"\"/,\n        end: /\"\"\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          PROMPT,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([uU]|[rR])'/,\n        end: /'/,\n        relevance: 10\n      },\n      {\n        begin: /([uU]|[rR])\"/,\n        end: /\"/,\n        relevance: 10\n      },\n      {\n        begin: /([bB]|[bB][rR]|[rR][bB])'/,\n        end: /'/\n      },\n      {\n        begin: /([bB]|[bB][rR]|[rR][bB])\"/,\n        end: /\"/\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])'/,\n        end: /'/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      {\n        begin: /([fF][rR]|[rR][fF]|[fF])\"/,\n        end: /\"/,\n        contains: [\n          hljs.BACKSLASH_ESCAPE,\n          LITERAL_BRACKET,\n          SUBST\n        ]\n      },\n      hljs.APOS_STRING_MODE,\n      hljs.QUOTE_STRING_MODE\n    ]\n  };\n\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#numeric-literals\n  const digitpart = '[0-9](_?[0-9])*';\n  const pointfloat = `(\\\\b(${digitpart}))?\\\\.(${digitpart})|\\\\b(${digitpart})\\\\.`;\n  // Whitespace after a number (or any lexical token) is needed only if its absence\n  // would change the tokenization\n  // https://docs.python.org/3.9/reference/lexical_analysis.html#whitespace-between-tokens\n  // We deviate slightly, requiring a word boundary or a keyword\n  // to avoid accidentally recognizing *prefixes* (e.g., `0` in `0x41` or `08` or `0__1`)\n  const lookahead = `\\\\b|${RESERVED_WORDS.join('|')}`;\n  const NUMBER = {\n    className: 'number',\n    relevance: 0,\n    variants: [\n      // exponentfloat, pointfloat\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#floating-point-literals\n      // optionally imaginary\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      // Note: no leading \\b because floats can start with a decimal point\n      // and we don't want to mishandle e.g. `fn(.5)`,\n      // no trailing \\b for pointfloat because it can end with a decimal point\n      // and we don't want to mishandle e.g. `0..hex()`; this should be safe\n      // because both MUST contain a decimal point and so cannot be confused with\n      // the interior part of an identifier\n      {\n        begin: `(\\\\b(${digitpart})|(${pointfloat}))[eE][+-]?(${digitpart})[jJ]?(?=${lookahead})`\n      },\n      {\n        begin: `(${pointfloat})[jJ]?`\n      },\n\n      // decinteger, bininteger, octinteger, hexinteger\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#integer-literals\n      // optionally \"long\" in Python 2\n      // https://docs.python.org/2.7/reference/lexical_analysis.html#integer-and-long-integer-literals\n      // decinteger is optionally imaginary\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      {\n        begin: `\\\\b([1-9](_?[0-9])*|0+(_?0)*)[lLjJ]?(?=${lookahead})`\n      },\n      {\n        begin: `\\\\b0[bB](_?[01])+[lL]?(?=${lookahead})`\n      },\n      {\n        begin: `\\\\b0[oO](_?[0-7])+[lL]?(?=${lookahead})`\n      },\n      {\n        begin: `\\\\b0[xX](_?[0-9a-fA-F])+[lL]?(?=${lookahead})`\n      },\n\n      // imagnumber (digitpart-based)\n      // https://docs.python.org/3.9/reference/lexical_analysis.html#imaginary-literals\n      {\n        begin: `\\\\b(${digitpart})[jJ](?=${lookahead})`\n      }\n    ]\n  };\n  const COMMENT_TYPE = {\n    className: \"comment\",\n    begin: regex.lookahead(/# type:/),\n    end: /$/,\n    keywords: KEYWORDS,\n    contains: [\n      { // prevent keywords from coloring `type`\n        begin: /# type:/\n      },\n      // comment within a datatype comment includes no keywords\n      {\n        begin: /#/,\n        end: /\\b\\B/,\n        endsWithParent: true\n      }\n    ]\n  };\n  const PARAMS = {\n    className: 'params',\n    variants: [\n      // Exclude params in functions without params\n      {\n        className: \"\",\n        begin: /\\(\\s*\\)/,\n        skip: true\n      },\n      {\n        begin: /\\(/,\n        end: /\\)/,\n        excludeBegin: true,\n        excludeEnd: true,\n        keywords: KEYWORDS,\n        contains: [\n          'self',\n          PROMPT,\n          NUMBER,\n          STRING,\n          hljs.HASH_COMMENT_MODE\n        ]\n      }\n    ]\n  };\n  SUBST.contains = [\n    STRING,\n    NUMBER,\n    PROMPT\n  ];\n\n  return {\n    name: 'Python',\n    aliases: [\n      'py',\n      'gyp',\n      'ipython'\n    ],\n    unicodeRegex: true,\n    keywords: KEYWORDS,\n    illegal: /(<\\/|\\?)|=>/,\n    contains: [\n      PROMPT,\n      NUMBER,\n      {\n        // very common convention\n        scope: 'variable.language',\n        match: /\\bself\\b/\n      },\n      {\n        // eat \"if\" prior to string so that it won't accidentally be\n        // labeled as an f-string\n        beginKeywords: \"if\",\n        relevance: 0\n      },\n      { match: /\\bor\\b/, scope: \"keyword\" },\n      STRING,\n      COMMENT_TYPE,\n      hljs.HASH_COMMENT_MODE,\n      {\n        match: [\n          /\\bdef/, /\\s+/,\n          IDENT_RE,\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.function\"\n        },\n        contains: [ PARAMS ]\n      },\n      {\n        variants: [\n          {\n            match: [\n              /\\bclass/, /\\s+/,\n              IDENT_RE, /\\s*/,\n              /\\(\\s*/, IDENT_RE,/\\s*\\)/\n            ],\n          },\n          {\n            match: [\n              /\\bclass/, /\\s+/,\n              IDENT_RE\n            ],\n          }\n        ],\n        scope: {\n          1: \"keyword\",\n          3: \"title.class\",\n          6: \"title.class.inherited\",\n        }\n      },\n      {\n        className: 'meta',\n        begin: /^[\\t ]*@/,\n        end: /(?=#)|$/,\n        contains: [\n          NUMBER,\n          PARAMS,\n          STRING\n        ]\n      }\n    ]\n  };\n}\n\nexport { python as default };\n","/* eslint-disable no-multi-assign */\n\nfunction deepFreeze(obj) {\n  if (obj instanceof Map) {\n    obj.clear =\n      obj.delete =\n      obj.set =\n        function () {\n          throw new Error('map is read-only');\n        };\n  } else if (obj instanceof Set) {\n    obj.add =\n      obj.clear =\n      obj.delete =\n        function () {\n          throw new Error('set is read-only');\n        };\n  }\n\n  // Freeze self\n  Object.freeze(obj);\n\n  Object.getOwnPropertyNames(obj).forEach((name) => {\n    const prop = obj[name];\n    const type = typeof prop;\n\n    // Freeze prop if it is an object or function and also not already frozen\n    if ((type === 'object' || type === 'function') && !Object.isFrozen(prop)) {\n      deepFreeze(prop);\n    }\n  });\n\n  return obj;\n}\n\n/** @typedef {import('highlight.js').CallbackResponse} CallbackResponse */\n/** @typedef {import('highlight.js').CompiledMode} CompiledMode */\n/** @implements CallbackResponse */\n\nclass Response {\n  /**\n   * @param {CompiledMode} mode\n   */\n  constructor(mode) {\n    // eslint-disable-next-line no-undefined\n    if (mode.data === undefined) mode.data = {};\n\n    this.data = mode.data;\n    this.isMatchIgnored = false;\n  }\n\n  ignoreMatch() {\n    this.isMatchIgnored = true;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {string}\n */\nfunction escapeHTML(value) {\n  return value\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#x27;');\n}\n\n/**\n * performs a shallow merge of multiple objects into one\n *\n * @template T\n * @param {T} original\n * @param {Record<string,any>[]} objects\n * @returns {T} a single new object\n */\nfunction inherit$1(original, ...objects) {\n  /** @type Record<string,any> */\n  const result = Object.create(null);\n\n  for (const key in original) {\n    result[key] = original[key];\n  }\n  objects.forEach(function(obj) {\n    for (const key in obj) {\n      result[key] = obj[key];\n    }\n  });\n  return /** @type {T} */ (result);\n}\n\n/**\n * @typedef {object} Renderer\n * @property {(text: string) => void} addText\n * @property {(node: Node) => void} openNode\n * @property {(node: Node) => void} closeNode\n * @property {() => string} value\n */\n\n/** @typedef {{scope?: string, language?: string, sublanguage?: boolean}} Node */\n/** @typedef {{walk: (r: Renderer) => void}} Tree */\n/** */\n\nconst SPAN_CLOSE = '</span>';\n\n/**\n * Determines if a node needs to be wrapped in <span>\n *\n * @param {Node} node */\nconst emitsWrappingTags = (node) => {\n  // rarely we can have a sublanguage where language is undefined\n  // TODO: track down why\n  return !!node.scope;\n};\n\n/**\n *\n * @param {string} name\n * @param {{prefix:string}} options\n */\nconst scopeToCSSClass = (name, { prefix }) => {\n  // sub-language\n  if (name.startsWith(\"language:\")) {\n    return name.replace(\"language:\", \"language-\");\n  }\n  // tiered scope: comment.line\n  if (name.includes(\".\")) {\n    const pieces = name.split(\".\");\n    return [\n      `${prefix}${pieces.shift()}`,\n      ...(pieces.map((x, i) => `${x}${\"_\".repeat(i + 1)}`))\n    ].join(\" \");\n  }\n  // simple scope\n  return `${prefix}${name}`;\n};\n\n/** @type {Renderer} */\nclass HTMLRenderer {\n  /**\n   * Creates a new HTMLRenderer\n   *\n   * @param {Tree} parseTree - the parse tree (must support `walk` API)\n   * @param {{classPrefix: string}} options\n   */\n  constructor(parseTree, options) {\n    this.buffer = \"\";\n    this.classPrefix = options.classPrefix;\n    parseTree.walk(this);\n  }\n\n  /**\n   * Adds texts to the output stream\n   *\n   * @param {string} text */\n  addText(text) {\n    this.buffer += escapeHTML(text);\n  }\n\n  /**\n   * Adds a node open to the output stream (if needed)\n   *\n   * @param {Node} node */\n  openNode(node) {\n    if (!emitsWrappingTags(node)) return;\n\n    const className = scopeToCSSClass(node.scope,\n      { prefix: this.classPrefix });\n    this.span(className);\n  }\n\n  /**\n   * Adds a node close to the output stream (if needed)\n   *\n   * @param {Node} node */\n  closeNode(node) {\n    if (!emitsWrappingTags(node)) return;\n\n    this.buffer += SPAN_CLOSE;\n  }\n\n  /**\n   * returns the accumulated buffer\n  */\n  value() {\n    return this.buffer;\n  }\n\n  // helpers\n\n  /**\n   * Builds a span element\n   *\n   * @param {string} className */\n  span(className) {\n    this.buffer += `<span class=\"${className}\">`;\n  }\n}\n\n/** @typedef {{scope?: string, language?: string, children: Node[]} | string} Node */\n/** @typedef {{scope?: string, language?: string, children: Node[]} } DataNode */\n/** @typedef {import('highlight.js').Emitter} Emitter */\n/**  */\n\n/** @returns {DataNode} */\nconst newNode = (opts = {}) => {\n  /** @type DataNode */\n  const result = { children: [] };\n  Object.assign(result, opts);\n  return result;\n};\n\nclass TokenTree {\n  constructor() {\n    /** @type DataNode */\n    this.rootNode = newNode();\n    this.stack = [this.rootNode];\n  }\n\n  get top() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  get root() { return this.rootNode; }\n\n  /** @param {Node} node */\n  add(node) {\n    this.top.children.push(node);\n  }\n\n  /** @param {string} scope */\n  openNode(scope) {\n    /** @type Node */\n    const node = newNode({ scope });\n    this.add(node);\n    this.stack.push(node);\n  }\n\n  closeNode() {\n    if (this.stack.length > 1) {\n      return this.stack.pop();\n    }\n    // eslint-disable-next-line no-undefined\n    return undefined;\n  }\n\n  closeAllNodes() {\n    while (this.closeNode());\n  }\n\n  toJSON() {\n    return JSON.stringify(this.rootNode, null, 4);\n  }\n\n  /**\n   * @typedef { import(\"./html_renderer\").Renderer } Renderer\n   * @param {Renderer} builder\n   */\n  walk(builder) {\n    // this does not\n    return this.constructor._walk(builder, this.rootNode);\n    // this works\n    // return TokenTree._walk(builder, this.rootNode);\n  }\n\n  /**\n   * @param {Renderer} builder\n   * @param {Node} node\n   */\n  static _walk(builder, node) {\n    if (typeof node === \"string\") {\n      builder.addText(node);\n    } else if (node.children) {\n      builder.openNode(node);\n      node.children.forEach((child) => this._walk(builder, child));\n      builder.closeNode(node);\n    }\n    return builder;\n  }\n\n  /**\n   * @param {Node} node\n   */\n  static _collapse(node) {\n    if (typeof node === \"string\") return;\n    if (!node.children) return;\n\n    if (node.children.every(el => typeof el === \"string\")) {\n      // node.text = node.children.join(\"\");\n      // delete node.children;\n      node.children = [node.children.join(\"\")];\n    } else {\n      node.children.forEach((child) => {\n        TokenTree._collapse(child);\n      });\n    }\n  }\n}\n\n/**\n  Currently this is all private API, but this is the minimal API necessary\n  that an Emitter must implement to fully support the parser.\n\n  Minimal interface:\n\n  - addText(text)\n  - __addSublanguage(emitter, subLanguageName)\n  - startScope(scope)\n  - endScope()\n  - finalize()\n  - toHTML()\n\n*/\n\n/**\n * @implements {Emitter}\n */\nclass TokenTreeEmitter extends TokenTree {\n  /**\n   * @param {*} options\n   */\n  constructor(options) {\n    super();\n    this.options = options;\n  }\n\n  /**\n   * @param {string} text\n   */\n  addText(text) {\n    if (text === \"\") { return; }\n\n    this.add(text);\n  }\n\n  /** @param {string} scope */\n  startScope(scope) {\n    this.openNode(scope);\n  }\n\n  endScope() {\n    this.closeNode();\n  }\n\n  /**\n   * @param {Emitter & {root: DataNode}} emitter\n   * @param {string} name\n   */\n  __addSublanguage(emitter, name) {\n    /** @type DataNode */\n    const node = emitter.root;\n    if (name) node.scope = `language:${name}`;\n\n    this.add(node);\n  }\n\n  toHTML() {\n    const renderer = new HTMLRenderer(this, this.options);\n    return renderer.value();\n  }\n\n  finalize() {\n    this.closeAllNodes();\n    return true;\n  }\n}\n\n/**\n * @param {string} value\n * @returns {RegExp}\n * */\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction source(re) {\n  if (!re) return null;\n  if (typeof re === \"string\") return re;\n\n  return re.source;\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction lookahead(re) {\n  return concat('(?=', re, ')');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction anyNumberOfTimes(re) {\n  return concat('(?:', re, ')*');\n}\n\n/**\n * @param {RegExp | string } re\n * @returns {string}\n */\nfunction optional(re) {\n  return concat('(?:', re, ')?');\n}\n\n/**\n * @param {...(RegExp | string) } args\n * @returns {string}\n */\nfunction concat(...args) {\n  const joined = args.map((x) => source(x)).join(\"\");\n  return joined;\n}\n\n/**\n * @param { Array<string | RegExp | Object> } args\n * @returns {object}\n */\nfunction stripOptionsFromArgs(args) {\n  const opts = args[args.length - 1];\n\n  if (typeof opts === 'object' && opts.constructor === Object) {\n    args.splice(args.length - 1, 1);\n    return opts;\n  } else {\n    return {};\n  }\n}\n\n/** @typedef { {capture?: boolean} } RegexEitherOptions */\n\n/**\n * Any of the passed expresssions may match\n *\n * Creates a huge this | this | that | that match\n * @param {(RegExp | string)[] | [...(RegExp | string)[], RegexEitherOptions]} args\n * @returns {string}\n */\nfunction either(...args) {\n  /** @type { object & {capture?: boolean} }  */\n  const opts = stripOptionsFromArgs(args);\n  const joined = '('\n    + (opts.capture ? \"\" : \"?:\")\n    + args.map((x) => source(x)).join(\"|\") + \")\";\n  return joined;\n}\n\n/**\n * @param {RegExp | string} re\n * @returns {number}\n */\nfunction countMatchGroups(re) {\n  return (new RegExp(re.toString() + '|')).exec('').length - 1;\n}\n\n/**\n * Does lexeme start with a regular expression match at the beginning\n * @param {RegExp} re\n * @param {string} lexeme\n */\nfunction startsWith(re, lexeme) {\n  const match = re && re.exec(lexeme);\n  return match && match.index === 0;\n}\n\n// BACKREF_RE matches an open parenthesis or backreference. To avoid\n// an incorrect parse, it additionally matches the following:\n// - [...] elements, where the meaning of parentheses and escapes change\n// - other escape sequences, so we do not misparse escape sequences as\n//   interesting elements\n// - non-matching or lookahead parentheses, which do not capture. These\n//   follow the '(' with a '?'.\nconst BACKREF_RE = /\\[(?:[^\\\\\\]]|\\\\.)*\\]|\\(\\??|\\\\([1-9][0-9]*)|\\\\./;\n\n// **INTERNAL** Not intended for outside usage\n// join logically computes regexps.join(separator), but fixes the\n// backreferences so they continue to match.\n// it also places each individual regular expression into it's own\n// match group, keeping track of the sequencing of those match groups\n// is currently an exercise for the caller. :-)\n/**\n * @param {(string | RegExp)[]} regexps\n * @param {{joinWith: string}} opts\n * @returns {string}\n */\nfunction _rewriteBackreferences(regexps, { joinWith }) {\n  let numCaptures = 0;\n\n  return regexps.map((regex) => {\n    numCaptures += 1;\n    const offset = numCaptures;\n    let re = source(regex);\n    let out = '';\n\n    while (re.length > 0) {\n      const match = BACKREF_RE.exec(re);\n      if (!match) {\n        out += re;\n        break;\n      }\n      out += re.substring(0, match.index);\n      re = re.substring(match.index + match[0].length);\n      if (match[0][0] === '\\\\' && match[1]) {\n        // Adjust the backreference.\n        out += '\\\\' + String(Number(match[1]) + offset);\n      } else {\n        out += match[0];\n        if (match[0] === '(') {\n          numCaptures++;\n        }\n      }\n    }\n    return out;\n  }).map(re => `(${re})`).join(joinWith);\n}\n\n/** @typedef {import('highlight.js').Mode} Mode */\n/** @typedef {import('highlight.js').ModeCallback} ModeCallback */\n\n// Common regexps\nconst MATCH_NOTHING_RE = /\\b\\B/;\nconst IDENT_RE = '[a-zA-Z]\\\\w*';\nconst UNDERSCORE_IDENT_RE = '[a-zA-Z_]\\\\w*';\nconst NUMBER_RE = '\\\\b\\\\d+(\\\\.\\\\d+)?';\nconst C_NUMBER_RE = '(-?)(\\\\b0[xX][a-fA-F0-9]+|(\\\\b\\\\d+(\\\\.\\\\d*)?|\\\\.\\\\d+)([eE][-+]?\\\\d+)?)'; // 0x..., 0..., decimal, float\nconst BINARY_NUMBER_RE = '\\\\b(0b[01]+)'; // 0b...\nconst RE_STARTERS_RE = '!|!=|!==|%|%=|&|&&|&=|\\\\*|\\\\*=|\\\\+|\\\\+=|,|-|-=|/=|/|:|;|<<|<<=|<=|<|===|==|=|>>>=|>>=|>=|>>>|>>|>|\\\\?|\\\\[|\\\\{|\\\\(|\\\\^|\\\\^=|\\\\||\\\\|=|\\\\|\\\\||~';\n\n/**\n* @param { Partial<Mode> & {binary?: string | RegExp} } opts\n*/\nconst SHEBANG = (opts = {}) => {\n  const beginShebang = /^#![ ]*\\//;\n  if (opts.binary) {\n    opts.begin = concat(\n      beginShebang,\n      /.*\\b/,\n      opts.binary,\n      /\\b.*/);\n  }\n  return inherit$1({\n    scope: 'meta',\n    begin: beginShebang,\n    end: /$/,\n    relevance: 0,\n    /** @type {ModeCallback} */\n    \"on:begin\": (m, resp) => {\n      if (m.index !== 0) resp.ignoreMatch();\n    }\n  }, opts);\n};\n\n// Common modes\nconst BACKSLASH_ESCAPE = {\n  begin: '\\\\\\\\[\\\\s\\\\S]', relevance: 0\n};\nconst APOS_STRING_MODE = {\n  scope: 'string',\n  begin: '\\'',\n  end: '\\'',\n  illegal: '\\\\n',\n  contains: [BACKSLASH_ESCAPE]\n};\nconst QUOTE_STRING_MODE = {\n  scope: 'string',\n  begin: '\"',\n  end: '\"',\n  illegal: '\\\\n',\n  contains: [BACKSLASH_ESCAPE]\n};\nconst PHRASAL_WORDS_MODE = {\n  begin: /\\b(a|an|the|are|I'm|isn't|don't|doesn't|won't|but|just|should|pretty|simply|enough|gonna|going|wtf|so|such|will|you|your|they|like|more)\\b/\n};\n/**\n * Creates a comment mode\n *\n * @param {string | RegExp} begin\n * @param {string | RegExp} end\n * @param {Mode | {}} [modeOptions]\n * @returns {Partial<Mode>}\n */\nconst COMMENT = function(begin, end, modeOptions = {}) {\n  const mode = inherit$1(\n    {\n      scope: 'comment',\n      begin,\n      end,\n      contains: []\n    },\n    modeOptions\n  );\n  mode.contains.push({\n    scope: 'doctag',\n    // hack to avoid the space from being included. the space is necessary to\n    // match here to prevent the plain text rule below from gobbling up doctags\n    begin: '[ ]*(?=(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):)',\n    end: /(TODO|FIXME|NOTE|BUG|OPTIMIZE|HACK|XXX):/,\n    excludeBegin: true,\n    relevance: 0\n  });\n  const ENGLISH_WORD = either(\n    // list of common 1 and 2 letter words in English\n    \"I\",\n    \"a\",\n    \"is\",\n    \"so\",\n    \"us\",\n    \"to\",\n    \"at\",\n    \"if\",\n    \"in\",\n    \"it\",\n    \"on\",\n    // note: this is not an exhaustive list of contractions, just popular ones\n    /[A-Za-z]+['](d|ve|re|ll|t|s|n)/, // contractions - can't we'd they're let's, etc\n    /[A-Za-z]+[-][a-z]+/, // `no-way`, etc.\n    /[A-Za-z][a-z]{2,}/ // allow capitalized words at beginning of sentences\n  );\n  // looking like plain text, more likely to be a comment\n  mode.contains.push(\n    {\n      // TODO: how to include \", (, ) without breaking grammars that use these for\n      // comment delimiters?\n      // begin: /[ ]+([()\"]?([A-Za-z'-]{3,}|is|a|I|so|us|[tT][oO]|at|if|in|it|on)[.]?[()\":]?([.][ ]|[ ]|\\))){3}/\n      // ---\n\n      // this tries to find sequences of 3 english words in a row (without any\n      // \"programming\" type syntax) this gives us a strong signal that we've\n      // TRULY found a comment - vs perhaps scanning with the wrong language.\n      // It's possible to find something that LOOKS like the start of the\n      // comment - but then if there is no readable text - good chance it is a\n      // false match and not a comment.\n      //\n      // for a visual example please see:\n      // https://github.com/highlightjs/highlight.js/issues/2827\n\n      begin: concat(\n        /[ ]+/, // necessary to prevent us gobbling up doctags like /* @author Bob Mcgill */\n        '(',\n        ENGLISH_WORD,\n        /[.]?[:]?([.][ ]|[ ])/,\n        '){3}') // look for 3 words in a row\n    }\n  );\n  return mode;\n};\nconst C_LINE_COMMENT_MODE = COMMENT('//', '$');\nconst C_BLOCK_COMMENT_MODE = COMMENT('/\\\\*', '\\\\*/');\nconst HASH_COMMENT_MODE = COMMENT('#', '$');\nconst NUMBER_MODE = {\n  scope: 'number',\n  begin: NUMBER_RE,\n  relevance: 0\n};\nconst C_NUMBER_MODE = {\n  scope: 'number',\n  begin: C_NUMBER_RE,\n  relevance: 0\n};\nconst BINARY_NUMBER_MODE = {\n  scope: 'number',\n  begin: BINARY_NUMBER_RE,\n  relevance: 0\n};\nconst REGEXP_MODE = {\n  scope: \"regexp\",\n  begin: /\\/(?=[^/\\n]*\\/)/,\n  end: /\\/[gimuy]*/,\n  contains: [\n    BACKSLASH_ESCAPE,\n    {\n      begin: /\\[/,\n      end: /\\]/,\n      relevance: 0,\n      contains: [BACKSLASH_ESCAPE]\n    }\n  ]\n};\nconst TITLE_MODE = {\n  scope: 'title',\n  begin: IDENT_RE,\n  relevance: 0\n};\nconst UNDERSCORE_TITLE_MODE = {\n  scope: 'title',\n  begin: UNDERSCORE_IDENT_RE,\n  relevance: 0\n};\nconst METHOD_GUARD = {\n  // excludes method names from keyword processing\n  begin: '\\\\.\\\\s*' + UNDERSCORE_IDENT_RE,\n  relevance: 0\n};\n\n/**\n * Adds end same as begin mechanics to a mode\n *\n * Your mode must include at least a single () match group as that first match\n * group is what is used for comparison\n * @param {Partial<Mode>} mode\n */\nconst END_SAME_AS_BEGIN = function(mode) {\n  return Object.assign(mode,\n    {\n      /** @type {ModeCallback} */\n      'on:begin': (m, resp) => { resp.data._beginMatch = m[1]; },\n      /** @type {ModeCallback} */\n      'on:end': (m, resp) => { if (resp.data._beginMatch !== m[1]) resp.ignoreMatch(); }\n    });\n};\n\nvar MODES = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  APOS_STRING_MODE: APOS_STRING_MODE,\n  BACKSLASH_ESCAPE: BACKSLASH_ESCAPE,\n  BINARY_NUMBER_MODE: BINARY_NUMBER_MODE,\n  BINARY_NUMBER_RE: BINARY_NUMBER_RE,\n  COMMENT: COMMENT,\n  C_BLOCK_COMMENT_MODE: C_BLOCK_COMMENT_MODE,\n  C_LINE_COMMENT_MODE: C_LINE_COMMENT_MODE,\n  C_NUMBER_MODE: C_NUMBER_MODE,\n  C_NUMBER_RE: C_NUMBER_RE,\n  END_SAME_AS_BEGIN: END_SAME_AS_BEGIN,\n  HASH_COMMENT_MODE: HASH_COMMENT_MODE,\n  IDENT_RE: IDENT_RE,\n  MATCH_NOTHING_RE: MATCH_NOTHING_RE,\n  METHOD_GUARD: METHOD_GUARD,\n  NUMBER_MODE: NUMBER_MODE,\n  NUMBER_RE: NUMBER_RE,\n  PHRASAL_WORDS_MODE: PHRASAL_WORDS_MODE,\n  QUOTE_STRING_MODE: QUOTE_STRING_MODE,\n  REGEXP_MODE: REGEXP_MODE,\n  RE_STARTERS_RE: RE_STARTERS_RE,\n  SHEBANG: SHEBANG,\n  TITLE_MODE: TITLE_MODE,\n  UNDERSCORE_IDENT_RE: UNDERSCORE_IDENT_RE,\n  UNDERSCORE_TITLE_MODE: UNDERSCORE_TITLE_MODE\n});\n\n/**\n@typedef {import('highlight.js').CallbackResponse} CallbackResponse\n@typedef {import('highlight.js').CompilerExt} CompilerExt\n*/\n\n// Grammar extensions / plugins\n// See: https://github.com/highlightjs/highlight.js/issues/2833\n\n// Grammar extensions allow \"syntactic sugar\" to be added to the grammar modes\n// without requiring any underlying changes to the compiler internals.\n\n// `compileMatch` being the perfect small example of now allowing a grammar\n// author to write `match` when they desire to match a single expression rather\n// than being forced to use `begin`.  The extension then just moves `match` into\n// `begin` when it runs.  Ie, no features have been added, but we've just made\n// the experience of writing (and reading grammars) a little bit nicer.\n\n// ------\n\n// TODO: We need negative look-behind support to do this properly\n/**\n * Skip a match if it has a preceding dot\n *\n * This is used for `beginKeywords` to prevent matching expressions such as\n * `bob.keyword.do()`. The mode compiler automatically wires this up as a\n * special _internal_ 'on:begin' callback for modes with `beginKeywords`\n * @param {RegExpMatchArray} match\n * @param {CallbackResponse} response\n */\nfunction skipIfHasPrecedingDot(match, response) {\n  const before = match.input[match.index - 1];\n  if (before === \".\") {\n    response.ignoreMatch();\n  }\n}\n\n/**\n *\n * @type {CompilerExt}\n */\nfunction scopeClassName(mode, _parent) {\n  // eslint-disable-next-line no-undefined\n  if (mode.className !== undefined) {\n    mode.scope = mode.className;\n    delete mode.className;\n  }\n}\n\n/**\n * `beginKeywords` syntactic sugar\n * @type {CompilerExt}\n */\nfunction beginKeywords(mode, parent) {\n  if (!parent) return;\n  if (!mode.beginKeywords) return;\n\n  // for languages with keywords that include non-word characters checking for\n  // a word boundary is not sufficient, so instead we check for a word boundary\n  // or whitespace - this does no harm in any case since our keyword engine\n  // doesn't allow spaces in keywords anyways and we still check for the boundary\n  // first\n  mode.begin = '\\\\b(' + mode.beginKeywords.split(' ').join('|') + ')(?!\\\\.)(?=\\\\b|\\\\s)';\n  mode.__beforeBegin = skipIfHasPrecedingDot;\n  mode.keywords = mode.keywords || mode.beginKeywords;\n  delete mode.beginKeywords;\n\n  // prevents double relevance, the keywords themselves provide\n  // relevance, the mode doesn't need to double it\n  // eslint-disable-next-line no-undefined\n  if (mode.relevance === undefined) mode.relevance = 0;\n}\n\n/**\n * Allow `illegal` to contain an array of illegal values\n * @type {CompilerExt}\n */\nfunction compileIllegal(mode, _parent) {\n  if (!Array.isArray(mode.illegal)) return;\n\n  mode.illegal = either(...mode.illegal);\n}\n\n/**\n * `match` to match a single expression for readability\n * @type {CompilerExt}\n */\nfunction compileMatch(mode, _parent) {\n  if (!mode.match) return;\n  if (mode.begin || mode.end) throw new Error(\"begin & end are not supported with match\");\n\n  mode.begin = mode.match;\n  delete mode.match;\n}\n\n/**\n * provides the default 1 relevance to all modes\n * @type {CompilerExt}\n */\nfunction compileRelevance(mode, _parent) {\n  // eslint-disable-next-line no-undefined\n  if (mode.relevance === undefined) mode.relevance = 1;\n}\n\n// allow beforeMatch to act as a \"qualifier\" for the match\n// the full match begin must be [beforeMatch][begin]\nconst beforeMatchExt = (mode, parent) => {\n  if (!mode.beforeMatch) return;\n  // starts conflicts with endsParent which we need to make sure the child\n  // rule is not matched multiple times\n  if (mode.starts) throw new Error(\"beforeMatch cannot be used with starts\");\n\n  const originalMode = Object.assign({}, mode);\n  Object.keys(mode).forEach((key) => { delete mode[key]; });\n\n  mode.keywords = originalMode.keywords;\n  mode.begin = concat(originalMode.beforeMatch, lookahead(originalMode.begin));\n  mode.starts = {\n    relevance: 0,\n    contains: [\n      Object.assign(originalMode, { endsParent: true })\n    ]\n  };\n  mode.relevance = 0;\n\n  delete originalMode.beforeMatch;\n};\n\n// keywords that should have no default relevance value\nconst COMMON_KEYWORDS = [\n  'of',\n  'and',\n  'for',\n  'in',\n  'not',\n  'or',\n  'if',\n  'then',\n  'parent', // common variable name\n  'list', // common variable name\n  'value' // common variable name\n];\n\nconst DEFAULT_KEYWORD_SCOPE = \"keyword\";\n\n/**\n * Given raw keywords from a language definition, compile them.\n *\n * @param {string | Record<string,string|string[]> | Array<string>} rawKeywords\n * @param {boolean} caseInsensitive\n */\nfunction compileKeywords(rawKeywords, caseInsensitive, scopeName = DEFAULT_KEYWORD_SCOPE) {\n  /** @type {import(\"highlight.js/private\").KeywordDict} */\n  const compiledKeywords = Object.create(null);\n\n  // input can be a string of keywords, an array of keywords, or a object with\n  // named keys representing scopeName (which can then point to a string or array)\n  if (typeof rawKeywords === 'string') {\n    compileList(scopeName, rawKeywords.split(\" \"));\n  } else if (Array.isArray(rawKeywords)) {\n    compileList(scopeName, rawKeywords);\n  } else {\n    Object.keys(rawKeywords).forEach(function(scopeName) {\n      // collapse all our objects back into the parent object\n      Object.assign(\n        compiledKeywords,\n        compileKeywords(rawKeywords[scopeName], caseInsensitive, scopeName)\n      );\n    });\n  }\n  return compiledKeywords;\n\n  // ---\n\n  /**\n   * Compiles an individual list of keywords\n   *\n   * Ex: \"for if when while|5\"\n   *\n   * @param {string} scopeName\n   * @param {Array<string>} keywordList\n   */\n  function compileList(scopeName, keywordList) {\n    if (caseInsensitive) {\n      keywordList = keywordList.map(x => x.toLowerCase());\n    }\n    keywordList.forEach(function(keyword) {\n      const pair = keyword.split('|');\n      compiledKeywords[pair[0]] = [scopeName, scoreForKeyword(pair[0], pair[1])];\n    });\n  }\n}\n\n/**\n * Returns the proper score for a given keyword\n *\n * Also takes into account comment keywords, which will be scored 0 UNLESS\n * another score has been manually assigned.\n * @param {string} keyword\n * @param {string} [providedScore]\n */\nfunction scoreForKeyword(keyword, providedScore) {\n  // manual scores always win over common keywords\n  // so you can force a score of 1 if you really insist\n  if (providedScore) {\n    return Number(providedScore);\n  }\n\n  return commonKeyword(keyword) ? 0 : 1;\n}\n\n/**\n * Determines if a given keyword is common or not\n *\n * @param {string} keyword */\nfunction commonKeyword(keyword) {\n  return COMMON_KEYWORDS.includes(keyword.toLowerCase());\n}\n\n/*\n\nFor the reasoning behind this please see:\nhttps://github.com/highlightjs/highlight.js/issues/2880#issuecomment-747275419\n\n*/\n\n/**\n * @type {Record<string, boolean>}\n */\nconst seenDeprecations = {};\n\n/**\n * @param {string} message\n */\nconst error = (message) => {\n  console.error(message);\n};\n\n/**\n * @param {string} message\n * @param {any} args\n */\nconst warn = (message, ...args) => {\n  console.log(`WARN: ${message}`, ...args);\n};\n\n/**\n * @param {string} version\n * @param {string} message\n */\nconst deprecated = (version, message) => {\n  if (seenDeprecations[`${version}/${message}`]) return;\n\n  console.log(`Deprecated as of ${version}. ${message}`);\n  seenDeprecations[`${version}/${message}`] = true;\n};\n\n/* eslint-disable no-throw-literal */\n\n/**\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n*/\n\nconst MultiClassError = new Error();\n\n/**\n * Renumbers labeled scope names to account for additional inner match\n * groups that otherwise would break everything.\n *\n * Lets say we 3 match scopes:\n *\n *   { 1 => ..., 2 => ..., 3 => ... }\n *\n * So what we need is a clean match like this:\n *\n *   (a)(b)(c) => [ \"a\", \"b\", \"c\" ]\n *\n * But this falls apart with inner match groups:\n *\n * (a)(((b)))(c) => [\"a\", \"b\", \"b\", \"b\", \"c\" ]\n *\n * Our scopes are now \"out of alignment\" and we're repeating `b` 3 times.\n * What needs to happen is the numbers are remapped:\n *\n *   { 1 => ..., 2 => ..., 5 => ... }\n *\n * We also need to know that the ONLY groups that should be output\n * are 1, 2, and 5.  This function handles this behavior.\n *\n * @param {CompiledMode} mode\n * @param {Array<RegExp | string>} regexes\n * @param {{key: \"beginScope\"|\"endScope\"}} opts\n */\nfunction remapScopeNames(mode, regexes, { key }) {\n  let offset = 0;\n  const scopeNames = mode[key];\n  /** @type Record<number,boolean> */\n  const emit = {};\n  /** @type Record<number,string> */\n  const positions = {};\n\n  for (let i = 1; i <= regexes.length; i++) {\n    positions[i + offset] = scopeNames[i];\n    emit[i + offset] = true;\n    offset += countMatchGroups(regexes[i - 1]);\n  }\n  // we use _emit to keep track of which match groups are \"top-level\" to avoid double\n  // output from inside match groups\n  mode[key] = positions;\n  mode[key]._emit = emit;\n  mode[key]._multi = true;\n}\n\n/**\n * @param {CompiledMode} mode\n */\nfunction beginMultiClass(mode) {\n  if (!Array.isArray(mode.begin)) return;\n\n  if (mode.skip || mode.excludeBegin || mode.returnBegin) {\n    error(\"skip, excludeBegin, returnBegin not compatible with beginScope: {}\");\n    throw MultiClassError;\n  }\n\n  if (typeof mode.beginScope !== \"object\" || mode.beginScope === null) {\n    error(\"beginScope must be object\");\n    throw MultiClassError;\n  }\n\n  remapScopeNames(mode, mode.begin, { key: \"beginScope\" });\n  mode.begin = _rewriteBackreferences(mode.begin, { joinWith: \"\" });\n}\n\n/**\n * @param {CompiledMode} mode\n */\nfunction endMultiClass(mode) {\n  if (!Array.isArray(mode.end)) return;\n\n  if (mode.skip || mode.excludeEnd || mode.returnEnd) {\n    error(\"skip, excludeEnd, returnEnd not compatible with endScope: {}\");\n    throw MultiClassError;\n  }\n\n  if (typeof mode.endScope !== \"object\" || mode.endScope === null) {\n    error(\"endScope must be object\");\n    throw MultiClassError;\n  }\n\n  remapScopeNames(mode, mode.end, { key: \"endScope\" });\n  mode.end = _rewriteBackreferences(mode.end, { joinWith: \"\" });\n}\n\n/**\n * this exists only to allow `scope: {}` to be used beside `match:`\n * Otherwise `beginScope` would necessary and that would look weird\n\n  {\n    match: [ /def/, /\\w+/ ]\n    scope: { 1: \"keyword\" , 2: \"title\" }\n  }\n\n * @param {CompiledMode} mode\n */\nfunction scopeSugar(mode) {\n  if (mode.scope && typeof mode.scope === \"object\" && mode.scope !== null) {\n    mode.beginScope = mode.scope;\n    delete mode.scope;\n  }\n}\n\n/**\n * @param {CompiledMode} mode\n */\nfunction MultiClass(mode) {\n  scopeSugar(mode);\n\n  if (typeof mode.beginScope === \"string\") {\n    mode.beginScope = { _wrap: mode.beginScope };\n  }\n  if (typeof mode.endScope === \"string\") {\n    mode.endScope = { _wrap: mode.endScope };\n  }\n\n  beginMultiClass(mode);\n  endMultiClass(mode);\n}\n\n/**\n@typedef {import('highlight.js').Mode} Mode\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n@typedef {import('highlight.js').Language} Language\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\n@typedef {import('highlight.js').CompiledLanguage} CompiledLanguage\n*/\n\n// compilation\n\n/**\n * Compiles a language definition result\n *\n * Given the raw result of a language definition (Language), compiles this so\n * that it is ready for highlighting code.\n * @param {Language} language\n * @returns {CompiledLanguage}\n */\nfunction compileLanguage(language) {\n  /**\n   * Builds a regex with the case sensitivity of the current language\n   *\n   * @param {RegExp | string} value\n   * @param {boolean} [global]\n   */\n  function langRe(value, global) {\n    return new RegExp(\n      source(value),\n      'm'\n      + (language.case_insensitive ? 'i' : '')\n      + (language.unicodeRegex ? 'u' : '')\n      + (global ? 'g' : '')\n    );\n  }\n\n  /**\n    Stores multiple regular expressions and allows you to quickly search for\n    them all in a string simultaneously - returning the first match.  It does\n    this by creating a huge (a|b|c) regex - each individual item wrapped with ()\n    and joined by `|` - using match groups to track position.  When a match is\n    found checking which position in the array has content allows us to figure\n    out which of the original regexes / match groups triggered the match.\n\n    The match object itself (the result of `Regex.exec`) is returned but also\n    enhanced by merging in any meta-data that was registered with the regex.\n    This is how we keep track of which mode matched, and what type of rule\n    (`illegal`, `begin`, end, etc).\n  */\n  class MultiRegex {\n    constructor() {\n      this.matchIndexes = {};\n      // @ts-ignore\n      this.regexes = [];\n      this.matchAt = 1;\n      this.position = 0;\n    }\n\n    // @ts-ignore\n    addRule(re, opts) {\n      opts.position = this.position++;\n      // @ts-ignore\n      this.matchIndexes[this.matchAt] = opts;\n      this.regexes.push([opts, re]);\n      this.matchAt += countMatchGroups(re) + 1;\n    }\n\n    compile() {\n      if (this.regexes.length === 0) {\n        // avoids the need to check length every time exec is called\n        // @ts-ignore\n        this.exec = () => null;\n      }\n      const terminators = this.regexes.map(el => el[1]);\n      this.matcherRe = langRe(_rewriteBackreferences(terminators, { joinWith: '|' }), true);\n      this.lastIndex = 0;\n    }\n\n    /** @param {string} s */\n    exec(s) {\n      this.matcherRe.lastIndex = this.lastIndex;\n      const match = this.matcherRe.exec(s);\n      if (!match) { return null; }\n\n      // eslint-disable-next-line no-undefined\n      const i = match.findIndex((el, i) => i > 0 && el !== undefined);\n      // @ts-ignore\n      const matchData = this.matchIndexes[i];\n      // trim off any earlier non-relevant match groups (ie, the other regex\n      // match groups that make up the multi-matcher)\n      match.splice(0, i);\n\n      return Object.assign(match, matchData);\n    }\n  }\n\n  /*\n    Created to solve the key deficiently with MultiRegex - there is no way to\n    test for multiple matches at a single location.  Why would we need to do\n    that?  In the future a more dynamic engine will allow certain matches to be\n    ignored.  An example: if we matched say the 3rd regex in a large group but\n    decided to ignore it - we'd need to started testing again at the 4th\n    regex... but MultiRegex itself gives us no real way to do that.\n\n    So what this class creates MultiRegexs on the fly for whatever search\n    position they are needed.\n\n    NOTE: These additional MultiRegex objects are created dynamically.  For most\n    grammars most of the time we will never actually need anything more than the\n    first MultiRegex - so this shouldn't have too much overhead.\n\n    Say this is our search group, and we match regex3, but wish to ignore it.\n\n      regex1 | regex2 | regex3 | regex4 | regex5    ' ie, startAt = 0\n\n    What we need is a new MultiRegex that only includes the remaining\n    possibilities:\n\n      regex4 | regex5                               ' ie, startAt = 3\n\n    This class wraps all that complexity up in a simple API... `startAt` decides\n    where in the array of expressions to start doing the matching. It\n    auto-increments, so if a match is found at position 2, then startAt will be\n    set to 3.  If the end is reached startAt will return to 0.\n\n    MOST of the time the parser will be setting startAt manually to 0.\n  */\n  class ResumableMultiRegex {\n    constructor() {\n      // @ts-ignore\n      this.rules = [];\n      // @ts-ignore\n      this.multiRegexes = [];\n      this.count = 0;\n\n      this.lastIndex = 0;\n      this.regexIndex = 0;\n    }\n\n    // @ts-ignore\n    getMatcher(index) {\n      if (this.multiRegexes[index]) return this.multiRegexes[index];\n\n      const matcher = new MultiRegex();\n      this.rules.slice(index).forEach(([re, opts]) => matcher.addRule(re, opts));\n      matcher.compile();\n      this.multiRegexes[index] = matcher;\n      return matcher;\n    }\n\n    resumingScanAtSamePosition() {\n      return this.regexIndex !== 0;\n    }\n\n    considerAll() {\n      this.regexIndex = 0;\n    }\n\n    // @ts-ignore\n    addRule(re, opts) {\n      this.rules.push([re, opts]);\n      if (opts.type === \"begin\") this.count++;\n    }\n\n    /** @param {string} s */\n    exec(s) {\n      const m = this.getMatcher(this.regexIndex);\n      m.lastIndex = this.lastIndex;\n      let result = m.exec(s);\n\n      // The following is because we have no easy way to say \"resume scanning at the\n      // existing position but also skip the current rule ONLY\". What happens is\n      // all prior rules are also skipped which can result in matching the wrong\n      // thing. Example of matching \"booger\":\n\n      // our matcher is [string, \"booger\", number]\n      //\n      // ....booger....\n\n      // if \"booger\" is ignored then we'd really need a regex to scan from the\n      // SAME position for only: [string, number] but ignoring \"booger\" (if it\n      // was the first match), a simple resume would scan ahead who knows how\n      // far looking only for \"number\", ignoring potential string matches (or\n      // future \"booger\" matches that might be valid.)\n\n      // So what we do: We execute two matchers, one resuming at the same\n      // position, but the second full matcher starting at the position after:\n\n      //     /--- resume first regex match here (for [number])\n      //     |/---- full match here for [string, \"booger\", number]\n      //     vv\n      // ....booger....\n\n      // Which ever results in a match first is then used. So this 3-4 step\n      // process essentially allows us to say \"match at this position, excluding\n      // a prior rule that was ignored\".\n      //\n      // 1. Match \"booger\" first, ignore. Also proves that [string] does non match.\n      // 2. Resume matching for [number]\n      // 3. Match at index + 1 for [string, \"booger\", number]\n      // 4. If #2 and #3 result in matches, which came first?\n      if (this.resumingScanAtSamePosition()) {\n        if (result && result.index === this.lastIndex) ; else { // use the second matcher result\n          const m2 = this.getMatcher(0);\n          m2.lastIndex = this.lastIndex + 1;\n          result = m2.exec(s);\n        }\n      }\n\n      if (result) {\n        this.regexIndex += result.position + 1;\n        if (this.regexIndex === this.count) {\n          // wrap-around to considering all matches again\n          this.considerAll();\n        }\n      }\n\n      return result;\n    }\n  }\n\n  /**\n   * Given a mode, builds a huge ResumableMultiRegex that can be used to walk\n   * the content and find matches.\n   *\n   * @param {CompiledMode} mode\n   * @returns {ResumableMultiRegex}\n   */\n  function buildModeRegex(mode) {\n    const mm = new ResumableMultiRegex();\n\n    mode.contains.forEach(term => mm.addRule(term.begin, { rule: term, type: \"begin\" }));\n\n    if (mode.terminatorEnd) {\n      mm.addRule(mode.terminatorEnd, { type: \"end\" });\n    }\n    if (mode.illegal) {\n      mm.addRule(mode.illegal, { type: \"illegal\" });\n    }\n\n    return mm;\n  }\n\n  /** skip vs abort vs ignore\n   *\n   * @skip   - The mode is still entered and exited normally (and contains rules apply),\n   *           but all content is held and added to the parent buffer rather than being\n   *           output when the mode ends.  Mostly used with `sublanguage` to build up\n   *           a single large buffer than can be parsed by sublanguage.\n   *\n   *             - The mode begin ands ends normally.\n   *             - Content matched is added to the parent mode buffer.\n   *             - The parser cursor is moved forward normally.\n   *\n   * @abort  - A hack placeholder until we have ignore.  Aborts the mode (as if it\n   *           never matched) but DOES NOT continue to match subsequent `contains`\n   *           modes.  Abort is bad/suboptimal because it can result in modes\n   *           farther down not getting applied because an earlier rule eats the\n   *           content but then aborts.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is added to the mode buffer.\n   *             - The parser cursor is moved forward accordingly.\n   *\n   * @ignore - Ignores the mode (as if it never matched) and continues to match any\n   *           subsequent `contains` modes.  Ignore isn't technically possible with\n   *           the current parser implementation.\n   *\n   *             - The mode does not begin.\n   *             - Content matched by `begin` is ignored.\n   *             - The parser cursor is not moved forward.\n   */\n\n  /**\n   * Compiles an individual mode\n   *\n   * This can raise an error if the mode contains certain detectable known logic\n   * issues.\n   * @param {Mode} mode\n   * @param {CompiledMode | null} [parent]\n   * @returns {CompiledMode | never}\n   */\n  function compileMode(mode, parent) {\n    const cmode = /** @type CompiledMode */ (mode);\n    if (mode.isCompiled) return cmode;\n\n    [\n      scopeClassName,\n      // do this early so compiler extensions generally don't have to worry about\n      // the distinction between match/begin\n      compileMatch,\n      MultiClass,\n      beforeMatchExt\n    ].forEach(ext => ext(mode, parent));\n\n    language.compilerExtensions.forEach(ext => ext(mode, parent));\n\n    // __beforeBegin is considered private API, internal use only\n    mode.__beforeBegin = null;\n\n    [\n      beginKeywords,\n      // do this later so compiler extensions that come earlier have access to the\n      // raw array if they wanted to perhaps manipulate it, etc.\n      compileIllegal,\n      // default to 1 relevance if not specified\n      compileRelevance\n    ].forEach(ext => ext(mode, parent));\n\n    mode.isCompiled = true;\n\n    let keywordPattern = null;\n    if (typeof mode.keywords === \"object\" && mode.keywords.$pattern) {\n      // we need a copy because keywords might be compiled multiple times\n      // so we can't go deleting $pattern from the original on the first\n      // pass\n      mode.keywords = Object.assign({}, mode.keywords);\n      keywordPattern = mode.keywords.$pattern;\n      delete mode.keywords.$pattern;\n    }\n    keywordPattern = keywordPattern || /\\w+/;\n\n    if (mode.keywords) {\n      mode.keywords = compileKeywords(mode.keywords, language.case_insensitive);\n    }\n\n    cmode.keywordPatternRe = langRe(keywordPattern, true);\n\n    if (parent) {\n      if (!mode.begin) mode.begin = /\\B|\\b/;\n      cmode.beginRe = langRe(cmode.begin);\n      if (!mode.end && !mode.endsWithParent) mode.end = /\\B|\\b/;\n      if (mode.end) cmode.endRe = langRe(cmode.end);\n      cmode.terminatorEnd = source(cmode.end) || '';\n      if (mode.endsWithParent && parent.terminatorEnd) {\n        cmode.terminatorEnd += (mode.end ? '|' : '') + parent.terminatorEnd;\n      }\n    }\n    if (mode.illegal) cmode.illegalRe = langRe(/** @type {RegExp | string} */ (mode.illegal));\n    if (!mode.contains) mode.contains = [];\n\n    mode.contains = [].concat(...mode.contains.map(function(c) {\n      return expandOrCloneMode(c === 'self' ? mode : c);\n    }));\n    mode.contains.forEach(function(c) { compileMode(/** @type Mode */ (c), cmode); });\n\n    if (mode.starts) {\n      compileMode(mode.starts, parent);\n    }\n\n    cmode.matcher = buildModeRegex(cmode);\n    return cmode;\n  }\n\n  if (!language.compilerExtensions) language.compilerExtensions = [];\n\n  // self is not valid at the top-level\n  if (language.contains && language.contains.includes('self')) {\n    throw new Error(\"ERR: contains `self` is not supported at the top-level of a language.  See documentation.\");\n  }\n\n  // we need a null object, which inherit will guarantee\n  language.classNameAliases = inherit$1(language.classNameAliases || {});\n\n  return compileMode(/** @type Mode */ (language));\n}\n\n/**\n * Determines if a mode has a dependency on it's parent or not\n *\n * If a mode does have a parent dependency then often we need to clone it if\n * it's used in multiple places so that each copy points to the correct parent,\n * where-as modes without a parent can often safely be re-used at the bottom of\n * a mode chain.\n *\n * @param {Mode | null} mode\n * @returns {boolean} - is there a dependency on the parent?\n * */\nfunction dependencyOnParent(mode) {\n  if (!mode) return false;\n\n  return mode.endsWithParent || dependencyOnParent(mode.starts);\n}\n\n/**\n * Expands a mode or clones it if necessary\n *\n * This is necessary for modes with parental dependenceis (see notes on\n * `dependencyOnParent`) and for nodes that have `variants` - which must then be\n * exploded into their own individual modes at compile time.\n *\n * @param {Mode} mode\n * @returns {Mode | Mode[]}\n * */\nfunction expandOrCloneMode(mode) {\n  if (mode.variants && !mode.cachedVariants) {\n    mode.cachedVariants = mode.variants.map(function(variant) {\n      return inherit$1(mode, { variants: null }, variant);\n    });\n  }\n\n  // EXPAND\n  // if we have variants then essentially \"replace\" the mode with the variants\n  // this happens in compileMode, where this function is called from\n  if (mode.cachedVariants) {\n    return mode.cachedVariants;\n  }\n\n  // CLONE\n  // if we have dependencies on parents then we need a unique\n  // instance of ourselves, so we can be reused with many\n  // different parents without issue\n  if (dependencyOnParent(mode)) {\n    return inherit$1(mode, { starts: mode.starts ? inherit$1(mode.starts) : null });\n  }\n\n  if (Object.isFrozen(mode)) {\n    return inherit$1(mode);\n  }\n\n  // no special dependency issues, just return ourselves\n  return mode;\n}\n\nvar version = \"11.11.1\";\n\nclass HTMLInjectionError extends Error {\n  constructor(reason, html) {\n    super(reason);\n    this.name = \"HTMLInjectionError\";\n    this.html = html;\n  }\n}\n\n/*\nSyntax highlighting with language autodetection.\nhttps://highlightjs.org/\n*/\n\n\n\n/**\n@typedef {import('highlight.js').Mode} Mode\n@typedef {import('highlight.js').CompiledMode} CompiledMode\n@typedef {import('highlight.js').CompiledScope} CompiledScope\n@typedef {import('highlight.js').Language} Language\n@typedef {import('highlight.js').HLJSApi} HLJSApi\n@typedef {import('highlight.js').HLJSPlugin} HLJSPlugin\n@typedef {import('highlight.js').PluginEvent} PluginEvent\n@typedef {import('highlight.js').HLJSOptions} HLJSOptions\n@typedef {import('highlight.js').LanguageFn} LanguageFn\n@typedef {import('highlight.js').HighlightedHTMLElement} HighlightedHTMLElement\n@typedef {import('highlight.js').BeforeHighlightContext} BeforeHighlightContext\n@typedef {import('highlight.js/private').MatchType} MatchType\n@typedef {import('highlight.js/private').KeywordData} KeywordData\n@typedef {import('highlight.js/private').EnhancedMatch} EnhancedMatch\n@typedef {import('highlight.js/private').AnnotatedError} AnnotatedError\n@typedef {import('highlight.js').AutoHighlightResult} AutoHighlightResult\n@typedef {import('highlight.js').HighlightOptions} HighlightOptions\n@typedef {import('highlight.js').HighlightResult} HighlightResult\n*/\n\n\nconst escape = escapeHTML;\nconst inherit = inherit$1;\nconst NO_MATCH = Symbol(\"nomatch\");\nconst MAX_KEYWORD_HITS = 7;\n\n/**\n * @param {any} hljs - object that is extended (legacy)\n * @returns {HLJSApi}\n */\nconst HLJS = function(hljs) {\n  // Global internal variables used within the highlight.js library.\n  /** @type {Record<string, Language>} */\n  const languages = Object.create(null);\n  /** @type {Record<string, string>} */\n  const aliases = Object.create(null);\n  /** @type {HLJSPlugin[]} */\n  const plugins = [];\n\n  // safe/production mode - swallows more errors, tries to keep running\n  // even if a single syntax or parse hits a fatal error\n  let SAFE_MODE = true;\n  const LANGUAGE_NOT_FOUND = \"Could not find the language '{}', did you forget to load/include a language module?\";\n  /** @type {Language} */\n  const PLAINTEXT_LANGUAGE = { disableAutodetect: true, name: 'Plain text', contains: [] };\n\n  // Global options used when within external APIs. This is modified when\n  // calling the `hljs.configure` function.\n  /** @type HLJSOptions */\n  let options = {\n    ignoreUnescapedHTML: false,\n    throwUnescapedHTML: false,\n    noHighlightRe: /^(no-?highlight)$/i,\n    languageDetectRe: /\\blang(?:uage)?-([\\w-]+)\\b/i,\n    classPrefix: 'hljs-',\n    cssSelector: 'pre code',\n    languages: null,\n    // beta configuration options, subject to change, welcome to discuss\n    // https://github.com/highlightjs/highlight.js/issues/1086\n    __emitter: TokenTreeEmitter\n  };\n\n  /* Utility functions */\n\n  /**\n   * Tests a language name to see if highlighting should be skipped\n   * @param {string} languageName\n   */\n  function shouldNotHighlight(languageName) {\n    return options.noHighlightRe.test(languageName);\n  }\n\n  /**\n   * @param {HighlightedHTMLElement} block - the HTML element to determine language for\n   */\n  function blockLanguage(block) {\n    let classes = block.className + ' ';\n\n    classes += block.parentNode ? block.parentNode.className : '';\n\n    // language-* takes precedence over non-prefixed class names.\n    const match = options.languageDetectRe.exec(classes);\n    if (match) {\n      const language = getLanguage(match[1]);\n      if (!language) {\n        warn(LANGUAGE_NOT_FOUND.replace(\"{}\", match[1]));\n        warn(\"Falling back to no-highlight mode for this block.\", block);\n      }\n      return language ? match[1] : 'no-highlight';\n    }\n\n    return classes\n      .split(/\\s+/)\n      .find((_class) => shouldNotHighlight(_class) || getLanguage(_class));\n  }\n\n  /**\n   * Core highlighting function.\n   *\n   * OLD API\n   * highlight(lang, code, ignoreIllegals, continuation)\n   *\n   * NEW API\n   * highlight(code, {lang, ignoreIllegals})\n   *\n   * @param {string} codeOrLanguageName - the language to use for highlighting\n   * @param {string | HighlightOptions} optionsOrCode - the code to highlight\n   * @param {boolean} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   *\n   * @returns {HighlightResult} Result - an object that represents the result\n   * @property {string} language - the language name\n   * @property {number} relevance - the relevance score\n   * @property {string} value - the highlighted HTML code\n   * @property {string} code - the original raw code\n   * @property {CompiledMode} top - top of the current mode stack\n   * @property {boolean} illegal - indicates whether any illegal matches were found\n  */\n  function highlight(codeOrLanguageName, optionsOrCode, ignoreIllegals) {\n    let code = \"\";\n    let languageName = \"\";\n    if (typeof optionsOrCode === \"object\") {\n      code = codeOrLanguageName;\n      ignoreIllegals = optionsOrCode.ignoreIllegals;\n      languageName = optionsOrCode.language;\n    } else {\n      // old API\n      deprecated(\"10.7.0\", \"highlight(lang, code, ...args) has been deprecated.\");\n      deprecated(\"10.7.0\", \"Please use highlight(code, options) instead.\\nhttps://github.com/highlightjs/highlight.js/issues/2277\");\n      languageName = codeOrLanguageName;\n      code = optionsOrCode;\n    }\n\n    // https://github.com/highlightjs/highlight.js/issues/3149\n    // eslint-disable-next-line no-undefined\n    if (ignoreIllegals === undefined) { ignoreIllegals = true; }\n\n    /** @type {BeforeHighlightContext} */\n    const context = {\n      code,\n      language: languageName\n    };\n    // the plugin can change the desired language or the code to be highlighted\n    // just be changing the object it was passed\n    fire(\"before:highlight\", context);\n\n    // a before plugin can usurp the result completely by providing it's own\n    // in which case we don't even need to call highlight\n    const result = context.result\n      ? context.result\n      : _highlight(context.language, context.code, ignoreIllegals);\n\n    result.code = context.code;\n    // the plugin can change anything in result to suite it\n    fire(\"after:highlight\", result);\n\n    return result;\n  }\n\n  /**\n   * private highlight that's used internally and does not fire callbacks\n   *\n   * @param {string} languageName - the language to use for highlighting\n   * @param {string} codeToHighlight - the code to highlight\n   * @param {boolean?} [ignoreIllegals] - whether to ignore illegal matches, default is to bail\n   * @param {CompiledMode?} [continuation] - current continuation mode, if any\n   * @returns {HighlightResult} - result of the highlight operation\n  */\n  function _highlight(languageName, codeToHighlight, ignoreIllegals, continuation) {\n    const keywordHits = Object.create(null);\n\n    /**\n     * Return keyword data if a match is a keyword\n     * @param {CompiledMode} mode - current mode\n     * @param {string} matchText - the textual match\n     * @returns {KeywordData | false}\n     */\n    function keywordData(mode, matchText) {\n      return mode.keywords[matchText];\n    }\n\n    function processKeywords() {\n      if (!top.keywords) {\n        emitter.addText(modeBuffer);\n        return;\n      }\n\n      let lastIndex = 0;\n      top.keywordPatternRe.lastIndex = 0;\n      let match = top.keywordPatternRe.exec(modeBuffer);\n      let buf = \"\";\n\n      while (match) {\n        buf += modeBuffer.substring(lastIndex, match.index);\n        const word = language.case_insensitive ? match[0].toLowerCase() : match[0];\n        const data = keywordData(top, word);\n        if (data) {\n          const [kind, keywordRelevance] = data;\n          emitter.addText(buf);\n          buf = \"\";\n\n          keywordHits[word] = (keywordHits[word] || 0) + 1;\n          if (keywordHits[word] <= MAX_KEYWORD_HITS) relevance += keywordRelevance;\n          if (kind.startsWith(\"_\")) {\n            // _ implied for relevance only, do not highlight\n            // by applying a class name\n            buf += match[0];\n          } else {\n            const cssClass = language.classNameAliases[kind] || kind;\n            emitKeyword(match[0], cssClass);\n          }\n        } else {\n          buf += match[0];\n        }\n        lastIndex = top.keywordPatternRe.lastIndex;\n        match = top.keywordPatternRe.exec(modeBuffer);\n      }\n      buf += modeBuffer.substring(lastIndex);\n      emitter.addText(buf);\n    }\n\n    function processSubLanguage() {\n      if (modeBuffer === \"\") return;\n      /** @type HighlightResult */\n      let result = null;\n\n      if (typeof top.subLanguage === 'string') {\n        if (!languages[top.subLanguage]) {\n          emitter.addText(modeBuffer);\n          return;\n        }\n        result = _highlight(top.subLanguage, modeBuffer, true, continuations[top.subLanguage]);\n        continuations[top.subLanguage] = /** @type {CompiledMode} */ (result._top);\n      } else {\n        result = highlightAuto(modeBuffer, top.subLanguage.length ? top.subLanguage : null);\n      }\n\n      // Counting embedded language score towards the host language may be disabled\n      // with zeroing the containing mode relevance. Use case in point is Markdown that\n      // allows XML everywhere and makes every XML snippet to have a much larger Markdown\n      // score.\n      if (top.relevance > 0) {\n        relevance += result.relevance;\n      }\n      emitter.__addSublanguage(result._emitter, result.language);\n    }\n\n    function processBuffer() {\n      if (top.subLanguage != null) {\n        processSubLanguage();\n      } else {\n        processKeywords();\n      }\n      modeBuffer = '';\n    }\n\n    /**\n     * @param {string} text\n     * @param {string} scope\n     */\n    function emitKeyword(keyword, scope) {\n      if (keyword === \"\") return;\n\n      emitter.startScope(scope);\n      emitter.addText(keyword);\n      emitter.endScope();\n    }\n\n    /**\n     * @param {CompiledScope} scope\n     * @param {RegExpMatchArray} match\n     */\n    function emitMultiClass(scope, match) {\n      let i = 1;\n      const max = match.length - 1;\n      while (i <= max) {\n        if (!scope._emit[i]) { i++; continue; }\n        const klass = language.classNameAliases[scope[i]] || scope[i];\n        const text = match[i];\n        if (klass) {\n          emitKeyword(text, klass);\n        } else {\n          modeBuffer = text;\n          processKeywords();\n          modeBuffer = \"\";\n        }\n        i++;\n      }\n    }\n\n    /**\n     * @param {CompiledMode} mode - new mode to start\n     * @param {RegExpMatchArray} match\n     */\n    function startNewMode(mode, match) {\n      if (mode.scope && typeof mode.scope === \"string\") {\n        emitter.openNode(language.classNameAliases[mode.scope] || mode.scope);\n      }\n      if (mode.beginScope) {\n        // beginScope just wraps the begin match itself in a scope\n        if (mode.beginScope._wrap) {\n          emitKeyword(modeBuffer, language.classNameAliases[mode.beginScope._wrap] || mode.beginScope._wrap);\n          modeBuffer = \"\";\n        } else if (mode.beginScope._multi) {\n          // at this point modeBuffer should just be the match\n          emitMultiClass(mode.beginScope, match);\n          modeBuffer = \"\";\n        }\n      }\n\n      top = Object.create(mode, { parent: { value: top } });\n      return top;\n    }\n\n    /**\n     * @param {CompiledMode } mode - the mode to potentially end\n     * @param {RegExpMatchArray} match - the latest match\n     * @param {string} matchPlusRemainder - match plus remainder of content\n     * @returns {CompiledMode | void} - the next mode, or if void continue on in current mode\n     */\n    function endOfMode(mode, match, matchPlusRemainder) {\n      let matched = startsWith(mode.endRe, matchPlusRemainder);\n\n      if (matched) {\n        if (mode[\"on:end\"]) {\n          const resp = new Response(mode);\n          mode[\"on:end\"](match, resp);\n          if (resp.isMatchIgnored) matched = false;\n        }\n\n        if (matched) {\n          while (mode.endsParent && mode.parent) {\n            mode = mode.parent;\n          }\n          return mode;\n        }\n      }\n      // even if on:end fires an `ignore` it's still possible\n      // that we might trigger the end node because of a parent mode\n      if (mode.endsWithParent) {\n        return endOfMode(mode.parent, match, matchPlusRemainder);\n      }\n    }\n\n    /**\n     * Handle matching but then ignoring a sequence of text\n     *\n     * @param {string} lexeme - string containing full match text\n     */\n    function doIgnore(lexeme) {\n      if (top.matcher.regexIndex === 0) {\n        // no more regexes to potentially match here, so we move the cursor forward one\n        // space\n        modeBuffer += lexeme[0];\n        return 1;\n      } else {\n        // no need to move the cursor, we still have additional regexes to try and\n        // match at this very spot\n        resumeScanAtSamePosition = true;\n        return 0;\n      }\n    }\n\n    /**\n     * Handle the start of a new potential mode match\n     *\n     * @param {EnhancedMatch} match - the current match\n     * @returns {number} how far to advance the parse cursor\n     */\n    function doBeginMatch(match) {\n      const lexeme = match[0];\n      const newMode = match.rule;\n\n      const resp = new Response(newMode);\n      // first internal before callbacks, then the public ones\n      const beforeCallbacks = [newMode.__beforeBegin, newMode[\"on:begin\"]];\n      for (const cb of beforeCallbacks) {\n        if (!cb) continue;\n        cb(match, resp);\n        if (resp.isMatchIgnored) return doIgnore(lexeme);\n      }\n\n      if (newMode.skip) {\n        modeBuffer += lexeme;\n      } else {\n        if (newMode.excludeBegin) {\n          modeBuffer += lexeme;\n        }\n        processBuffer();\n        if (!newMode.returnBegin && !newMode.excludeBegin) {\n          modeBuffer = lexeme;\n        }\n      }\n      startNewMode(newMode, match);\n      return newMode.returnBegin ? 0 : lexeme.length;\n    }\n\n    /**\n     * Handle the potential end of mode\n     *\n     * @param {RegExpMatchArray} match - the current match\n     */\n    function doEndMatch(match) {\n      const lexeme = match[0];\n      const matchPlusRemainder = codeToHighlight.substring(match.index);\n\n      const endMode = endOfMode(top, match, matchPlusRemainder);\n      if (!endMode) { return NO_MATCH; }\n\n      const origin = top;\n      if (top.endScope && top.endScope._wrap) {\n        processBuffer();\n        emitKeyword(lexeme, top.endScope._wrap);\n      } else if (top.endScope && top.endScope._multi) {\n        processBuffer();\n        emitMultiClass(top.endScope, match);\n      } else if (origin.skip) {\n        modeBuffer += lexeme;\n      } else {\n        if (!(origin.returnEnd || origin.excludeEnd)) {\n          modeBuffer += lexeme;\n        }\n        processBuffer();\n        if (origin.excludeEnd) {\n          modeBuffer = lexeme;\n        }\n      }\n      do {\n        if (top.scope) {\n          emitter.closeNode();\n        }\n        if (!top.skip && !top.subLanguage) {\n          relevance += top.relevance;\n        }\n        top = top.parent;\n      } while (top !== endMode.parent);\n      if (endMode.starts) {\n        startNewMode(endMode.starts, match);\n      }\n      return origin.returnEnd ? 0 : lexeme.length;\n    }\n\n    function processContinuations() {\n      const list = [];\n      for (let current = top; current !== language; current = current.parent) {\n        if (current.scope) {\n          list.unshift(current.scope);\n        }\n      }\n      list.forEach(item => emitter.openNode(item));\n    }\n\n    /** @type {{type?: MatchType, index?: number, rule?: Mode}}} */\n    let lastMatch = {};\n\n    /**\n     *  Process an individual match\n     *\n     * @param {string} textBeforeMatch - text preceding the match (since the last match)\n     * @param {EnhancedMatch} [match] - the match itself\n     */\n    function processLexeme(textBeforeMatch, match) {\n      const lexeme = match && match[0];\n\n      // add non-matched text to the current mode buffer\n      modeBuffer += textBeforeMatch;\n\n      if (lexeme == null) {\n        processBuffer();\n        return 0;\n      }\n\n      // we've found a 0 width match and we're stuck, so we need to advance\n      // this happens when we have badly behaved rules that have optional matchers to the degree that\n      // sometimes they can end up matching nothing at all\n      // Ref: https://github.com/highlightjs/highlight.js/issues/2140\n      if (lastMatch.type === \"begin\" && match.type === \"end\" && lastMatch.index === match.index && lexeme === \"\") {\n        // spit the \"skipped\" character that our regex choked on back into the output sequence\n        modeBuffer += codeToHighlight.slice(match.index, match.index + 1);\n        if (!SAFE_MODE) {\n          /** @type {AnnotatedError} */\n          const err = new Error(`0 width match regex (${languageName})`);\n          err.languageName = languageName;\n          err.badRule = lastMatch.rule;\n          throw err;\n        }\n        return 1;\n      }\n      lastMatch = match;\n\n      if (match.type === \"begin\") {\n        return doBeginMatch(match);\n      } else if (match.type === \"illegal\" && !ignoreIllegals) {\n        // illegal match, we do not continue processing\n        /** @type {AnnotatedError} */\n        const err = new Error('Illegal lexeme \"' + lexeme + '\" for mode \"' + (top.scope || '<unnamed>') + '\"');\n        err.mode = top;\n        throw err;\n      } else if (match.type === \"end\") {\n        const processed = doEndMatch(match);\n        if (processed !== NO_MATCH) {\n          return processed;\n        }\n      }\n\n      // edge case for when illegal matches $ (end of line) which is technically\n      // a 0 width match but not a begin/end match so it's not caught by the\n      // first handler (when ignoreIllegals is true)\n      if (match.type === \"illegal\" && lexeme === \"\") {\n        // advance so we aren't stuck in an infinite loop\n        modeBuffer += \"\\n\";\n        return 1;\n      }\n\n      // infinite loops are BAD, this is a last ditch catch all. if we have a\n      // decent number of iterations yet our index (cursor position in our\n      // parsing) still 3x behind our index then something is very wrong\n      // so we bail\n      if (iterations > 100000 && iterations > match.index * 3) {\n        const err = new Error('potential infinite loop, way more iterations than matches');\n        throw err;\n      }\n\n      /*\n      Why might be find ourselves here?  An potential end match that was\n      triggered but could not be completed.  IE, `doEndMatch` returned NO_MATCH.\n      (this could be because a callback requests the match be ignored, etc)\n\n      This causes no real harm other than stopping a few times too many.\n      */\n\n      modeBuffer += lexeme;\n      return lexeme.length;\n    }\n\n    const language = getLanguage(languageName);\n    if (!language) {\n      error(LANGUAGE_NOT_FOUND.replace(\"{}\", languageName));\n      throw new Error('Unknown language: \"' + languageName + '\"');\n    }\n\n    const md = compileLanguage(language);\n    let result = '';\n    /** @type {CompiledMode} */\n    let top = continuation || md;\n    /** @type Record<string,CompiledMode> */\n    const continuations = {}; // keep continuations for sub-languages\n    const emitter = new options.__emitter(options);\n    processContinuations();\n    let modeBuffer = '';\n    let relevance = 0;\n    let index = 0;\n    let iterations = 0;\n    let resumeScanAtSamePosition = false;\n\n    try {\n      if (!language.__emitTokens) {\n        top.matcher.considerAll();\n\n        for (;;) {\n          iterations++;\n          if (resumeScanAtSamePosition) {\n            // only regexes not matched previously will now be\n            // considered for a potential match\n            resumeScanAtSamePosition = false;\n          } else {\n            top.matcher.considerAll();\n          }\n          top.matcher.lastIndex = index;\n\n          const match = top.matcher.exec(codeToHighlight);\n          // console.log(\"match\", match[0], match.rule && match.rule.begin)\n\n          if (!match) break;\n\n          const beforeMatch = codeToHighlight.substring(index, match.index);\n          const processedCount = processLexeme(beforeMatch, match);\n          index = match.index + processedCount;\n        }\n        processLexeme(codeToHighlight.substring(index));\n      } else {\n        language.__emitTokens(codeToHighlight, emitter);\n      }\n\n      emitter.finalize();\n      result = emitter.toHTML();\n\n      return {\n        language: languageName,\n        value: result,\n        relevance,\n        illegal: false,\n        _emitter: emitter,\n        _top: top\n      };\n    } catch (err) {\n      if (err.message && err.message.includes('Illegal')) {\n        return {\n          language: languageName,\n          value: escape(codeToHighlight),\n          illegal: true,\n          relevance: 0,\n          _illegalBy: {\n            message: err.message,\n            index,\n            context: codeToHighlight.slice(index - 100, index + 100),\n            mode: err.mode,\n            resultSoFar: result\n          },\n          _emitter: emitter\n        };\n      } else if (SAFE_MODE) {\n        return {\n          language: languageName,\n          value: escape(codeToHighlight),\n          illegal: false,\n          relevance: 0,\n          errorRaised: err,\n          _emitter: emitter,\n          _top: top\n        };\n      } else {\n        throw err;\n      }\n    }\n  }\n\n  /**\n   * returns a valid highlight result, without actually doing any actual work,\n   * auto highlight starts with this and it's possible for small snippets that\n   * auto-detection may not find a better match\n   * @param {string} code\n   * @returns {HighlightResult}\n   */\n  function justTextHighlightResult(code) {\n    const result = {\n      value: escape(code),\n      illegal: false,\n      relevance: 0,\n      _top: PLAINTEXT_LANGUAGE,\n      _emitter: new options.__emitter(options)\n    };\n    result._emitter.addText(code);\n    return result;\n  }\n\n  /**\n  Highlighting with language detection. Accepts a string with the code to\n  highlight. Returns an object with the following properties:\n\n  - language (detected language)\n  - relevance (int)\n  - value (an HTML string with highlighting markup)\n  - secondBest (object with the same structure for second-best heuristically\n    detected language, may be absent)\n\n    @param {string} code\n    @param {Array<string>} [languageSubset]\n    @returns {AutoHighlightResult}\n  */\n  function highlightAuto(code, languageSubset) {\n    languageSubset = languageSubset || options.languages || Object.keys(languages);\n    const plaintext = justTextHighlightResult(code);\n\n    const results = languageSubset.filter(getLanguage).filter(autoDetection).map(name =>\n      _highlight(name, code, false)\n    );\n    results.unshift(plaintext); // plaintext is always an option\n\n    const sorted = results.sort((a, b) => {\n      // sort base on relevance\n      if (a.relevance !== b.relevance) return b.relevance - a.relevance;\n\n      // always award the tie to the base language\n      // ie if C++ and Arduino are tied, it's more likely to be C++\n      if (a.language && b.language) {\n        if (getLanguage(a.language).supersetOf === b.language) {\n          return 1;\n        } else if (getLanguage(b.language).supersetOf === a.language) {\n          return -1;\n        }\n      }\n\n      // otherwise say they are equal, which has the effect of sorting on\n      // relevance while preserving the original ordering - which is how ties\n      // have historically been settled, ie the language that comes first always\n      // wins in the case of a tie\n      return 0;\n    });\n\n    const [best, secondBest] = sorted;\n\n    /** @type {AutoHighlightResult} */\n    const result = best;\n    result.secondBest = secondBest;\n\n    return result;\n  }\n\n  /**\n   * Builds new class name for block given the language name\n   *\n   * @param {HTMLElement} element\n   * @param {string} [currentLang]\n   * @param {string} [resultLang]\n   */\n  function updateClassName(element, currentLang, resultLang) {\n    const language = (currentLang && aliases[currentLang]) || resultLang;\n\n    element.classList.add(\"hljs\");\n    element.classList.add(`language-${language}`);\n  }\n\n  /**\n   * Applies highlighting to a DOM node containing code.\n   *\n   * @param {HighlightedHTMLElement} element - the HTML element to highlight\n  */\n  function highlightElement(element) {\n    /** @type HTMLElement */\n    let node = null;\n    const language = blockLanguage(element);\n\n    if (shouldNotHighlight(language)) return;\n\n    fire(\"before:highlightElement\",\n      { el: element, language });\n\n    if (element.dataset.highlighted) {\n      console.log(\"Element previously highlighted. To highlight again, first unset `dataset.highlighted`.\", element);\n      return;\n    }\n\n    // we should be all text, no child nodes (unescaped HTML) - this is possibly\n    // an HTML injection attack - it's likely too late if this is already in\n    // production (the code has likely already done its damage by the time\n    // we're seeing it)... but we yell loudly about this so that hopefully it's\n    // more likely to be caught in development before making it to production\n    if (element.children.length > 0) {\n      if (!options.ignoreUnescapedHTML) {\n        console.warn(\"One of your code blocks includes unescaped HTML. This is a potentially serious security risk.\");\n        console.warn(\"https://github.com/highlightjs/highlight.js/wiki/security\");\n        console.warn(\"The element with unescaped HTML:\");\n        console.warn(element);\n      }\n      if (options.throwUnescapedHTML) {\n        const err = new HTMLInjectionError(\n          \"One of your code blocks includes unescaped HTML.\",\n          element.innerHTML\n        );\n        throw err;\n      }\n    }\n\n    node = element;\n    const text = node.textContent;\n    const result = language ? highlight(text, { language, ignoreIllegals: true }) : highlightAuto(text);\n\n    element.innerHTML = result.value;\n    element.dataset.highlighted = \"yes\";\n    updateClassName(element, language, result.language);\n    element.result = {\n      language: result.language,\n      // TODO: remove with version 11.0\n      re: result.relevance,\n      relevance: result.relevance\n    };\n    if (result.secondBest) {\n      element.secondBest = {\n        language: result.secondBest.language,\n        relevance: result.secondBest.relevance\n      };\n    }\n\n    fire(\"after:highlightElement\", { el: element, result, text });\n  }\n\n  /**\n   * Updates highlight.js global options with the passed options\n   *\n   * @param {Partial<HLJSOptions>} userOptions\n   */\n  function configure(userOptions) {\n    options = inherit(options, userOptions);\n  }\n\n  // TODO: remove v12, deprecated\n  const initHighlighting = () => {\n    highlightAll();\n    deprecated(\"10.6.0\", \"initHighlighting() deprecated.  Use highlightAll() now.\");\n  };\n\n  // TODO: remove v12, deprecated\n  function initHighlightingOnLoad() {\n    highlightAll();\n    deprecated(\"10.6.0\", \"initHighlightingOnLoad() deprecated.  Use highlightAll() now.\");\n  }\n\n  let wantsHighlight = false;\n\n  /**\n   * auto-highlights all pre>code elements on the page\n   */\n  function highlightAll() {\n    function boot() {\n      // if a highlight was requested before DOM was loaded, do now\n      highlightAll();\n    }\n\n    // if we are called too early in the loading process\n    if (document.readyState === \"loading\") {\n      // make sure the event listener is only added once\n      if (!wantsHighlight) {\n        window.addEventListener('DOMContentLoaded', boot, false);\n      }\n      wantsHighlight = true;\n      return;\n    }\n\n    const blocks = document.querySelectorAll(options.cssSelector);\n    blocks.forEach(highlightElement);\n  }\n\n  /**\n   * Register a language grammar module\n   *\n   * @param {string} languageName\n   * @param {LanguageFn} languageDefinition\n   */\n  function registerLanguage(languageName, languageDefinition) {\n    let lang = null;\n    try {\n      lang = languageDefinition(hljs);\n    } catch (error$1) {\n      error(\"Language definition for '{}' could not be registered.\".replace(\"{}\", languageName));\n      // hard or soft error\n      if (!SAFE_MODE) { throw error$1; } else { error(error$1); }\n      // languages that have serious errors are replaced with essentially a\n      // \"plaintext\" stand-in so that the code blocks will still get normal\n      // css classes applied to them - and one bad language won't break the\n      // entire highlighter\n      lang = PLAINTEXT_LANGUAGE;\n    }\n    // give it a temporary name if it doesn't have one in the meta-data\n    if (!lang.name) lang.name = languageName;\n    languages[languageName] = lang;\n    lang.rawDefinition = languageDefinition.bind(null, hljs);\n\n    if (lang.aliases) {\n      registerAliases(lang.aliases, { languageName });\n    }\n  }\n\n  /**\n   * Remove a language grammar module\n   *\n   * @param {string} languageName\n   */\n  function unregisterLanguage(languageName) {\n    delete languages[languageName];\n    for (const alias of Object.keys(aliases)) {\n      if (aliases[alias] === languageName) {\n        delete aliases[alias];\n      }\n    }\n  }\n\n  /**\n   * @returns {string[]} List of language internal names\n   */\n  function listLanguages() {\n    return Object.keys(languages);\n  }\n\n  /**\n   * @param {string} name - name of the language to retrieve\n   * @returns {Language | undefined}\n   */\n  function getLanguage(name) {\n    name = (name || '').toLowerCase();\n    return languages[name] || languages[aliases[name]];\n  }\n\n  /**\n   *\n   * @param {string|string[]} aliasList - single alias or list of aliases\n   * @param {{languageName: string}} opts\n   */\n  function registerAliases(aliasList, { languageName }) {\n    if (typeof aliasList === 'string') {\n      aliasList = [aliasList];\n    }\n    aliasList.forEach(alias => { aliases[alias.toLowerCase()] = languageName; });\n  }\n\n  /**\n   * Determines if a given language has auto-detection enabled\n   * @param {string} name - name of the language\n   */\n  function autoDetection(name) {\n    const lang = getLanguage(name);\n    return lang && !lang.disableAutodetect;\n  }\n\n  /**\n   * Upgrades the old highlightBlock plugins to the new\n   * highlightElement API\n   * @param {HLJSPlugin} plugin\n   */\n  function upgradePluginAPI(plugin) {\n    // TODO: remove with v12\n    if (plugin[\"before:highlightBlock\"] && !plugin[\"before:highlightElement\"]) {\n      plugin[\"before:highlightElement\"] = (data) => {\n        plugin[\"before:highlightBlock\"](\n          Object.assign({ block: data.el }, data)\n        );\n      };\n    }\n    if (plugin[\"after:highlightBlock\"] && !plugin[\"after:highlightElement\"]) {\n      plugin[\"after:highlightElement\"] = (data) => {\n        plugin[\"after:highlightBlock\"](\n          Object.assign({ block: data.el }, data)\n        );\n      };\n    }\n  }\n\n  /**\n   * @param {HLJSPlugin} plugin\n   */\n  function addPlugin(plugin) {\n    upgradePluginAPI(plugin);\n    plugins.push(plugin);\n  }\n\n  /**\n   * @param {HLJSPlugin} plugin\n   */\n  function removePlugin(plugin) {\n    const index = plugins.indexOf(plugin);\n    if (index !== -1) {\n      plugins.splice(index, 1);\n    }\n  }\n\n  /**\n   *\n   * @param {PluginEvent} event\n   * @param {any} args\n   */\n  function fire(event, args) {\n    const cb = event;\n    plugins.forEach(function(plugin) {\n      if (plugin[cb]) {\n        plugin[cb](args);\n      }\n    });\n  }\n\n  /**\n   * DEPRECATED\n   * @param {HighlightedHTMLElement} el\n   */\n  function deprecateHighlightBlock(el) {\n    deprecated(\"10.7.0\", \"highlightBlock will be removed entirely in v12.0\");\n    deprecated(\"10.7.0\", \"Please use highlightElement now.\");\n\n    return highlightElement(el);\n  }\n\n  /* Interface definition */\n  Object.assign(hljs, {\n    highlight,\n    highlightAuto,\n    highlightAll,\n    highlightElement,\n    // TODO: Remove with v12 API\n    highlightBlock: deprecateHighlightBlock,\n    configure,\n    initHighlighting,\n    initHighlightingOnLoad,\n    registerLanguage,\n    unregisterLanguage,\n    listLanguages,\n    getLanguage,\n    registerAliases,\n    autoDetection,\n    inherit,\n    addPlugin,\n    removePlugin\n  });\n\n  hljs.debugMode = function() { SAFE_MODE = false; };\n  hljs.safeMode = function() { SAFE_MODE = true; };\n  hljs.versionString = version;\n\n  hljs.regex = {\n    concat: concat,\n    lookahead: lookahead,\n    either: either,\n    optional: optional,\n    anyNumberOfTimes: anyNumberOfTimes\n  };\n\n  for (const key in MODES) {\n    // @ts-ignore\n    if (typeof MODES[key] === \"object\") {\n      // @ts-ignore\n      deepFreeze(MODES[key]);\n    }\n  }\n\n  // merge all the modes/regexes into our main object\n  Object.assign(hljs, MODES);\n\n  return hljs;\n};\n\n// Other names for the variable may break build script\nconst highlight = HLJS({});\n\n// returns a new instance of the highlighter to be used for extensions\n// check https://github.com/wooorm/lowlight/issues/47\nhighlight.newInstance = () => HLJS({});\n\nmodule.exports = highlight;\nhighlight.HighlightJS = highlight;\nhighlight.default = highlight;\n","// css custom properties doesn't support decimal numbers in name\nexport const CSS_SIZE_EXCEPTION = {\n    '0.5': 'half',\n};\nexport const DEFAULT_LAYOUT_THEME = {\n    breakpoints: {\n        s: 576,\n        m: 768,\n        l: 1080,\n        xl: 1200,\n        xxl: 1400,\n        xxxl: 1920,\n    },\n    spaceBaseSize: 4,\n    components: {\n        container: {\n            gutters: '3',\n            media: {\n                l: {\n                    gutters: '5',\n                },\n            },\n        },\n    },\n};\n","import { CSS_SIZE_EXCEPTION } from '../constants';\nconst mediaByOrder = {\n    s: 0,\n    m: 1,\n    l: 2,\n    xl: 3,\n    xxl: 4,\n    xxxl: 5,\n};\nexport const isMediaActiveFactory = (activeType) => (toCheck) => {\n    return activeType in mediaByOrder\n        ? mediaByOrder[activeType] - mediaByOrder[toCheck] >= 0\n        : false;\n};\nconst mediaOrder = ['s', 'm', 'l', 'xl', 'xxl', 'xxxl'];\nexport const getClosestMediaPropsFactory = (currentActive) => (medias = {}) => {\n    if (!currentActive) {\n        return undefined;\n    }\n    let candidate = currentActive;\n    while (candidate) {\n        if (medias[candidate]) {\n            return medias[candidate];\n        }\n        candidate = mediaOrder[mediaByOrder[candidate] - 1];\n    }\n    return undefined;\n};\nexport const makeCssMod = (space) => {\n    return space in CSS_SIZE_EXCEPTION ? CSS_SIZE_EXCEPTION[space] : String(space);\n};\n","/* eslint-disable valid-jsdoc */\nimport { block } from '../../utils/cn';\nimport { makeCssMod } from '../utils';\nimport './spacing.css';\nconst b = block('s');\n/**\n * Utility to generate predefined css classes to describe position between components\n * ---\n * Storybook - https://preview.gravity-ui.com/uikit/?path=/docs/layout--playground#spacing-utility\n */\nexport const spacing = (props, className) => {\n    const classes = [];\n    for (const key in props) {\n        if (Object.prototype.hasOwnProperty.call(props, key)) {\n            const value = props[key];\n            if (typeof value !== 'undefined') {\n                classes.push(b(`${key}_${makeCssMod(value)}`));\n            }\n        }\n    }\n    if (className) {\n        classes.push(className);\n    }\n    return classes.join(' ');\n};\n// alias\nexport const sp = spacing;\n","import React from 'react';\nimport { DEFAULT_LAYOUT_THEME } from '../constants';\nexport const LayoutContext = React.createContext({\n    theme: DEFAULT_LAYOUT_THEME,\n    activeMediaQuery: 's',\n});\n","import { __rest } from \"tslib\";\nimport React from 'react';\nimport { block } from '../../utils/cn';\nimport { useLayoutContext } from '../hooks/useLayoutContext';\nimport { makeCssMod } from '../utils';\nimport './Flex.css';\nconst b = block('flex');\n/**\n * Flexbox model utility component.\n *\n * ```tsx\n * import {Flex, Button} from '@gravity-ui/uikit';\n *\n * <Flex\n *  // take value from theme depends of current media query\n *  space\n * >\n *  <Button>\n *      Button 1\n *  </Button>\n *  <Button>\n *      Button 2\n *  </Button>\n * </Flex>\n * ```\n *\n * Use build in media goods via props\n *\n * ```tsx\n * <Flex\n *  // space dynamically changes instead of current media query\n *  space={{s: '1', m: '5'}}\n *  // `flex-direction: column` will be applied to `l`, 'xl', 'xxl' and `xxxl` media queries\n *  direction={{'s': 'column', 'm': 'row'}}\n * >\n *  {...}\n * </Flex>\n * ```\n * ---\n * Storybook - https://preview.gravity-ui.com/uikit/?path=/docs/layout--playground#flex\n */\nexport const Flex = React.forwardRef(function Flex(props, ref) {\n    const { as: Tag = 'div', direction, width, grow, basis, children, style, alignContent, alignItems, alignSelf, justifyContent, justifyItems, justifySelf, shrink, wrap, inline, title, gap, gapRow, className, space, qa } = props, restProps = __rest(props, [\"as\", \"direction\", \"width\", \"grow\", \"basis\", \"children\", \"style\", \"alignContent\", \"alignItems\", \"alignSelf\", \"justifyContent\", \"justifyItems\", \"justifySelf\", \"shrink\", \"wrap\", \"inline\", \"title\", \"gap\", \"gapRow\", \"className\", \"space\", \"qa\"]);\n    const { getClosestMediaProps, theme: { spaceBaseSize }, } = useLayoutContext();\n    const applyMediaProps = (property) => typeof property === 'object' && property !== null\n        ? getClosestMediaProps(property)\n        : property;\n    const gapSpaceSize = applyMediaProps(gap);\n    const columnGap = gapSpaceSize ? spaceBaseSize * Number(gapSpaceSize) : undefined;\n    const gapRowSpaceSize = applyMediaProps(gapRow) || gapSpaceSize;\n    const rowGap = gapRowSpaceSize ? spaceBaseSize * Number(gapRowSpaceSize) : undefined;\n    const spaceSize = applyMediaProps(space);\n    const s = !gap && !gapRow && spaceSize ? makeCssMod(spaceSize) : undefined;\n    return (React.createElement(Tag, Object.assign({ className: b({\n            inline,\n            s,\n        }, className), style: Object.assign({ width, flexDirection: applyMediaProps(direction), flexGrow: grow === true ? 1 : grow, flexWrap: wrap === true ? 'wrap' : wrap, flexBasis: basis, flexShrink: shrink, columnGap,\n            rowGap, alignContent: applyMediaProps(alignContent), alignItems: applyMediaProps(alignItems), alignSelf: applyMediaProps(alignSelf), justifyContent: applyMediaProps(justifyContent), justifyItems: applyMediaProps(justifyItems), justifySelf: applyMediaProps(justifySelf) }, style), title: title, ref: ref, \"data-qa\": qa }, restProps), space\n        ? React.Children.map(children, (child) => \n        // `space` uses negative margins under the hood. This is hack to prevent wrong background position appearance.\n        child ? React.createElement(\"div\", { className: b('wr') }, child) : child)\n        : children));\n});\n","/* eslint-disable valid-jsdoc */\nimport React from 'react';\nimport { LayoutContext } from '../contexts/LayoutContext';\nimport { getClosestMediaPropsFactory, isMediaActiveFactory } from '../utils';\n/**\n * Quick access to theme and helpers to work with media queries\n * ---\n * Storybook - https://preview.gravity-ui.com/uikit/?path=/docs/layout--playground#uselayoutcontext\n */\nexport const useLayoutContext = () => {\n    const { activeMediaQuery, theme } = React.useContext(LayoutContext);\n    const { isMediaActive, getClosestMediaProps } = React.useMemo(() => ({\n        isMediaActive: isMediaActiveFactory(activeMediaQuery),\n        getClosestMediaProps: getClosestMediaPropsFactory(activeMediaQuery),\n    }), [activeMediaQuery]);\n    return {\n        theme,\n        activeMediaQuery,\n        isMediaActive,\n        getClosestMediaProps,\n    };\n};\n","import React from 'react';\nexport const AlertContext = React.createContext(null);\n","import React from 'react';\nimport { AlertContext } from './AlertContext';\nexport const useAlertContext = () => {\n    const context = React.useContext(AlertContext);\n    if (!context)\n        throw new Error('Alert: `useAlertContext` hook is used out of \"AlertContext\"');\n    return context;\n};\n","import React from 'react';\nimport { Button } from '../Button';\nimport { useAlertContext } from './useAlertContext';\nexport const AlertAction = (props) => {\n    const { view } = useAlertContext();\n    return React.createElement(Button, Object.assign({ view: view === 'filled' ? 'normal-contrast' : undefined }, props));\n};\n","import { block } from '../utils/cn';\nimport './Alert.css';\nexport const DEFAULT_ICON_SIZE = 18;\nexport const bAlert = block('alert');\n","import React from 'react';\nimport { AlertContext } from './AlertContext';\nexport const AlertContextProvider = ({ layout, view, children }) => {\n    return React.createElement(AlertContext.Provider, { value: { layout, view } }, children);\n};\n","import * as React from 'react';\nconst CircleCheckFill = (props) => (React.createElement(\"svg\", Object.assign({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", viewBox: \"0 0 16 16\" }, props),\n    React.createElement(\"path\", { fill: \"currentColor\", fillRule: \"evenodd\", d: \"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14m3.1-8.55a.75.75 0 1 0-1.2-.9L7.419 8.858 6.03 7.47a.75.75 0 0 0-1.06 1.06l2 2a.75.75 0 0 0 1.13-.08z\", clipRule: \"evenodd\" })));\nexport default CircleCheckFill;\n","import * as React from 'react';\nconst CircleCheck = (props) => (React.createElement(\"svg\", Object.assign({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", viewBox: \"0 0 16 16\" }, props),\n    React.createElement(\"path\", { fill: \"currentColor\", fillRule: \"evenodd\", d: \"M13.5 8a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0m-3.9-1.55a.75.75 0 1 0-1.2-.9L7.419 8.858 6.03 7.47a.75.75 0 0 0-1.06 1.06l2 2a.75.75 0 0 0 1.13-.08z\", clipRule: \"evenodd\" })));\nexport default CircleCheck;\n","import * as React from 'react';\nconst ThunderboltFill = (props) => (React.createElement(\"svg\", Object.assign({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", viewBox: \"0 0 16 16\" }, props),\n    React.createElement(\"path\", { fill: \"currentColor\", d: \"m14.61 6.914-7.632 8.08a1.614 1.614 0 0 1-2.69-1.66L5.5 10H2.677A1.677 1.677 0 0 1 1.12 7.7l2.323-5.807A2.22 2.22 0 0 1 5.5.5h4c.968 0 1.637.967 1.298 1.873L10 4.5h3.569a1.431 1.431 0 0 1 1.04 2.414\" })));\nexport default ThunderboltFill;\n","import * as React from 'react';\nconst Thunderbolt = (props) => (React.createElement(\"svg\", Object.assign({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", viewBox: \"0 0 16 16\" }, props),\n    React.createElement(\"path\", { fill: \"currentColor\", fillRule: \"evenodd\", d: \"m7.836 6 .76-2.027L9.336 2H5.5a.72.72 0 0 0-.664.45L2.513 8.257a.177.177 0 0 0 .164.243h4.965l-.732 2.013-1.082 2.975a.382.382 0 0 0 .637.392l6.956-7.391A.29.29 0 0 0 13.21 6H7.835m2.727-3 .235-.627A1.386 1.386 0 0 0 9.5.5h-4c-.906 0-1.72.552-2.057 1.393L1.12 7.7A1.677 1.677 0 0 0 2.677 10H5.5l-.545 1.5-.537 1.475a1.882 1.882 0 0 0 3.14 1.933l6.956-7.391A1.79 1.79 0 0 0 13.21 4.5H10z\", clipRule: \"evenodd\" })));\nexport default Thunderbolt;\n","import React from 'react';\nimport { CircleCheck, CircleCheckFill, CircleInfo, CircleInfoFill, CircleXmark, CircleXmarkFill, Thunderbolt, ThunderboltFill, TriangleExclamation, TriangleExclamationFill, } from '@gravity-ui/icons';\nimport { Icon } from '../Icon';\nimport { colorText } from '../Text/colorText/colorText';\nimport { DEFAULT_ICON_SIZE, bAlert } from './constants';\nconst typeToIcon = {\n    danger: {\n        filled: CircleXmarkFill,\n        outlined: CircleXmark,\n    },\n    info: {\n        filled: CircleInfoFill,\n        outlined: CircleInfo,\n    },\n    positive: {\n        filled: CircleCheckFill,\n        outlined: CircleCheck,\n    },\n    success: {\n        filled: CircleCheckFill,\n        outlined: CircleCheck,\n    },\n    warning: {\n        filled: TriangleExclamationFill,\n        outlined: TriangleExclamation,\n    },\n    utility: {\n        filled: ThunderboltFill,\n        outlined: Thunderbolt,\n    },\n    normal: null,\n};\nexport const AlertIcon = ({ className, theme, view = 'filled', size = DEFAULT_ICON_SIZE, }) => {\n    const iconByTheme = typeToIcon[theme];\n    if (!iconByTheme) {\n        return null;\n    }\n    let color;\n    if (theme === 'success') {\n        color = 'positive';\n    }\n    else if (theme !== 'normal') {\n        color = theme;\n    }\n    return (React.createElement(\"div\", { className: bAlert('icon', colorText({ color }, className)) },\n        React.createElement(Icon, { data: iconByTheme[view], size: size })));\n};\n","import * as React from 'react';\nconst CircleXmarkFill = (props) => (React.createElement(\"svg\", Object.assign({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", viewBox: \"0 0 16 16\" }, props),\n    React.createElement(\"path\", { fill: \"currentColor\", fillRule: \"evenodd\", d: \"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14M6.53 5.47a.75.75 0 0 0-1.06 1.06L6.94 8 5.47 9.47a.75.75 0 1 0 1.06 1.06L8 9.06l1.47 1.47a.75.75 0 1 0 1.06-1.06L9.06 8l1.47-1.47a.75.75 0 1 0-1.06-1.06L8 6.94z\", clipRule: \"evenodd\" })));\nexport default CircleXmarkFill;\n","import * as React from 'react';\nconst CircleXmark = (props) => (React.createElement(\"svg\", Object.assign({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", viewBox: \"0 0 16 16\" }, props),\n    React.createElement(\"path\", { fill: \"currentColor\", fillRule: \"evenodd\", d: \"M13.5 8a5.5 5.5 0 1 1-11 0 5.5 5.5 0 0 1 11 0M15 8A7 7 0 1 1 1 8a7 7 0 0 1 14 0M6.53 5.47a.75.75 0 0 0-1.06 1.06L6.94 8 5.47 9.47a.75.75 0 1 0 1.06 1.06L8 9.06l1.47 1.47a.75.75 0 1 0 1.06-1.06L9.06 8l1.47-1.47a.75.75 0 1 0-1.06-1.06L8 6.94z\", clipRule: \"evenodd\" })));\nexport default CircleXmark;\n","import * as React from 'react';\nconst CircleInfoFill = (props) => (React.createElement(\"svg\", Object.assign({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", viewBox: \"0 0 16 16\" }, props),\n    React.createElement(\"path\", { fill: \"currentColor\", fillRule: \"evenodd\", d: \"M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14m1-9.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0M8 7.75a.75.75 0 0 1 .75.75V11a.75.75 0 0 1-1.5 0V8.5A.75.75 0 0 1 8 7.75\", clipRule: \"evenodd\" })));\nexport default CircleInfoFill;\n","import * as React from 'react';\nconst CircleInfo = (props) => (React.createElement(\"svg\", Object.assign({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", viewBox: \"0 0 16 16\" }, props),\n    React.createElement(\"path\", { fill: \"currentColor\", fillRule: \"evenodd\", d: \"M8 13.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11M8 15A7 7 0 1 0 8 1a7 7 0 0 0 0 14m1-9.5a1 1 0 1 1-2 0 1 1 0 0 1 2 0m-.25 3a.75.75 0 0 0-1.5 0V11a.75.75 0 0 0 1.5 0z\", clipRule: \"evenodd\" })));\nexport default CircleInfo;\n","import * as React from 'react';\nconst TriangleExclamationFill = (props) => (React.createElement(\"svg\", Object.assign({ xmlns: \"http://www.w3.org/2000/svg\", width: 16, height: 16, fill: \"none\", viewBox: \"0 0 16 16\" }, props),\n    React.createElement(\"path\", { fill: \"currentColor\", fillRule: \"evenodd\", d: \"M5.835 2.244c.963-1.665 3.367-1.665 4.33 0l4.916 8.505c.964 1.666-.24 3.751-2.164 3.751H3.083c-1.925 0-3.128-2.085-2.165-3.751zM8 5a.75.75 0 0 1 .75.75v2a.75.75 0 1 1-1.5 0v-2A.75.75 0 0 1 8 5m1 5.75a1 1 0 1 1-2 0 1 1 0 0 1 2 0\", clipRule: \"evenodd\" })));\nexport default TriangleExclamationFill;\n","import React from 'react';\nimport { Text } from '../Text';\nimport { bAlert } from './constants';\nexport const AlertTitle = ({ text, className }) => {\n    return (React.createElement(Text, { variant: \"subheader-2\", className: bAlert('title', className) }, text));\n};\n","import React from 'react';\nimport { Xmark } from '@gravity-ui/icons';\nimport { Button } from '../Button';\nimport { Card } from '../Card';\nimport { Icon } from '../Icon';\nimport { colorText } from '../Text';\nimport { Flex, spacing } from '../layout';\nimport { AlertAction } from './AlertAction';\nimport { AlertActions } from './AlertActions';\nimport { AlertContextProvider } from './AlertContextProvider';\nimport { AlertIcon } from './AlertIcon';\nimport { AlertTitle } from './AlertTitle';\nimport { DEFAULT_ICON_SIZE, bAlert } from './constants';\nexport const Alert = (props) => {\n    const { theme = 'normal', view = 'filled', layout = 'vertical', message, className, corners, style, onClose, align, qa, } = props;\n    return (React.createElement(AlertContextProvider, { layout: layout, view: view },\n        React.createElement(Card, { style: style, className: bAlert({ corners }, spacing({ py: 4, px: 5 }, className)), theme: theme, view: view, qa: qa },\n            React.createElement(Flex, { gap: \"3\", alignItems: align },\n                props.icon || React.createElement(Alert.Icon, { theme: theme, view: view }),\n                React.createElement(Flex, { direction: layout === 'vertical' ? 'column' : 'row', gap: \"5\", grow: true },\n                    React.createElement(Flex, { gap: \"2\", grow: true, className: bAlert('text-content') },\n                        React.createElement(Flex, { direction: \"column\", gap: \"1\", grow: true, justifyContent: align },\n                            typeof props.title === 'string' ? (React.createElement(Alert.Title, { text: props.title })) : (props.title),\n                            message)),\n                    Array.isArray(props.actions) ? (React.createElement(Alert.Actions, { items: props.actions })) : (props.actions)),\n                onClose && (React.createElement(Button, { view: \"flat\", onClick: onClose },\n                    React.createElement(Icon, { data: Xmark, size: DEFAULT_ICON_SIZE, className: colorText({ color: 'secondary' }) })))))));\n};\nAlert.Icon = AlertIcon;\nAlert.Title = AlertTitle;\nAlert.Actions = AlertActions;\nAlert.Action = AlertAction;\n","import React from 'react';\nimport { Flex } from '../layout';\nimport { AlertAction } from './AlertAction';\nimport { bAlert } from './constants';\nimport { useAlertContext } from './useAlertContext';\nexport const AlertActions = ({ items, children, className }) => {\n    const { layout } = useAlertContext();\n    return (React.createElement(Flex, { className: bAlert('actions', { minContent: layout === 'horizontal' }, className), direction: \"row\", gap: \"3\", wrap: true, alignItems: layout === 'horizontal' ? 'center' : 'flex-start' }, (items === null || items === void 0 ? void 0 : items.map(({ handler, text }, i) => (React.createElement(AlertAction, { key: i, onClick: handler }, text)))) || children));\n};\n","import React from 'react';\nimport { useActionHandlers } from '../../hooks';\nimport { block } from '../utils/cn';\nimport './Card.css';\nconst b = block('card');\nexport const Card = React.forwardRef(function Card(props, ref) {\n    const { type = 'container', theme, view, size = 'm', children, className, onClick, disabled, selected, style, qa, } = props;\n    const isTypeAction = type === 'action';\n    const isTypeSelection = type === 'selection';\n    const isTypeContainer = type === 'container';\n    /* Clickable card — only with type 'action' or 'selection' and not selected or disabled */\n    const hasAction = isTypeAction || isTypeSelection;\n    const isClickable = hasAction && Boolean(onClick) && !(disabled || selected);\n    /* Theme only with type 'container' */\n    const defaultTheme = isTypeContainer ? 'normal' : undefined;\n    /* View only with type 'container' and 'selection' */\n    const defaultView = isTypeContainer || isTypeSelection ? 'outlined' : undefined;\n    const handleClick = isClickable ? onClick : undefined;\n    const { onKeyDown } = useActionHandlers(onClick);\n    return (React.createElement(\"div\", { style: style, ref: ref, role: isClickable ? 'button' : undefined, className: b({\n            theme: theme || defaultTheme,\n            view: view || defaultView,\n            type,\n            selected,\n            size,\n            disabled,\n            clickable: isClickable,\n        }, className), onClick: handleClick, onKeyDown: isClickable ? onKeyDown : undefined, tabIndex: isClickable ? 0 : undefined, \"data-qa\": qa }, children));\n});\n"],"names":["bash","hljs","regex","VAR","BRACED_VAR","begin","end","contains","Object","assign","className","variants","concat","SUBST","BACKSLASH_ESCAPE","COMMENT","inherit","match","scope","HERE_DOC","starts","END_SAME_AS_BEGIN","QUOTE_STRING","push","ARITHMETIC","NUMBER_MODE","KNOWN_SHEBANG","SHEBANG","binary","join","relevance","FUNCTION","returnBegin","TITLE_MODE","name","aliases","keywords","$pattern","keyword","literal","built_in","xml","TAG_NAME_RE","optional","XML_ENTITIES","XML_META_KEYWORDS","illegal","XML_META_PAR_KEYWORDS","APOS_META_STRING_MODE","APOS_STRING_MODE","QUOTE_META_STRING_MODE","QUOTE_STRING_MODE","TAG_INTERNALS","endsWithParent","endsParent","case_insensitive","unicodeRegex","returnEnd","subLanguage","lookahead","either","json","LITERALS","LITERALS_MODE","beginKeywords","C_NUMBER_MODE","C_LINE_COMMENT_MODE","C_BLOCK_COMMENT_MODE","IDENT_RE","KEYWORDS","TYPES","ERROR_TYPES","BUILT_IN_GLOBALS","BUILT_IN_VARIABLES","BUILT_INS","javascript","IDENT_RE$1","FRAGMENT","XML_TAG","isTrulyOpeningTag","response","afterMatchIndex","length","index","nextChar","input","ignoreMatch","m","hasClosingTag","_ref","after","tag","slice","indexOf","afterMatch","substring","KEYWORDS$1","decimalDigits","frac","decimalInteger","NUMBER","HTML_TEMPLATE","CSS_TEMPLATE","GRAPHQL_TEMPLATE","TEMPLATE_STRING","excludeEnd","excludeBegin","SUBST_INTERNALS","SUBST_AND_COMMENTS","PARAMS_CONTAINS","PARAMS","CLASS_OR_EXTENDS","CLASS_REFERENCE","_","FUNCTION_DEFINITION","label","FUNCTION_CALL","list","map","x","PROPERTY_ACCESS","GETTER_OR_SETTER","FUNC_LEAD_IN_RE","UNDERSCORE_IDENT_RE","FUNCTION_VARIABLE","exports","RE_STARTERS_RE","REGEXP_MODE","skip","o","reduce","e","n","toLowerCase","class","for","a","amp","apos","gt","lt","nbsp","quot","c","i","u","l","s","f","d","p","y","h","g","k","v","q","b","S","$","z","E","A","R","B","L","O","j","C","I","T","M","w","D","F","P","Z","N","G","U","V","H","Q","W","J","K","RegExp","X","Y","ee","ne","re","te","oe","ae","ce","ie","ue","le","se","fe","_e","de","pe","ye","he","ge","me","ke","xe","ve","qe","r","t","test","je","exec","prevCapture","inline","simple","replace","items","$e","ordered","start","key","type","be","Se","ze","startsWith","Ee","Array","isArray","Ae","Re","Be","inTable","apply","trim","split","filter","Boolean","forEach","Le","align","cells","header","children","Oe","textAlign","Ce","Ie","Te","Me","we","De","decodeURIComponent","Fe","Pe","Ze","Ne","Ge","Ue","Ve","He","_len","arguments","_key","Qe","shift","We","undefined","overrides","namedCodesToUnicode","slugify","sanitizer","createElement","enforceAtxHeadings","_len2","_key2","forceInline","forceBlock","pop","wrapper","forceWrapper","toUpperCase","endsWith","alert","unshift","attrs","text","noInnerParse","lang","footnote","identifier","target","href","completed","checked","readOnly","id","level","some","inAnchor","inHTML","alt","title","src","disableAutoLink","every","ref","fallbackChildren","style","disableParsingRawHTML","keys","sort","renderRule","options","python","RESERVED_WORDS","PROMPT","LITERAL_BRACKET","STRING","digitpart","pointfloat","COMMENT_TYPE","HASH_COMMENT_MODE","deepFreeze","obj","Map","clear","delete","set","Error","Set","add","freeze","getOwnPropertyNames","prop","isFrozen","Response","constructor","mode","data","this","isMatchIgnored","escapeHTML","value","inherit$1","original","result","create","objects","emitsWrappingTags","node","HTMLRenderer","parseTree","buffer","classPrefix","walk","addText","openNode","scopeToCSSClass","prefix","includes","pieces","repeat","span","closeNode","newNode","opts","TokenTree","rootNode","stack","top","root","closeAllNodes","toJSON","JSON","stringify","builder","_walk","child","_collapse","el","TokenTreeEmitter","super","startScope","endScope","__addSublanguage","emitter","toHTML","finalize","source","anyNumberOfTimes","args","_len3","_key3","splice","stripOptionsFromArgs","capture","countMatchGroups","toString","BACKREF_RE","_rewriteBackreferences","regexps","_ref2","joinWith","numCaptures","offset","out","String","Number","NUMBER_RE","C_NUMBER_RE","BINARY_NUMBER_RE","ENGLISH_WORD","BINARY_NUMBER_MODE","UNDERSCORE_TITLE_MODE","METHOD_GUARD","MODES","__proto__","on:begin","resp","_beginMatch","on:end","MATCH_NOTHING_RE","PHRASAL_WORDS_MODE","beginShebang","skipIfHasPrecedingDot","scopeClassName","_parent","parent","__beforeBegin","compileIllegal","compileMatch","compileRelevance","beforeMatchExt","beforeMatch","originalMode","COMMON_KEYWORDS","compileKeywords","rawKeywords","caseInsensitive","scopeName","compiledKeywords","compileList","keywordList","pair","scoreForKeyword","providedScore","commonKeyword","seenDeprecations","error","message","console","warn","_len4","_key4","log","deprecated","version","MultiClassError","remapScopeNames","regexes","_ref3","scopeNames","emit","positions","_emit","_multi","MultiClass","beginScope","scopeSugar","_wrap","beginMultiClass","endMultiClass","compileLanguage","language","langRe","global","MultiRegex","matchIndexes","matchAt","position","addRule","compile","terminators","matcherRe","lastIndex","findIndex","matchData","ResumableMultiRegex","rules","multiRegexes","count","regexIndex","getMatcher","matcher","_ref4","resumingScanAtSamePosition","considerAll","m2","compilerExtensions","classNameAliases","compileMode","cmode","isCompiled","ext","keywordPattern","keywordPatternRe","beginRe","endRe","terminatorEnd","illegalRe","cachedVariants","variant","dependencyOnParent","expandOrCloneMode","mm","term","rule","buildModeRegex","HTMLInjectionError","reason","html","escape","NO_MATCH","Symbol","HLJS","languages","plugins","SAFE_MODE","LANGUAGE_NOT_FOUND","PLAINTEXT_LANGUAGE","disableAutodetect","ignoreUnescapedHTML","throwUnescapedHTML","noHighlightRe","languageDetectRe","cssSelector","__emitter","shouldNotHighlight","languageName","highlight","codeOrLanguageName","optionsOrCode","ignoreIllegals","code","context","fire","_highlight","codeToHighlight","continuation","keywordHits","keywordData","matchText","processKeywords","modeBuffer","buf","word","kind","keywordRelevance","cssClass","emitKeyword","processBuffer","continuations","_top","highlightAuto","_emitter","processSubLanguage","emitMultiClass","max","klass","startNewMode","endOfMode","matchPlusRemainder","matched","lexeme","doIgnore","resumeScanAtSamePosition","doEndMatch","endMode","origin","lastMatch","processLexeme","textBeforeMatch","err","badRule","newMode","beforeCallbacks","cb","doBeginMatch","processed","iterations","getLanguage","md","current","item","processContinuations","__emitTokens","processedCount","_illegalBy","resultSoFar","errorRaised","languageSubset","plaintext","justTextHighlightResult","results","autoDetection","sorted","supersetOf","best","secondBest","highlightElement","element","block","classes","parentNode","find","_class","blockLanguage","dataset","highlighted","innerHTML","textContent","currentLang","resultLang","classList","updateClassName","wantsHighlight","highlightAll","document","readyState","window","addEventListener","querySelectorAll","registerAliases","aliasList","_ref5","alias","event","plugin","highlightBlock","configure","userOptions","initHighlighting","initHighlightingOnLoad","registerLanguage","languageDefinition","error$1","rawDefinition","bind","unregisterLanguage","listLanguages","addPlugin","upgradePluginAPI","removePlugin","debugMode","safeMode","versionString","newInstance","module","HighlightJS","default","CSS_SIZE_EXCEPTION","mediaByOrder","xl","xxl","xxxl","mediaOrder","makeCssMod","space","spacing","props","prototype","hasOwnProperty","call","LayoutContext","React","theme","breakpoints","spaceBaseSize","components","container","gutters","media","activeMediaQuery","Flex","as","Tag","direction","width","grow","basis","alignContent","alignItems","alignSelf","justifyContent","justifyItems","justifySelf","shrink","wrap","gap","gapRow","qa","restProps","__rest","getClosestMediaProps","useLayoutContext","isMediaActive","activeType","toCheck","currentActive","medias","candidate","applyMediaProps","property","gapSpaceSize","columnGap","gapRowSpaceSize","rowGap","spaceSize","flexDirection","flexGrow","flexWrap","flexBasis","flexShrink","AlertContext","useAlertContext","AlertAction","view","Button","DEFAULT_ICON_SIZE","bAlert","AlertContextProvider","layout","Provider","xmlns","height","fill","viewBox","fillRule","clipRule","typeToIcon","danger","filled","outlined","info","positive","CircleCheckFill","CircleCheck","success","warning","TriangleExclamation","utility","ThunderboltFill","Thunderbolt","normal","Alert","corners","onClose","Card","py","px","icon","Icon","Title","actions","Actions","onClick","Xmark","size","colorText","color","iconByTheme","Text","minContent","handler","Action","disabled","selected","isTypeSelection","isTypeContainer","isClickable","defaultTheme","defaultView","handleClick","onKeyDown","useActionHandlers","role","clickable","tabIndex"],"sourceRoot":""}